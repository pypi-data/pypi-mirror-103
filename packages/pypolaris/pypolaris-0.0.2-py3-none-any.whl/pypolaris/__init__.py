# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
import sys
if not(hasattr(sys,"frozen")):
    if sys.platform == 'win32':
        import site, os
        trk_path = site.getsitepackages()[1]+"\\pypolaris"
        os.environ["PATH"] += os.pathsep + trk_path 
        sys.path.append(trk_path)
        
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_pypolaris')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_pypolaris')
    _pypolaris = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pypolaris', [dirname(__file__)])
        except ImportError:
            import _pypolaris
            return _pypolaris
        try:
            _mod = imp.load_module('_pypolaris', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _pypolaris = swig_import_helper()
    del swig_import_helper
else:
    import _pypolaris
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pypolaris.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self) -> "PyObject *":
        return _pypolaris.SwigPyIterator_value(self)

    def incr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _pypolaris.SwigPyIterator_incr(self, n)

    def decr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _pypolaris.SwigPyIterator_decr(self, n)

    def distance(self, x: 'SwigPyIterator') -> "ptrdiff_t":
        return _pypolaris.SwigPyIterator_distance(self, x)

    def equal(self, x: 'SwigPyIterator') -> "bool":
        return _pypolaris.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _pypolaris.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _pypolaris.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _pypolaris.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _pypolaris.SwigPyIterator_previous(self)

    def advance(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _pypolaris.SwigPyIterator_advance(self, n)

    def __eq__(self, x: 'SwigPyIterator') -> "bool":
        return _pypolaris.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: 'SwigPyIterator') -> "bool":
        return _pypolaris.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _pypolaris.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _pypolaris.SwigPyIterator___isub__(self, n)

    def __add__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _pypolaris.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _pypolaris.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _pypolaris.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class ios_base(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ios_base, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ios_base, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    erase_event = _pypolaris.ios_base_erase_event
    imbue_event = _pypolaris.ios_base_imbue_event
    copyfmt_event = _pypolaris.ios_base_copyfmt_event

    def register_callback(self, __fn: 'std::ios_base::event_callback', __index: 'int') -> "void":
        return _pypolaris.ios_base_register_callback(self, __fn, __index)

    def flags(self, *args) -> "std::ios_base::fmtflags":
        return _pypolaris.ios_base_flags(self, *args)

    def setf(self, *args) -> "std::ios_base::fmtflags":
        return _pypolaris.ios_base_setf(self, *args)

    def unsetf(self, __mask: 'std::ios_base::fmtflags') -> "void":
        return _pypolaris.ios_base_unsetf(self, __mask)

    def precision(self, *args) -> "std::streamsize":
        return _pypolaris.ios_base_precision(self, *args)

    def width(self, *args) -> "std::streamsize":
        return _pypolaris.ios_base_width(self, *args)
    if _newclass:
        sync_with_stdio = staticmethod(_pypolaris.ios_base_sync_with_stdio)
    else:
        sync_with_stdio = _pypolaris.ios_base_sync_with_stdio

    def imbue(self, __loc: 'std::locale const &') -> "std::locale":
        return _pypolaris.ios_base_imbue(self, __loc)

    def getloc(self) -> "std::locale":
        return _pypolaris.ios_base_getloc(self)
    if _newclass:
        xalloc = staticmethod(_pypolaris.ios_base_xalloc)
    else:
        xalloc = _pypolaris.ios_base_xalloc

    def iword(self, __ix: 'int') -> "long &":
        return _pypolaris.ios_base_iword(self, __ix)

    def pword(self, __ix: 'int') -> "void *&":
        return _pypolaris.ios_base_pword(self, __ix)
    __swig_destroy__ = _pypolaris.delete_ios_base
    __del__ = lambda self: None
ios_base_swigregister = _pypolaris.ios_base_swigregister
ios_base_swigregister(ios_base)
cvar = _pypolaris.cvar
ios_base.boolalpha = _pypolaris.cvar.ios_base_boolalpha
ios_base.dec = _pypolaris.cvar.ios_base_dec
ios_base.fixed = _pypolaris.cvar.ios_base_fixed
ios_base.hex = _pypolaris.cvar.ios_base_hex
ios_base.internal = _pypolaris.cvar.ios_base_internal
ios_base.left = _pypolaris.cvar.ios_base_left
ios_base.oct = _pypolaris.cvar.ios_base_oct
ios_base.right = _pypolaris.cvar.ios_base_right
ios_base.scientific = _pypolaris.cvar.ios_base_scientific
ios_base.showbase = _pypolaris.cvar.ios_base_showbase
ios_base.showpoint = _pypolaris.cvar.ios_base_showpoint
ios_base.showpos = _pypolaris.cvar.ios_base_showpos
ios_base.skipws = _pypolaris.cvar.ios_base_skipws
ios_base.unitbuf = _pypolaris.cvar.ios_base_unitbuf
ios_base.uppercase = _pypolaris.cvar.ios_base_uppercase
ios_base.adjustfield = _pypolaris.cvar.ios_base_adjustfield
ios_base.basefield = _pypolaris.cvar.ios_base_basefield
ios_base.floatfield = _pypolaris.cvar.ios_base_floatfield
ios_base.badbit = _pypolaris.cvar.ios_base_badbit
ios_base.eofbit = _pypolaris.cvar.ios_base_eofbit
ios_base.failbit = _pypolaris.cvar.ios_base_failbit
ios_base.goodbit = _pypolaris.cvar.ios_base_goodbit
ios_base.app = _pypolaris.cvar.ios_base_app
ios_base.ate = _pypolaris.cvar.ios_base_ate
ios_base.binary = _pypolaris.cvar.ios_base_binary
ios_base.ios_base_in = _pypolaris.cvar.ios_base_ios_base_in
ios_base.out = _pypolaris.cvar.ios_base_out
ios_base.trunc = _pypolaris.cvar.ios_base_trunc
ios_base.beg = _pypolaris.cvar.ios_base_beg
ios_base.cur = _pypolaris.cvar.ios_base_cur
ios_base.end = _pypolaris.cvar.ios_base_end

def ios_base_sync_with_stdio(__sync: 'bool'=True) -> "bool":
    return _pypolaris.ios_base_sync_with_stdio(__sync)
ios_base_sync_with_stdio = _pypolaris.ios_base_sync_with_stdio

def ios_base_xalloc() -> "int":
    return _pypolaris.ios_base_xalloc()
ios_base_xalloc = _pypolaris.ios_base_xalloc

class ios(ios_base):
    __swig_setmethods__ = {}
    for _s in [ios_base]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ios, name, value)
    __swig_getmethods__ = {}
    for _s in [ios_base]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ios, name)
    __repr__ = _swig_repr

    def rdstate(self) -> "std::ios_base::iostate":
        return _pypolaris.ios_rdstate(self)

    def clear(self, *args) -> "void":
        return _pypolaris.ios_clear(self, *args)

    def setstate(self, __state: 'std::ios_base::iostate') -> "void":
        return _pypolaris.ios_setstate(self, __state)

    def good(self) -> "bool":
        return _pypolaris.ios_good(self)

    def eof(self) -> "bool":
        return _pypolaris.ios_eof(self)

    def fail(self) -> "bool":
        return _pypolaris.ios_fail(self)

    def bad(self) -> "bool":
        return _pypolaris.ios_bad(self)

    def exceptions(self, *args) -> "void":
        return _pypolaris.ios_exceptions(self, *args)

    def __init__(self, __sb: 'streambuf'):
        this = _pypolaris.new_ios(__sb)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pypolaris.delete_ios
    __del__ = lambda self: None

    def tie(self, *args) -> "std::basic_ostream< char,std::char_traits< char > > *":
        return _pypolaris.ios_tie(self, *args)

    def rdbuf(self, *args) -> "std::basic_streambuf< char,std::char_traits< char > > *":
        return _pypolaris.ios_rdbuf(self, *args)

    def copyfmt(self, __rhs: 'ios') -> "std::basic_ios< char > &":
        return _pypolaris.ios_copyfmt(self, __rhs)

    def fill(self, *args) -> "std::basic_ios< char >::char_type":
        return _pypolaris.ios_fill(self, *args)

    def imbue(self, __loc: 'std::locale const &') -> "std::locale":
        return _pypolaris.ios_imbue(self, __loc)

    def narrow(self, __c: 'std::basic_ios< char >::char_type', __dfault: 'char') -> "char":
        return _pypolaris.ios_narrow(self, __c, __dfault)

    def widen(self, __c: 'char') -> "std::basic_ios< char >::char_type":
        return _pypolaris.ios_widen(self, __c)
ios_swigregister = _pypolaris.ios_swigregister
ios_swigregister(ios)

class string(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, string, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, string, name)
    __repr__ = _swig_repr

    def length(self) -> "std::basic_string< char >::size_type":
        return _pypolaris.string_length(self)

    def max_size(self) -> "std::basic_string< char >::size_type":
        return _pypolaris.string_max_size(self)

    def capacity(self) -> "std::basic_string< char >::size_type":
        return _pypolaris.string_capacity(self)

    def reserve(self, __res_arg: 'std::basic_string< char >::size_type'=0) -> "void":
        return _pypolaris.string_reserve(self, __res_arg)

    def copy(self, __s: 'char *', __n: 'std::basic_string< char >::size_type', __pos: 'std::basic_string< char >::size_type'=0) -> "std::basic_string< char >::size_type":
        return _pypolaris.string_copy(self, __s, __n, __pos)

    def c_str(self) -> "char const *":
        return _pypolaris.string_c_str(self)

    def find(self, *args) -> "std::basic_string< char >::size_type":
        return _pypolaris.string_find(self, *args)

    def rfind(self, *args) -> "std::basic_string< char >::size_type":
        return _pypolaris.string_rfind(self, *args)

    def find_first_of(self, *args) -> "std::basic_string< char >::size_type":
        return _pypolaris.string_find_first_of(self, *args)

    def find_last_of(self, *args) -> "std::basic_string< char >::size_type":
        return _pypolaris.string_find_last_of(self, *args)

    def find_first_not_of(self, *args) -> "std::basic_string< char >::size_type":
        return _pypolaris.string_find_first_not_of(self, *args)

    def find_last_not_of(self, *args) -> "std::basic_string< char >::size_type":
        return _pypolaris.string_find_last_not_of(self, *args)

    def substr(self, *args) -> "std::basic_string< char >":
        return _pypolaris.string_substr(self, *args)

    def empty(self) -> "bool":
        return _pypolaris.string_empty(self)

    def size(self) -> "std::basic_string< char >::size_type":
        return _pypolaris.string_size(self)

    def swap(self, v: 'string') -> "void":
        return _pypolaris.string_swap(self, v)

    def begin(self) -> "std::basic_string< char >::iterator":
        return _pypolaris.string_begin(self)

    def end(self) -> "std::basic_string< char >::iterator":
        return _pypolaris.string_end(self)

    def rbegin(self) -> "std::basic_string< char >::reverse_iterator":
        return _pypolaris.string_rbegin(self)

    def rend(self) -> "std::basic_string< char >::reverse_iterator":
        return _pypolaris.string_rend(self)

    def get_allocator(self) -> "std::basic_string< char >::allocator_type":
        return _pypolaris.string_get_allocator(self)

    def erase(self, *args) -> "std::basic_string< char >::iterator":
        return _pypolaris.string_erase(self, *args)

    def __init__(self, *args):
        this = _pypolaris.new_string(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def assign(self, *args) -> "void":
        return _pypolaris.string_assign(self, *args)

    def resize(self, *args) -> "void":
        return _pypolaris.string_resize(self, *args)

    def iterator(self) -> "swig::SwigPyIterator *":
        return _pypolaris.string_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _pypolaris.string___nonzero__(self)

    def __bool__(self) -> "bool":
        return _pypolaris.string___bool__(self)

    def __len__(self) -> "std::basic_string< char >::size_type":
        return _pypolaris.string___len__(self)

    def __getslice__(self, i: 'std::basic_string< char >::difference_type', j: 'std::basic_string< char >::difference_type') -> "std::basic_string< char,std::char_traits< char >,std::allocator< char > > *":
        return _pypolaris.string___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _pypolaris.string___setslice__(self, *args)

    def __delslice__(self, i: 'std::basic_string< char >::difference_type', j: 'std::basic_string< char >::difference_type') -> "void":
        return _pypolaris.string___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _pypolaris.string___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::basic_string< char >::value_type":
        return _pypolaris.string___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _pypolaris.string___setitem__(self, *args)

    def insert(self, *args) -> "void":
        return _pypolaris.string_insert(self, *args)

    def replace(self, *args) -> "std::basic_string< char > &":
        return _pypolaris.string_replace(self, *args)

    def __iadd__(self, v: 'string') -> "std::basic_string< char > &":
        return _pypolaris.string___iadd__(self, v)

    def __add__(self, v: 'string') -> "std::basic_string< char,std::char_traits< char >,std::allocator< char > > *":
        return _pypolaris.string___add__(self, v)

    def __radd__(self, v: 'string') -> "std::basic_string< char,std::char_traits< char >,std::allocator< char > > *":
        return _pypolaris.string___radd__(self, v)

    def __str__(self) -> "std::basic_string< char,std::char_traits< char >,std::allocator< char > >":
        return _pypolaris.string___str__(self)

    def __rlshift__(self, out: 'ostream') -> "std::basic_ostream< char,std::char_traits< char > > &":
        return _pypolaris.string___rlshift__(self, out)

    def __eq__(self, v: 'string') -> "bool":
        return _pypolaris.string___eq__(self, v)

    def __ne__(self, v: 'string') -> "bool":
        return _pypolaris.string___ne__(self, v)

    def __gt__(self, v: 'string') -> "bool":
        return _pypolaris.string___gt__(self, v)

    def __lt__(self, v: 'string') -> "bool":
        return _pypolaris.string___lt__(self, v)

    def __ge__(self, v: 'string') -> "bool":
        return _pypolaris.string___ge__(self, v)

    def __le__(self, v: 'string') -> "bool":
        return _pypolaris.string___le__(self, v)
    __swig_destroy__ = _pypolaris.delete_string
    __del__ = lambda self: None
string_swigregister = _pypolaris.string_swigregister
string_swigregister(string)
string.npos = _pypolaris.cvar.string_npos

class ostream(ios):
    __swig_setmethods__ = {}
    for _s in [ios]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ostream, name, value)
    __swig_getmethods__ = {}
    for _s in [ios]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ostream, name)
    __repr__ = _swig_repr

    def __init__(self, __sb: 'streambuf'):
        this = _pypolaris.new_ostream(__sb)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pypolaris.delete_ostream
    __del__ = lambda self: None

    def __lshift__(self, *args) -> "std::basic_ostream< char,std::char_traits< char > > &":
        return _pypolaris.ostream___lshift__(self, *args)

    def put(self, __c: 'std::basic_ostream< char >::char_type') -> "std::basic_ostream< char,std::char_traits< char > > &":
        return _pypolaris.ostream_put(self, __c)

    def write(self, __s: 'std::basic_ostream< char >::char_type const *', __n: 'std::streamsize') -> "std::basic_ostream< char,std::char_traits< char > > &":
        return _pypolaris.ostream_write(self, __s, __n)

    def flush(self) -> "std::basic_ostream< char,std::char_traits< char > > &":
        return _pypolaris.ostream_flush(self)

    def tellp(self) -> "std::basic_ostream< char >::pos_type":
        return _pypolaris.ostream_tellp(self)

    def seekp(self, *args) -> "std::basic_ostream< char,std::char_traits< char > > &":
        return _pypolaris.ostream_seekp(self, *args)
ostream_swigregister = _pypolaris.ostream_swigregister
ostream_swigregister(ostream)
cin = cvar.cin
cout = cvar.cout
cerr = cvar.cerr
clog = cvar.clog

class istream(ios):
    __swig_setmethods__ = {}
    for _s in [ios]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, istream, name, value)
    __swig_getmethods__ = {}
    for _s in [ios]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, istream, name)
    __repr__ = _swig_repr

    def __init__(self, __sb: 'streambuf'):
        this = _pypolaris.new_istream(__sb)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pypolaris.delete_istream
    __del__ = lambda self: None

    def __rshift__(self, *args) -> "std::basic_istream< char,std::char_traits< char > > &":
        return _pypolaris.istream___rshift__(self, *args)

    def gcount(self) -> "std::streamsize":
        return _pypolaris.istream_gcount(self)

    def get(self, *args) -> "std::basic_istream< char,std::char_traits< char > > &":
        return _pypolaris.istream_get(self, *args)

    def getline(self, *args) -> "std::basic_istream< char,std::char_traits< char > > &":
        return _pypolaris.istream_getline(self, *args)

    def ignore(self, *args) -> "std::basic_istream< char,std::char_traits< char > > &":
        return _pypolaris.istream_ignore(self, *args)

    def peek(self) -> "std::basic_istream< char >::int_type":
        return _pypolaris.istream_peek(self)

    def read(self, __s: 'std::basic_istream< char >::char_type *', __n: 'std::streamsize') -> "std::basic_istream< char,std::char_traits< char > > &":
        return _pypolaris.istream_read(self, __s, __n)

    def readsome(self, __s: 'std::basic_istream< char >::char_type *', __n: 'std::streamsize') -> "std::streamsize":
        return _pypolaris.istream_readsome(self, __s, __n)

    def putback(self, __c: 'std::basic_istream< char >::char_type') -> "std::basic_istream< char,std::char_traits< char > > &":
        return _pypolaris.istream_putback(self, __c)

    def unget(self) -> "std::basic_istream< char,std::char_traits< char > > &":
        return _pypolaris.istream_unget(self)

    def sync(self) -> "int":
        return _pypolaris.istream_sync(self)

    def tellg(self) -> "std::basic_istream< char >::pos_type":
        return _pypolaris.istream_tellg(self)

    def seekg(self, *args) -> "std::basic_istream< char,std::char_traits< char > > &":
        return _pypolaris.istream_seekg(self, *args)
istream_swigregister = _pypolaris.istream_swigregister
istream_swigregister(istream)

class iostream(istream, ostream):
    __swig_setmethods__ = {}
    for _s in [istream, ostream]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, iostream, name, value)
    __swig_getmethods__ = {}
    for _s in [istream, ostream]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, iostream, name)
    __repr__ = _swig_repr

    def __init__(self, __sb: 'streambuf'):
        this = _pypolaris.new_iostream(__sb)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pypolaris.delete_iostream
    __del__ = lambda self: None
iostream_swigregister = _pypolaris.iostream_swigregister
iostream_swigregister(iostream)


def endl(arg1: 'ostream') -> "std::basic_ostream< char,std::char_traits< char > > &":
    return _pypolaris.endl(arg1)
endl = _pypolaris.endl

def ends(arg1: 'ostream') -> "std::basic_ostream< char,std::char_traits< char > > &":
    return _pypolaris.ends(arg1)
ends = _pypolaris.ends

def flush(arg1: 'ostream') -> "std::basic_ostream< char,std::char_traits< char > > &":
    return _pypolaris.flush(arg1)
flush = _pypolaris.flush
class streambuf(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, streambuf, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, streambuf, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _pypolaris.delete_streambuf
    __del__ = lambda self: None

    def pubimbue(self, __loc: 'std::locale const &') -> "std::locale":
        return _pypolaris.streambuf_pubimbue(self, __loc)

    def getloc(self) -> "std::locale":
        return _pypolaris.streambuf_getloc(self)

    def pubsetbuf(self, __s: 'std::basic_streambuf< char >::char_type *', __n: 'std::streamsize') -> "std::basic_streambuf< char,std::char_traits< char > > *":
        return _pypolaris.streambuf_pubsetbuf(self, __s, __n)

    def pubseekoff(self, *args) -> "std::basic_streambuf< char >::pos_type":
        return _pypolaris.streambuf_pubseekoff(self, *args)

    def pubseekpos(self, *args) -> "std::basic_streambuf< char >::pos_type":
        return _pypolaris.streambuf_pubseekpos(self, *args)

    def pubsync(self) -> "int":
        return _pypolaris.streambuf_pubsync(self)

    def in_avail(self) -> "std::streamsize":
        return _pypolaris.streambuf_in_avail(self)

    def snextc(self) -> "std::basic_streambuf< char >::int_type":
        return _pypolaris.streambuf_snextc(self)

    def sbumpc(self) -> "std::basic_streambuf< char >::int_type":
        return _pypolaris.streambuf_sbumpc(self)

    def sgetc(self) -> "std::basic_streambuf< char >::int_type":
        return _pypolaris.streambuf_sgetc(self)

    def sgetn(self, __s: 'std::basic_streambuf< char >::char_type *', __n: 'std::streamsize') -> "std::streamsize":
        return _pypolaris.streambuf_sgetn(self, __s, __n)

    def sputbackc(self, __c: 'std::basic_streambuf< char >::char_type') -> "std::basic_streambuf< char >::int_type":
        return _pypolaris.streambuf_sputbackc(self, __c)

    def sungetc(self) -> "std::basic_streambuf< char >::int_type":
        return _pypolaris.streambuf_sungetc(self)

    def sputc(self, __c: 'std::basic_streambuf< char >::char_type') -> "std::basic_streambuf< char >::int_type":
        return _pypolaris.streambuf_sputc(self, __c)

    def sputn(self, __s: 'std::basic_streambuf< char >::char_type const *', __n: 'std::streamsize') -> "std::streamsize":
        return _pypolaris.streambuf_sputn(self, __s, __n)
streambuf_swigregister = _pypolaris.streambuf_swigregister
streambuf_swigregister(streambuf)

class istringstream(istream):
    __swig_setmethods__ = {}
    for _s in [istream]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, istringstream, name, value)
    __swig_getmethods__ = {}
    for _s in [istream]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, istringstream, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pypolaris.new_istringstream(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pypolaris.delete_istringstream
    __del__ = lambda self: None

    def rdbuf(self) -> "std::basic_stringbuf< char,std::char_traits< char >,std::allocator< char > > *":
        return _pypolaris.istringstream_rdbuf(self)

    def str(self, *args) -> "void":
        return _pypolaris.istringstream_str(self, *args)
istringstream_swigregister = _pypolaris.istringstream_swigregister
istringstream_swigregister(istringstream)

class ostringstream(ostream):
    __swig_setmethods__ = {}
    for _s in [ostream]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ostringstream, name, value)
    __swig_getmethods__ = {}
    for _s in [ostream]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ostringstream, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pypolaris.new_ostringstream(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pypolaris.delete_ostringstream
    __del__ = lambda self: None

    def rdbuf(self) -> "std::basic_stringbuf< char,std::char_traits< char >,std::allocator< char > > *":
        return _pypolaris.ostringstream_rdbuf(self)

    def str(self) -> "std::basic_string< char,std::char_traits< char >,std::allocator< char > >":
        return _pypolaris.ostringstream_str(self)
ostringstream_swigregister = _pypolaris.ostringstream_swigregister
ostringstream_swigregister(ostringstream)

class stringstream(iostream):
    __swig_setmethods__ = {}
    for _s in [iostream]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, stringstream, name, value)
    __swig_getmethods__ = {}
    for _s in [iostream]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, stringstream, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pypolaris.new_stringstream(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pypolaris.delete_stringstream
    __del__ = lambda self: None

    def rdbuf(self) -> "std::basic_stringbuf< char,std::char_traits< char >,std::allocator< char > > *":
        return _pypolaris.stringstream_rdbuf(self)

    def str(self, *args) -> "void":
        return _pypolaris.stringstream_str(self, *args)
stringstream_swigregister = _pypolaris.stringstream_swigregister
stringstream_swigregister(stringstream)

class pypolaris(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pypolaris, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pypolaris, name)
    __repr__ = _swig_repr
    __swig_setmethods__["probe"] = _pypolaris.pypolaris_probe_set
    __swig_getmethods__["probe"] = _pypolaris.pypolaris_probe_get
    if _newclass:
        probe = _swig_property(_pypolaris.pypolaris_probe_get, _pypolaris.pypolaris_probe_set)
    __swig_setmethods__["ref"] = _pypolaris.pypolaris_ref_set
    __swig_getmethods__["ref"] = _pypolaris.pypolaris_ref_get
    if _newclass:
        ref = _swig_property(_pypolaris.pypolaris_ref_get, _pypolaris.pypolaris_ref_set)
    __swig_setmethods__["obj"] = _pypolaris.pypolaris_obj_set
    __swig_getmethods__["obj"] = _pypolaris.pypolaris_obj_get
    if _newclass:
        obj = _swig_property(_pypolaris.pypolaris_obj_get, _pypolaris.pypolaris_obj_set)
    __swig_setmethods__["probeID"] = _pypolaris.pypolaris_probeID_set
    __swig_getmethods__["probeID"] = _pypolaris.pypolaris_probeID_get
    if _newclass:
        probeID = _swig_property(_pypolaris.pypolaris_probeID_get, _pypolaris.pypolaris_probeID_set)
    __swig_setmethods__["refID"] = _pypolaris.pypolaris_refID_set
    __swig_getmethods__["refID"] = _pypolaris.pypolaris_refID_get
    if _newclass:
        refID = _swig_property(_pypolaris.pypolaris_refID_get, _pypolaris.pypolaris_refID_set)
    __swig_setmethods__["objID"] = _pypolaris.pypolaris_objID_set
    __swig_getmethods__["objID"] = _pypolaris.pypolaris_objID_get
    if _newclass:
        objID = _swig_property(_pypolaris.pypolaris_objID_get, _pypolaris.pypolaris_objID_set)

    def Initialize(self, COMport: 'string', PROBE_NAME: 'string', REF_NAME: 'string', OBJ_NAME: 'string') -> "int":
        return _pypolaris.pypolaris_Initialize(self, COMport, PROBE_NAME, REF_NAME, OBJ_NAME)

    def Run(self) -> "void":
        return _pypolaris.pypolaris_Run(self)

    def Close(self) -> "void":
        return _pypolaris.pypolaris_Close(self)

    def __init__(self):
        this = _pypolaris.new_pypolaris()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pypolaris.delete_pypolaris
    __del__ = lambda self: None
pypolaris_swigregister = _pypolaris.pypolaris_swigregister
pypolaris_swigregister(pypolaris)


def new_intp() -> "int *":
    return _pypolaris.new_intp()
new_intp = _pypolaris.new_intp

def copy_intp(value: 'int') -> "int *":
    return _pypolaris.copy_intp(value)
copy_intp = _pypolaris.copy_intp

def delete_intp(obj: 'int *') -> "void":
    return _pypolaris.delete_intp(obj)
delete_intp = _pypolaris.delete_intp

def intp_assign(obj: 'int *', value: 'int') -> "void":
    return _pypolaris.intp_assign(obj, value)
intp_assign = _pypolaris.intp_assign

def intp_value(obj: 'int *') -> "int":
    return _pypolaris.intp_value(obj)
intp_value = _pypolaris.intp_value

def new_floatp() -> "float *":
    return _pypolaris.new_floatp()
new_floatp = _pypolaris.new_floatp

def copy_floatp(value: 'float') -> "float *":
    return _pypolaris.copy_floatp(value)
copy_floatp = _pypolaris.copy_floatp

def delete_floatp(obj: 'float *') -> "void":
    return _pypolaris.delete_floatp(obj)
delete_floatp = _pypolaris.delete_floatp

def floatp_assign(obj: 'float *', value: 'float') -> "void":
    return _pypolaris.floatp_assign(obj, value)
floatp_assign = _pypolaris.floatp_assign

def floatp_value(obj: 'float *') -> "float":
    return _pypolaris.floatp_value(obj)
floatp_value = _pypolaris.floatp_value

def new_doublep() -> "double *":
    return _pypolaris.new_doublep()
new_doublep = _pypolaris.new_doublep

def copy_doublep(value: 'double') -> "double *":
    return _pypolaris.copy_doublep(value)
copy_doublep = _pypolaris.copy_doublep

def delete_doublep(obj: 'double *') -> "void":
    return _pypolaris.delete_doublep(obj)
delete_doublep = _pypolaris.delete_doublep

def doublep_assign(obj: 'double *', value: 'double') -> "void":
    return _pypolaris.doublep_assign(obj, value)
doublep_assign = _pypolaris.doublep_assign

def doublep_value(obj: 'double *') -> "double":
    return _pypolaris.doublep_value(obj)
doublep_value = _pypolaris.doublep_value

def new_boolp() -> "bool *":
    return _pypolaris.new_boolp()
new_boolp = _pypolaris.new_boolp

def copy_boolp(value: 'bool') -> "bool *":
    return _pypolaris.copy_boolp(value)
copy_boolp = _pypolaris.copy_boolp

def delete_boolp(obj: 'bool *') -> "void":
    return _pypolaris.delete_boolp(obj)
delete_boolp = _pypolaris.delete_boolp

def boolp_assign(obj: 'bool *', value: 'bool') -> "void":
    return _pypolaris.boolp_assign(obj, value)
boolp_assign = _pypolaris.boolp_assign

def boolp_value(obj: 'bool *') -> "bool":
    return _pypolaris.boolp_value(obj)
boolp_value = _pypolaris.boolp_value
# This file is compatible with both classic and new-style classes.


