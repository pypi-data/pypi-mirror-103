
# This file is automatically generated. Do not edit.


from ply import yacc

# Required to build parser
from compiler.lex import tokens  # noqa


import compiler.yacc.grammar.lines
import compiler.yacc.grammar.affectation
import compiler.yacc.grammar.arguments
import compiler.yacc.grammar.asm
import compiler.yacc.grammar.dottedID
import compiler.yacc.grammar.error
import compiler.yacc.grammar.function
import compiler.yacc.grammar.ifElseIf
import compiler.yacc.grammar.imports
import compiler.yacc.grammar.jump
import compiler.yacc.grammar.staticFor




def p_lines_one(p):
    '''lines : line'''
    compiler.yacc.grammar.lines.lines_one(p)


def p_lines_lines(p):
    '''lines : lines lines'''
    compiler.yacc.grammar.lines.lines_lines(p)


def p_lines_empty(p):
    '''line : noLine'''
    compiler.yacc.grammar.lines.lines_empty(p)


def p_noLine(p):
    '''noLine : EndLine'''
    compiler.yacc.grammar.lines.noLine(p)


def p_affect(p):
    '''affectation : varsToAffect Affectaction'''
    compiler.yacc.grammar.affectation.affect(p)


def p_varsToAffect_one(p):
    '''varsToAffect : ID'''
    compiler.yacc.grammar.affectation.varsToAffect_one(p)


def p_varsToAffect_many(p):
    '''varsToAffect : varsToAffect Comma ID'''
    compiler.yacc.grammar.affectation.varsToAffect_many(p)


def p_args_empty(p):
    '''arguments : '''
    compiler.yacc.grammar.arguments.args_empty(p)


def p_args_one(p):
    '''arguments : info'''
    compiler.yacc.grammar.arguments.args_one(p)


def p_args_many(p):
    '''arguments : arguments Comma info'''
    compiler.yacc.grammar.arguments.args_many(p)


def p_args_oneComma(p):
    '''arguments : arguments Comma'''
    compiler.yacc.grammar.arguments.args_oneComma(p)


def p_lineAsm(p):
    '''line : asmInstr asmValideInstructions EndLine'''
    compiler.yacc.grammar.asm.lineAsm(p)


def p_asmInstr(p):
    '''asmInstr : ID'''
    compiler.yacc.grammar.asm.asmInstr(p)


def p_lineEnd(p):
    '''line : ID EndLine'''
    compiler.yacc.grammar.asm.lineEnd(p)


def p_asmFollowInstructions_one(p):
    '''asmValideInstructions : info'''
    compiler.yacc.grammar.asm.asmFollowInstructions_one(p)


def p_asmFollowInstructions_many(p):
    '''asmValideInstructions : asmValideInstructions info'''
    compiler.yacc.grammar.asm.asmFollowInstructions_many(p)


def p_info_id(p):
    '''info : ID'''
    compiler.yacc.grammar.asm.info_id(p)


def p_info(p):
    '''info : Number
            | String
            | ArobasedInfo
            | True
            | False
    '''
    compiler.yacc.grammar.asm.info(p)


def p_dottedID_one(p):
    '''dottedID : ID'''
    compiler.yacc.grammar.dottedID.dottedID_one(p)


def p_dottedID_many(p):
    '''dottedID : dottedID Dot ID'''
    compiler.yacc.grammar.dottedID.dottedID_many(p)


def p_error(p):
    '''None'''
    compiler.yacc.grammar.error.error(p)


def p_runFuncReturnArgs(p):
    '''line : affectation dottedID OpenParenthesis arguments CloseParenthesis'''
    compiler.yacc.grammar.function.runFuncReturnArgs(p)


def p_runFunc(p):
    '''line : dottedID OpenParenthesis arguments CloseParenthesis'''
    compiler.yacc.grammar.function.runFunc(p)


def p_defFun(p):
    '''noLine : dottedID OpenParenthesis arguments CloseParenthesis OpenCurlyBracket funScope lines CloseCurlyBracket'''
    compiler.yacc.grammar.function.defFun(p)


def p_funScope(p):
    '''funScope : '''
    compiler.yacc.grammar.function.funScope(p)


def p_handleReturn(p):
    '''lines : Return arguments'''
    compiler.yacc.grammar.function.handleReturn(p)


def p_linesFromIf(p):
    '''lines : ifBlock'''
    compiler.yacc.grammar.ifElseIf.linesFromIf(p)


def p_linesFromIfElse(p):
    '''lines : ifBlock elseBlock'''
    compiler.yacc.grammar.ifElseIf.linesFromIfElse(p)


def p_linesFromIfElseElseIf(p):
    '''lines : ifBlock elifs'''
    compiler.yacc.grammar.ifElseIf.linesFromIfElseElseIf(p)


def p_linesFromIfElseElseIfElse(p):
    '''lines : ifBlock elifs elseBlock'''
    compiler.yacc.grammar.ifElseIf.linesFromIfElseElseIfElse(p)


def p_elifs_one(p):
    '''elifs : elseIfBlock'''
    compiler.yacc.grammar.ifElseIf.elifs_one(p)


def p_elifs_many(p):
    '''elifs : elifs elseIfBlock'''
    compiler.yacc.grammar.ifElseIf.elifs_many(p)


def p_elseIfBlock(p):
    '''elseIfBlock : Else ifBlock'''
    compiler.yacc.grammar.ifElseIf.elseIfBlock(p)


def p_elseInstr(p):
    '''elseBlock : Else OpenCurlyBracket lines CloseCurlyBracket'''
    compiler.yacc.grammar.ifElseIf.elseInstr(p)


def p_ifBlock(p):
    '''ifBlock : If asmCondition OpenCurlyBracket lines CloseCurlyBracket'''
    compiler.yacc.grammar.ifElseIf.ifBlock(p)


def p_elifBlock(p):
    '''elseIfBlock : ElseIf asmCondition OpenCurlyBracket lines CloseCurlyBracket'''
    compiler.yacc.grammar.ifElseIf.elifBlock(p)


def p_importStd(p):
    '''noLine : Import ToImports'''
    compiler.yacc.grammar.imports.importStd(p)


def p_toImports_one(p):
    '''ToImports : ID'''
    compiler.yacc.grammar.imports.toImports_one(p)


def p_toImports_many(p):
    '''ToImports : ToImports Comma ID'''
    compiler.yacc.grammar.imports.toImports_many(p)


def p_ref(p):
    '''line : RefJump EndLine'''
    compiler.yacc.grammar.jump.ref(p)


def p_lineJump(p):
    '''line : jump'''
    compiler.yacc.grammar.jump.lineJump(p)


def p_jump_asmCondition(p):
    '''jump : Jump ID asmCondition EndLine'''
    compiler.yacc.grammar.jump.jump_asmCondition(p)


def p_comparison(p):
    '''asmCondition : info Comparison info'''
    compiler.yacc.grammar.jump.comparison(p)


def p_jump_always(p):
    '''jump : Jump ID EndLine'''
    compiler.yacc.grammar.jump.jump_always(p)


def p_jump_asmNoRef(p):
    '''line : Jump Number asmCondition EndLine'''
    compiler.yacc.grammar.jump.jump_asmNoRef(p)


def p_asmCondition(p):
    '''asmCondition : ID info info'''
    compiler.yacc.grammar.jump.asmCondition(p)


def p_staticFor(p):
    '''lines : For arguments ID liNameOrList OpenCurlyBracket lines CloseCurlyBracket'''
    compiler.yacc.grammar.staticFor.staticFor(p)


def p_liNameOrList(p):
    '''liNameOrList : ID
                    | list'''
    compiler.yacc.grammar.staticFor.liNameOrList(p)


def p_staticList(p):
    '''noLine : affectation list'''
    compiler.yacc.grammar.staticFor.staticList(p)


def p_staticList_list(p):
    '''list : OpenBracket tuplesOrInfo CloseBracket'''
    compiler.yacc.grammar.staticFor.staticList_list(p)


def p_tuplesOrInfo(p):
    '''tuplesOrInfo : tuples
                    | arguments'''
    compiler.yacc.grammar.staticFor.tuplesOrInfo(p)


def p_tuples_one(p):
    '''tuples : tuple'''
    compiler.yacc.grammar.staticFor.tuples_one(p)


def p_tuples_many(p):
    '''tuples : tuples Comma tuple'''
    compiler.yacc.grammar.staticFor.tuples_many(p)


def p_tuples_oneComma(p):
    '''tuples : tuples Comma'''
    compiler.yacc.grammar.staticFor.tuples_oneComma(p)


def p_tupleDef(p):
    '''tuple : OpenParenthesis arguments CloseParenthesis'''
    compiler.yacc.grammar.staticFor.tupleDef(p)


parser = yacc.yacc()
