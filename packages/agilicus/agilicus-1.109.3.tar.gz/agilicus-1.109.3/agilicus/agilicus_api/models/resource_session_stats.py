# coding: utf-8

"""
    Agilicus API

    Agilicus API endpoints  # noqa: E501

    The version of the OpenAPI document: 2021.04.28
    Contact: dev@agilicus.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from agilicus_api.configuration import Configuration


class ResourceSessionStats(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'total': 'int',
        'allowed': 'int',
        'denied': 'int',
        'failed': 'int'
    }

    attribute_map = {
        'total': 'total',
        'allowed': 'allowed',
        'denied': 'denied',
        'failed': 'failed'
    }

    def __init__(self, total=None, allowed=None, denied=None, failed=None, local_vars_configuration=None):  # noqa: E501
        """ResourceSessionStats - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._total = None
        self._allowed = None
        self._denied = None
        self._failed = None
        self.discriminator = None

        if total is not None:
            self.total = total
        if allowed is not None:
            self.allowed = allowed
        if denied is not None:
            self.denied = denied
        if failed is not None:
            self.failed = failed

    @property
    def total(self):
        """Gets the total of this ResourceSessionStats.  # noqa: E501

        total number of sessions  # noqa: E501

        :return: The total of this ResourceSessionStats.  # noqa: E501
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this ResourceSessionStats.

        total number of sessions  # noqa: E501

        :param total: The total of this ResourceSessionStats.  # noqa: E501
        :type: int
        """

        self._total = total

    @property
    def allowed(self):
        """Gets the allowed of this ResourceSessionStats.  # noqa: E501

        total number of allowed sessions  # noqa: E501

        :return: The allowed of this ResourceSessionStats.  # noqa: E501
        :rtype: int
        """
        return self._allowed

    @allowed.setter
    def allowed(self, allowed):
        """Sets the allowed of this ResourceSessionStats.

        total number of allowed sessions  # noqa: E501

        :param allowed: The allowed of this ResourceSessionStats.  # noqa: E501
        :type: int
        """

        self._allowed = allowed

    @property
    def denied(self):
        """Gets the denied of this ResourceSessionStats.  # noqa: E501

        total number of denied sessions  # noqa: E501

        :return: The denied of this ResourceSessionStats.  # noqa: E501
        :rtype: int
        """
        return self._denied

    @denied.setter
    def denied(self, denied):
        """Sets the denied of this ResourceSessionStats.

        total number of denied sessions  # noqa: E501

        :param denied: The denied of this ResourceSessionStats.  # noqa: E501
        :type: int
        """

        self._denied = denied

    @property
    def failed(self):
        """Gets the failed of this ResourceSessionStats.  # noqa: E501

        total number of failed sessions  # noqa: E501

        :return: The failed of this ResourceSessionStats.  # noqa: E501
        :rtype: int
        """
        return self._failed

    @failed.setter
    def failed(self, failed):
        """Sets the failed of this ResourceSessionStats.

        total number of failed sessions  # noqa: E501

        :param failed: The failed of this ResourceSessionStats.  # noqa: E501
        :type: int
        """

        self._failed = failed

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResourceSessionStats):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ResourceSessionStats):
            return True

        return self.to_dict() != other.to_dict()
