# coding: utf-8

"""
    Agilicus API

    Agilicus API endpoints  # noqa: E501

    The version of the OpenAPI document: 2021.04.28
    Contact: dev@agilicus.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from agilicus_api.configuration import Configuration


class BillableMeasurement(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'peak': 'int',
        'current': 'int'
    }

    attribute_map = {
        'peak': 'peak',
        'current': 'current'
    }

    def __init__(self, peak=None, current=None, local_vars_configuration=None):  # noqa: E501
        """BillableMeasurement - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._peak = None
        self._current = None
        self.discriminator = None

        if peak is not None:
            self.peak = peak
        if current is not None:
            self.current = current

    @property
    def peak(self):
        """Gets the peak of this BillableMeasurement.  # noqa: E501

        The peak value. This is typically the peak over a specified time interval where the interval would be specified in the query string.  # noqa: E501

        :return: The peak of this BillableMeasurement.  # noqa: E501
        :rtype: int
        """
        return self._peak

    @peak.setter
    def peak(self, peak):
        """Sets the peak of this BillableMeasurement.

        The peak value. This is typically the peak over a specified time interval where the interval would be specified in the query string.  # noqa: E501

        :param peak: The peak of this BillableMeasurement.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                peak is not None and peak < 0):  # noqa: E501
            raise ValueError("Invalid value for `peak`, must be a value greater than or equal to `0`")  # noqa: E501

        self._peak = peak

    @property
    def current(self):
        """Gets the current of this BillableMeasurement.  # noqa: E501

        The current value for the measurement  # noqa: E501

        :return: The current of this BillableMeasurement.  # noqa: E501
        :rtype: int
        """
        return self._current

    @current.setter
    def current(self, current):
        """Sets the current of this BillableMeasurement.

        The current value for the measurement  # noqa: E501

        :param current: The current of this BillableMeasurement.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                current is not None and current < 0):  # noqa: E501
            raise ValueError("Invalid value for `current`, must be a value greater than or equal to `0`")  # noqa: E501

        self._current = current

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BillableMeasurement):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BillableMeasurement):
            return True

        return self.to_dict() != other.to_dict()
