# coding: utf-8

"""
    Agilicus API

    Agilicus API endpoints  # noqa: E501

    The version of the OpenAPI document: 2021.04.28
    Contact: dev@agilicus.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from agilicus_api.configuration import Configuration


class BillableMetric(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'type': 'str',
        'org_id': 'str',
        'provisioned': 'BillableMeasurement',
        'active': 'BillableMeasurement'
    }

    attribute_map = {
        'type': 'type',
        'org_id': 'org_id',
        'provisioned': 'provisioned',
        'active': 'active'
    }

    def __init__(self, type=None, org_id=None, provisioned=None, active=None, local_vars_configuration=None):  # noqa: E501
        """BillableMetric - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._type = None
        self._org_id = None
        self._provisioned = None
        self._active = None
        self.discriminator = None

        if type is not None:
            self.type = type
        if org_id is not None:
            self.org_id = org_id
        if provisioned is not None:
            self.provisioned = provisioned
        if active is not None:
            self.active = active

    @property
    def type(self):
        """Gets the type of this BillableMetric.  # noqa: E501

        The type of the billable  # noqa: E501

        :return: The type of this BillableMetric.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this BillableMetric.

        The type of the billable  # noqa: E501

        :param type: The type of this BillableMetric.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                type is not None and len(type) > 100):
            raise ValueError("Invalid value for `type`, length must be less than or equal to `100`")  # noqa: E501

        self._type = type

    @property
    def org_id(self):
        """Gets the org_id of this BillableMetric.  # noqa: E501

        The unique id of the Organisation to which this record applies.   # noqa: E501

        :return: The org_id of this BillableMetric.  # noqa: E501
        :rtype: str
        """
        return self._org_id

    @org_id.setter
    def org_id(self, org_id):
        """Sets the org_id of this BillableMetric.

        The unique id of the Organisation to which this record applies.   # noqa: E501

        :param org_id: The org_id of this BillableMetric.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                org_id is not None and len(org_id) > 40):
            raise ValueError("Invalid value for `org_id`, length must be less than or equal to `40`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                org_id is not None and len(org_id) < 1):
            raise ValueError("Invalid value for `org_id`, length must be greater than or equal to `1`")  # noqa: E501

        self._org_id = org_id

    @property
    def provisioned(self):
        """Gets the provisioned of this BillableMetric.  # noqa: E501


        :return: The provisioned of this BillableMetric.  # noqa: E501
        :rtype: BillableMeasurement
        """
        return self._provisioned

    @provisioned.setter
    def provisioned(self, provisioned):
        """Sets the provisioned of this BillableMetric.


        :param provisioned: The provisioned of this BillableMetric.  # noqa: E501
        :type: BillableMeasurement
        """

        self._provisioned = provisioned

    @property
    def active(self):
        """Gets the active of this BillableMetric.  # noqa: E501


        :return: The active of this BillableMetric.  # noqa: E501
        :rtype: BillableMeasurement
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this BillableMetric.


        :param active: The active of this BillableMetric.  # noqa: E501
        :type: BillableMeasurement
        """

        self._active = active

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BillableMetric):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BillableMetric):
            return True

        return self.to_dict() != other.to_dict()
