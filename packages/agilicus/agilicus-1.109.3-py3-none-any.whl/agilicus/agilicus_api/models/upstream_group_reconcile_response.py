# coding: utf-8

"""
    Agilicus API

    Agilicus API endpoints  # noqa: E501

    The version of the OpenAPI document: 2021.04.28
    Contact: dev@agilicus.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from agilicus_api.configuration import Configuration


class UpstreamGroupReconcileResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'groups_added_to': 'list[GroupReconcileRecord]',
        'groups_removed_from': 'list[GroupReconcileRecord]',
        'resulting_groups': 'list[GroupReconcileRecord]'
    }

    attribute_map = {
        'groups_added_to': 'groups_added_to',
        'groups_removed_from': 'groups_removed_from',
        'resulting_groups': 'resulting_groups'
    }

    def __init__(self, groups_added_to=None, groups_removed_from=None, resulting_groups=None, local_vars_configuration=None):  # noqa: E501
        """UpstreamGroupReconcileResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._groups_added_to = None
        self._groups_removed_from = None
        self._resulting_groups = None
        self.discriminator = None

        if groups_added_to is not None:
            self.groups_added_to = groups_added_to
        if groups_removed_from is not None:
            self.groups_removed_from = groups_removed_from
        if resulting_groups is not None:
            self.resulting_groups = resulting_groups

    @property
    def groups_added_to(self):
        """Gets the groups_added_to of this UpstreamGroupReconcileResponse.  # noqa: E501

        The list of groups the user was added to due to a reconcile.  # noqa: E501

        :return: The groups_added_to of this UpstreamGroupReconcileResponse.  # noqa: E501
        :rtype: list[GroupReconcileRecord]
        """
        return self._groups_added_to

    @groups_added_to.setter
    def groups_added_to(self, groups_added_to):
        """Sets the groups_added_to of this UpstreamGroupReconcileResponse.

        The list of groups the user was added to due to a reconcile.  # noqa: E501

        :param groups_added_to: The groups_added_to of this UpstreamGroupReconcileResponse.  # noqa: E501
        :type: list[GroupReconcileRecord]
        """

        self._groups_added_to = groups_added_to

    @property
    def groups_removed_from(self):
        """Gets the groups_removed_from of this UpstreamGroupReconcileResponse.  # noqa: E501

        The list of groups the user was removed from due to a reconcile.  # noqa: E501

        :return: The groups_removed_from of this UpstreamGroupReconcileResponse.  # noqa: E501
        :rtype: list[GroupReconcileRecord]
        """
        return self._groups_removed_from

    @groups_removed_from.setter
    def groups_removed_from(self, groups_removed_from):
        """Sets the groups_removed_from of this UpstreamGroupReconcileResponse.

        The list of groups the user was removed from due to a reconcile.  # noqa: E501

        :param groups_removed_from: The groups_removed_from of this UpstreamGroupReconcileResponse.  # noqa: E501
        :type: list[GroupReconcileRecord]
        """

        self._groups_removed_from = groups_removed_from

    @property
    def resulting_groups(self):
        """Gets the resulting_groups of this UpstreamGroupReconcileResponse.  # noqa: E501

        The list of groups the user is a member of as a result of reconciliation.  # noqa: E501

        :return: The resulting_groups of this UpstreamGroupReconcileResponse.  # noqa: E501
        :rtype: list[GroupReconcileRecord]
        """
        return self._resulting_groups

    @resulting_groups.setter
    def resulting_groups(self, resulting_groups):
        """Sets the resulting_groups of this UpstreamGroupReconcileResponse.

        The list of groups the user is a member of as a result of reconciliation.  # noqa: E501

        :param resulting_groups: The resulting_groups of this UpstreamGroupReconcileResponse.  # noqa: E501
        :type: list[GroupReconcileRecord]
        """

        self._resulting_groups = resulting_groups

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpstreamGroupReconcileResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UpstreamGroupReconcileResponse):
            return True

        return self.to_dict() != other.to_dict()
