import logging

from grpc import insecure_channel
from google.protobuf.empty_pb2 import Empty

from . import {{ filename }}_pb2, {{ filename }}_pb2_grpc, {{ filename }}_schema
from .._config import GRPC_ADDRESS, GRPC_LOGGER
from .._utils import MessageToDict, ParseDict

try:
    from .._config import GRPC_CHANNEL_OPTIONS
except ImportError:
    GRPC_CHANNEL_OPTIONS = None

__all__ = ["{{ service | replace("Service", "") }}Client"]

logger = logging.getLogger(GRPC_LOGGER)


class {{ service | replace("Service", "") }}Client:
    URL = f"{GRPC_ADDRESS['host']}:{GRPC_ADDRESS['port']}"
    s = schemas = {{ filename }}_schema
{% for method in methods %}
    def {{ method[0] | decamelize }}(self{% if method[1] == "google.protobuf.Empty" %}{% else %}, schema: {{ filename }}_schema.{{ method[1] }}{% endif %}, *, fail_silently=False) -> {{ filename }}_schema.{{ method[2] }}:
        with insecure_channel(self.URL, options=GRPC_CHANNEL_OPTIONS) as channel:
            stub = {{ filename }}_pb2_grpc.{{ service }}Stub(channel)
            service_name, rpc_name = "{{ service }}", "{{ method[0] }}"
    {% if method[1] == "google.protobuf.Empty" %}
            logger.info("gRPC client of %s.%s send nothing", service_name, rpc_name)
            request = Empty()
    {% else %}
            payload = schema.dict()
            logger.info("gRPC client of %s.%s send: %s", service_name, rpc_name, payload)
            request = ParseDict(payload, {{ filename }}_pb2.{{ method[1] }}())
    {% endif %}
            try:
                response = stub.{{ method[0] }}(request)
            except Exception as e:
                if not fail_silently:
                    raise
                logger.warning(repr(e))
                reply = {}
            else:
                reply = MessageToDict(response, True, True)

            logger.info("gRPC client of %s.%s received: %s", service_name, rpc_name, reply)
            return {{ filename }}_schema.{{ method[2] }}(**reply)
{% endfor %}
