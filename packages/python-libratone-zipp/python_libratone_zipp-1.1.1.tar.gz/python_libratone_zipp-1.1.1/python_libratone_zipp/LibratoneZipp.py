#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Automation Library for Libratone speakers like Libratone Zipp.
:license: The Unlicense, see LICENSE for more details.
"""

import logging
import socket

_LOGGER = logging.getLogger("LibratoneZipp")

# Source of Command_Mapping: https://benjaminhanke.de/baublog/technik/libratone-zipp-wlan-lautsprecher-in-loxone-einbinden/
# Refactored, translated and transformed to JSON

COMMAND_MAPPING = { 

    'Play':     { 'bytearray': bytearray([0x00, 0x00, 0x02, 0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 0x04, 0x50, 0x4c, 0x41, 0x59]),},
    'Pause':    { 'bytearray': bytearray([0x00, 0x00, 0x02, 0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 0x05, 0x50, 0x41, 0x55, 0x53, 0x45]),},
    'Stop':     { 'bytearray': bytearray([0x00, 0x00, 0x02, 0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 0x04, 0x53, 0x54, 0x4f, 0x50]),},
    'Next':     { 'bytearray': bytearray([0x00, 0x00, 0x02, 0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 0x04, 0x4e, 0x45, 0x58, 0x54]),},
    'Prev':     { 'bytearray': bytearray([0x00, 0x00, 0x02, 0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 0x04, 0x50, 0x52, 0x45, 0x56]),},
    
    'Favorite' : {
        '1': { 'bytearray': bytearray([0x00, 0x00, 0x02, 0x01, 0x15, 0x00, 0x00, 0x00, 0x00, 0x77, 0x7b, 0x22, 0x69, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x22, 0x3a, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x2c, 0x22, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0x3a, 0x22, 0x31, 0x22, 0x2c, 0x22, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x73, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x22, 0x3a, 0x22, 0x31, 0x22, 0x2c, 0x22, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x22, 0x3a, 0x22, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x22, 0x2c, 0x22, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x3a, 0x22, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x22, 0x2c, 0x22, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x3a, 0x22, 0x22, 0x7d]),},
        '2': { 'bytearray': bytearray([0x00, 0x00, 0x02, 0x01, 0x15, 0x00, 0x00, 0x00, 0x00, 0x77, 0x7b, 0x22, 0x69, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x22, 0x3a, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x2c, 0x22, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0x3a, 0x22, 0x32, 0x22, 0x2c, 0x22, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x73, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x22, 0x3a, 0x22, 0x32, 0x22, 0x2c, 0x22, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x22, 0x3a, 0x22, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x22, 0x2c, 0x22, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x3a, 0x22, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x22, 0x2c, 0x22, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x3a, 0x22, 0x22, 0x7d]),},
        '3': { 'bytearray': bytearray([0x00, 0x00, 0x02, 0x01, 0x15, 0x00, 0x00, 0x00, 0x00, 0x77, 0x7b, 0x22, 0x69, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x22, 0x3a, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x2c, 0x22, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0x3a, 0x22, 0x33, 0x22, 0x2c, 0x22, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x73, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x22, 0x3a, 0x22, 0x33, 0x22, 0x2c, 0x22, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x22, 0x3a, 0x22, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x22, 0x2c, 0x22, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x3a, 0x22, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x22, 0x2c, 0x22, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x3a, 0x22, 0x22, 0x7d]),},
        '4': { 'bytearray': bytearray([0x00, 0x00, 0x02, 0x01, 0x15, 0x00, 0x00, 0x00, 0x00, 0x77, 0x7b, 0x22, 0x69, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x22, 0x3a, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x2c, 0x22, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0x3a, 0x22, 0x34, 0x22, 0x2c, 0x22, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x73, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x22, 0x3a, 0x22, 0x34, 0x22, 0x2c, 0x22, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x22, 0x3a, 0x22, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x22, 0x2c, 0x22, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x3a, 0x22, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x22, 0x2c, 0x22, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x3a, 0x22, 0x22, 0x7d]),},
        '5': { 'bytearray': bytearray([0x00, 0x00, 0x02, 0x01, 0x15, 0x00, 0x00, 0x00, 0x00, 0x77, 0x7b, 0x22, 0x69, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x22, 0x3a, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x2c, 0x22, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0x3a, 0x22, 0x35, 0x22, 0x2c, 0x22, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x73, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x22, 0x3a, 0x22, 0x35, 0x22, 0x2c, 0x22, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x22, 0x3a, 0x22, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x22, 0x2c, 0x22, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x3a, 0x22, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x22, 0x2c, 0x22, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x3a, 0x22, 0x22, 0x7d]),},
    },
}

VOICING = {
    'neutral': {
        'name': 'Neutral',
        'description': 'Basic neutral setting',
        'bytearray': bytearray([0x00, 0x00, 0x02, 0x02, 0x06, 0x00, 0x00, 0x00, 0x00, 0x04, 0x56, 0x31, 0x30, 0x30]),
    }, 'easy': {
        'name': 'Easy Listening',
        'description': 'Easy and smooth leaned back sound',
        'bytearray': bytearray([0x00, 0x00, 0x02, 0x02, 0x06, 0x00, 0x00, 0x00, 0x00, 0x04, 0x56, 0x31, 0x30, 0x31]),
    }, 'soft': {
        'name': 'Soft & Comfortable',
        'description': 'Soft midrange for compressed recordings',
        'bytearray': bytearray([0x00, 0x00, 0x02, 0x02, 0x06, 0x00, 0x00, 0x00, 0x00, 0x04, 0x56, 0x31, 0x30, 0x32]),
    }, 'rock': {
        'name': 'Rock The House',
        'description': 'Extra drum kick - smooth midrange',
        'bytearray': bytearray([0x00, 0x00, 0x02, 0x02, 0x06, 0x00, 0x00, 0x00, 0x00, 0x04, 0x56, 0x31, 0x30, 0x33]),
    }, 'jazz': {
        'name': 'Jazz Club',
        'description': 'Open acoustic sound, focus on voices',
        'bytearray': bytearray([0x00, 0x00, 0x02, 0x02, 0x06, 0x00, 0x00, 0x00, 0x00, 0x04, 0x56, 0x31, 0x30, 0x34]),
    }, 'movie': {
        'name': 'Movie Mode',
        'description': 'Extra action and movie re-equalization',
        'bytearray': bytearray([0x00, 0x00, 0x02, 0x02, 0x06, 0x00, 0x00, 0x00, 0x00, 0x04, 0x56, 0x31, 0x30, 0x35]),
    }, 'live': {
        'name': 'Live Concert',
        'description': 'Where the music is loud and dynamic',
        'bytearray': bytearray([0x00, 0x00, 0x02, 0x02, 0x06, 0x00, 0x00, 0x00, 0x00, 0x04, 0x56, 0x31, 0x30, 0x36]),
    }, 'classical': {
        'name': 'Classical',
        'description': 'Enjoy grand pianos when they are best',
        'bytearray': bytearray([0x00, 0x00, 0x02, 0x02, 0x06, 0x00, 0x00, 0x00, 0x00, 0x04, 0x56, 0x31, 0x30, 0x37]),
    }, 'speech': {
        'name': 'Speech',
        'description': 'For TV programs with subtle voices',
        'bytearray': bytearray([0x00, 0x00, 0x02, 0x02, 0x06, 0x00, 0x00, 0x00, 0x00, 0x04, 0x56, 0x31, 0x30, 0x38]),
    },   
}

# Define _state variables
STATE_OFF = "OFF"
STATE_SLEEP = "SLEEP"
STATE_IDLE = "IDLE"
STATE_PLAY = "PLAY"
STATE_PAUSE = "PAUSE"

class LibratoneZipp:
    """Representing a Libratone Zipp device."""

    def __init__(self, host, name="Zipp"):
        # Initialize variables
        self._host = host
        self._name = name
        self._port = 7777

        self._state = None
        self._voicing = None
        self._voicing_list = None

        # Open a new connection
        self._socket = self._get_new_socket()

    def _get_new_socket(self):
        try:
            _new_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
            _new_socket.connect((self._host, self._port))
            return _new_socket
        except ConnectionError as connection_error:
            _LOGGER.warning("Connection error: %s", connection_error)
            self._state = STATE_OFF
            return None
        except socket.gaierror as socket_gaierror:
            _LOGGER.warning("Address-related error: %s", socket_gaierror)
            self._state = STATE_OFF
            return None
        except socket.error as socket_error:
            _LOGGER.warning("Socket error: %s", socket_error)
            self._state = STATE_OFF
            return None

    def _send_command(self, command):
        if self._socket is None:
            self._socket = self._get_new_socket()
            _LOGGER.warning("Cannot connect to Libratone Zipp")
            self._state = STATE_OFF
            return

        try:
            resp = self._socket.sendto(command['bytearray'], (self._host, self._port))
            if resp == 0:
                self._socket.close()
                self._socket = None
                self._state = STATE_OFF
                _LOGGER.warning("Send fail, disconnecting from Libratone Zipp")

        except (BrokenPipeError, ConnectionError) as connect_error:
            _LOGGER.warning("Connection error, retrying. %s", connect_error)
            self._socket = None
            self._socket = self._get_new_socket()
            if self._socket is not None:
                # retrying after broken pipe error
                self._socket.sendto(command.encode(), (self._host, self._port))

    # All property are defined in __init__
    @property
    def name(self):
        return self._name
    @property
    def host(self):
        return self._host
    @property
    def state(self):
        return self._state
    @property
    def voicing(self):
        return self._voicing
    @property
    def voicing_list(self):
        list = []
        for voicing_id in VOICING:
            list.append(voicing_id)
        return list

    def play(self):
        try:
            self._send_command(COMMAND_MAPPING['Play'])
            self._state = STATE_PLAY
            return True
        except:
            _LOGGER.warning("Error: play command not sent.")
            return False

    def pause(self):
        try:
            self._send_command(COMMAND_MAPPING['Pause'])
            self._state = STATE_PAUSE
            return True
        except:
            _LOGGER.warning("Error: pause command not sent.")
            return False

    def stop(self):
        try:
            self._send_command(COMMAND_MAPPING['Stop'])
            self._state = STATE_IDLE
            return True
        except:
            _LOGGER.warning("Error: play command not sent.")
            return False

    def next(self):
        try:
            self._send_command(COMMAND_MAPPING['Next'])
            self._state = STATE_PLAY
            return True
        except:
            _LOGGER.warning("Error: next command not sent.")
            return False

    def prev(self):
        try:
            self._send_command(COMMAND_MAPPING['Prev'])
            self._state = STATE_PLAY
            return True
        except:
            _LOGGER.warning("Error: prev command not sent.")
            return False

    def favorite_play(self, favourite_id):
        if int(favourite_id) < 1 or int(favourite_id) > 5:
            _LOGGER.warning("Error: favorite command is not within 1 and 5.")
            return False
        try:
            if isinstance(favourite_id, str):
                self._send_command(COMMAND_MAPPING['Favorite'][favourite_id])
            else:
                self._send_command(COMMAND_MAPPING['Favorite'][str(favourite_id)])
            self._state = STATE_PLAY
            return True
        except:
            _LOGGER.warning("Error: favorite command not sent.")
            return False

    def voicing_set(self, voicing_id):
        try:
            self._send_command(VOICING[voicing_id])
            self._voicing = voicing_id
            return True
        except:
            _LOGGER.warning("Error: voicing command not sent.")
            self._voicing = None
            return False
