{"version":3,"sources":["webpack:///./app/components/resultGrid.tsx","webpack:///./app/views/admin/adminOrganizations.tsx"],"names":["Filter","title","getCurrentLabel","getDefaultItem","props","options","map","value","label","filterQuery","queryKey","query","location","key","isActive","to","pathname","path","selected","this","find","item","name","cursor","className","length","getSelector","React","SortBy","getCurrentSortLabel","sortBy","getSortBySelector","ResultGrid","defaultState","e","state","targetQueryParams","preventDefault","browserHistory","evt","setState","target","fetchData","queryParams","defaultSort","filters","pageLinks","loading","error","rows","defaultParams","api","request","endpoint","method","data","success","_","jqXHR","getResponseHeader","colSpan","columns","row","keyForRow","columnsForRow","hasSearch","onSubmit","onSearch","type","placeholder","style","width","autoComplete","onChange","onQueryChange","size","sortOptions","Object","keys","filterKey","renderLoading","renderError","renderNoResults","renderResults","hasPagination","id","per_page","withApi","getRow","Link","slug","AdminOrganizations","t"],"mappings":"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","file":"AdminOrganizations.9e5f1898bebce24e83d3.js","sourcesContent":["import React from 'react';\nimport {browserHistory} from 'react-router';\nimport {Location} from 'history';\n\nimport {Client, RequestOptions} from 'app/api';\nimport DropdownLink from 'app/components/dropdownLink';\nimport MenuItem from 'app/components/menuItem';\nimport Pagination from 'app/components/pagination';\nimport {IconSearch} from 'app/icons';\nimport withApi from 'app/utils/withApi';\n\ntype Option = [value: string, label: string];\n\ntype FilterProps = {\n  name: string;\n  queryKey: string;\n  options: Option[];\n  path: string;\n  value: string;\n  location: Location;\n};\n\nclass Filter extends React.Component<FilterProps> {\n  getCurrentLabel() {\n    const selected = this.props.options.find(\n      item => item[0] === (this.props.value ?? '')\n    );\n    if (selected) {\n      return this.props.name + ': ' + selected[1];\n    }\n    return this.props.name + ': ' + 'Any';\n  }\n\n  getDefaultItem() {\n    const query = {...this.props.location.query, cursor: ''};\n    delete query[this.props.queryKey];\n\n    return (\n      <MenuItem\n        key=\"\"\n        isActive={this.props.value === '' || !this.props.value}\n        to={{pathname: this.props.path, query}}\n      >\n        Any\n      </MenuItem>\n    );\n  }\n\n  getSelector = () => (\n    <DropdownLink title={this.getCurrentLabel()}>\n      {this.getDefaultItem()}\n      {this.props.options.map(([value, label]) => {\n        const filterQuery = {\n          [this.props.queryKey]: value,\n          cursor: '',\n        };\n\n        const query = {...this.props.location.query, ...filterQuery};\n        return (\n          <MenuItem\n            key={value}\n            isActive={this.props.value === value}\n            to={{pathname: this.props.path, query}}\n          >\n            {label}\n          </MenuItem>\n        );\n      })}\n    </DropdownLink>\n  );\n\n  render() {\n    return (\n      <div className=\"filter-options\">\n        {this.props.options.length === 1 ? (\n          <strong>{this.getCurrentLabel()}</strong>\n        ) : (\n          this.getSelector()\n        )}\n      </div>\n    );\n  }\n}\n\ntype SortByProps = {\n  options: Option[];\n  path: string;\n  location: Location;\n  value: string;\n};\n\nclass SortBy extends React.Component<SortByProps> {\n  getCurrentSortLabel() {\n    return this.props.options.find(([value]) => value === this.props.value)?.[1];\n  }\n\n  getSortBySelector() {\n    return (\n      <DropdownLink title={this.getCurrentSortLabel()} className=\"sorted-by\">\n        {this.props.options.map(([value, label]) => {\n          const query = {...this.props.location.query, sortBy: value, cursor: ''};\n          return (\n            <MenuItem\n              isActive={this.props.value === value}\n              key={value}\n              to={{pathname: this.props.path, query}}\n            >\n              {label}\n            </MenuItem>\n          );\n        })}\n      </DropdownLink>\n    );\n  }\n\n  render() {\n    if (this.props.options.length === 0) {\n      return null;\n    }\n\n    return (\n      <div className=\"sort-options\">\n        Showing results sorted by\n        {this.props.options.length === 1 ? (\n          <strong className=\"sorted-by\">{this.getCurrentSortLabel()}</strong>\n        ) : (\n          this.getSortBySelector()\n        )}\n      </div>\n    );\n  }\n}\n\ntype FilterConfig = {\n  name: string;\n  options: Option[];\n};\n\n// XXX(ts): Using Partial here on the DefaultProps is not really correct, since\n// defaultProps guarantees they'll be set. But because this component is\n// wrapped with a HoC, we lose the defaultProps, and users of the component\ntype Props = {\n  api: Client;\n  location: Location;\n} & Partial<DefaultProps>;\n\ntype DefaultProps = {\n  columns: React.ReactNode[];\n  columnsForRow: (row: any) => React.ReactNode[];\n  defaultSort: string;\n  defaultParams: Record<string, any>;\n  filters: Record<string, FilterConfig>;\n  endpoint: string;\n  hasPagination: boolean;\n  hasSearch: boolean;\n  keyForRow: (row: any) => string;\n  method: RequestOptions['method'];\n  path: string;\n  sortOptions: Option[];\n};\n\ntype State = {\n  rows: any[];\n  loading: boolean;\n  error: string | boolean;\n  pageLinks: null | string;\n  query: string;\n  sortBy: string;\n  filters: Record<string, string>;\n};\n\nclass ResultGrid extends React.Component<Props, State> {\n  static defaultProps: DefaultProps = {\n    path: '',\n    endpoint: '',\n    method: 'GET',\n    columns: [],\n    sortOptions: [],\n    filters: {},\n    defaultSort: '',\n    keyForRow: row => row.id,\n    columnsForRow: () => [],\n    defaultParams: {\n      per_page: 50,\n    },\n    hasPagination: true,\n    hasSearch: false,\n  };\n\n  state: State = this.defaultState;\n\n  componentWillMount() {\n    this.fetchData();\n  }\n\n  componentWillReceiveProps() {\n    const queryParams = this.query;\n    this.setState(\n      {\n        query: queryParams.query ?? '',\n        sortBy: queryParams.sortBy ?? this.props.defaultSort,\n        filters: {...queryParams},\n        pageLinks: null,\n        loading: true,\n        error: false,\n      },\n      this.fetchData\n    );\n  }\n\n  get defaultState() {\n    const queryParams = this.query;\n\n    return {\n      rows: [],\n      loading: true,\n      error: false,\n      pageLinks: null,\n      query: queryParams.query ?? '',\n      sortBy: queryParams.sortBy ?? this.props.defaultSort,\n      filters: {...queryParams},\n    } as State;\n  }\n\n  get query() {\n    return ((this.props.location ?? {}).query ?? {}) as {[k: string]: string};\n  }\n\n  remountComponent() {\n    this.setState(this.defaultState, this.fetchData);\n  }\n\n  refresh() {\n    this.setState({loading: true}, this.fetchData);\n  }\n\n  fetchData() {\n    // TODO(dcramer): this should explicitly allow filters/sortBy/cursor/perPage\n    const queryParams = {\n      ...this.props.defaultParams,\n      sortBy: this.state.sortBy,\n      ...this.query,\n    };\n\n    this.props.api.request(this.props.endpoint!, {\n      method: this.props.method,\n      data: queryParams,\n      success: (data, _, jqXHR) => {\n        this.setState({\n          loading: false,\n          error: false,\n          rows: data,\n          pageLinks: jqXHR?.getResponseHeader('Link') ?? null,\n        });\n      },\n      error: () => {\n        this.setState({\n          loading: false,\n          error: true,\n        });\n      },\n    });\n  }\n\n  onSearch = (e: React.FormEvent<HTMLFormElement>) => {\n    const location = this.props.location ?? {};\n    const {query} = this.state;\n    const targetQueryParams = {...(location.query ?? {}), query, cursor: ''};\n\n    e.preventDefault();\n\n    browserHistory.push({\n      pathname: this.props.path,\n      query: targetQueryParams,\n    });\n  };\n\n  onQueryChange = (evt: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({query: evt.target.value});\n  };\n\n  renderLoading() {\n    return (\n      <tr>\n        <td colSpan={this.props.columns!.length}>\n          <div className=\"loading\">\n            <div className=\"loading-indicator\" />\n            <div className=\"loading-message\">Hold on to your butts!</div>\n          </div>\n        </td>\n      </tr>\n    );\n  }\n\n  renderError() {\n    return (\n      <tr>\n        <td colSpan={this.props.columns!.length}>\n          <div className=\"alert-block alert-error\">Something bad happened :(</div>\n        </td>\n      </tr>\n    );\n  }\n\n  renderNoResults() {\n    return (\n      <tr>\n        <td colSpan={this.props.columns!.length}>No results found.</td>\n      </tr>\n    );\n  }\n\n  renderResults() {\n    return this.state.rows.map(row => (\n      <tr key={this.props.keyForRow?.(row)}>{this.props.columnsForRow?.(row)}</tr>\n    ));\n  }\n\n  render() {\n    const {filters} = this.props;\n    return (\n      <div className=\"result-grid\">\n        <div className=\"table-options\">\n          {this.props.hasSearch && (\n            <div className=\"result-grid-search\">\n              <form onSubmit={this.onSearch}>\n                <div className=\"form-group\">\n                  <input\n                    type=\"text\"\n                    className=\"form-control input-search\"\n                    placeholder=\"search\"\n                    style={{width: 300}}\n                    name=\"query\"\n                    autoComplete=\"off\"\n                    value={this.state.query}\n                    onChange={this.onQueryChange}\n                  />\n                  <button type=\"submit\" className=\"btn btn-sm btn-primary\">\n                    <IconSearch size=\"xs\" />\n                  </button>\n                </div>\n              </form>\n            </div>\n          )}\n          <SortBy\n            options={this.props.sortOptions ?? []}\n            value={this.state.sortBy}\n            path={this.props.path ?? ''}\n            location={this.props.location}\n          />\n          {Object.keys(filters ?? {}).map(filterKey => (\n            <Filter\n              key={filterKey}\n              queryKey={filterKey}\n              value={this.state.filters[filterKey]}\n              path={this.props.path ?? ''}\n              location={this.props.location}\n              {...(filters?.[filterKey] as FilterConfig)}\n            />\n          ))}\n        </div>\n\n        <table className=\"table table-grid\">\n          <thead>\n            <tr>{this.props.columns}</tr>\n          </thead>\n          <tbody>\n            {this.state.loading\n              ? this.renderLoading()\n              : this.state.error\n              ? this.renderError()\n              : this.state.rows.length === 0\n              ? this.renderNoResults()\n              : this.renderResults()}\n          </tbody>\n        </table>\n        {this.props.hasPagination && this.state.pageLinks && (\n          <Pagination pageLinks={this.state.pageLinks} />\n        )}\n      </div>\n    );\n  }\n}\n\nexport {ResultGrid};\n\nexport default withApi(ResultGrid);\n","import React from 'react';\nimport {Link, RouteComponentProps} from 'react-router';\n\nimport ResultGrid from 'app/components/resultGrid';\nimport {t} from 'app/locale';\n\ntype Props = RouteComponentProps<{}, {}>;\n\nconst getRow = (row: any) => [\n  <td key={row.id}>\n    <strong>\n      <Link to={`/${row.slug}/`}>{row.name}</Link>\n    </strong>\n    <br />\n    <small>{row.slug}</small>\n  </td>,\n];\n\nconst AdminOrganizations = (props: Props) => (\n  <div>\n    <h3>{t('Organizations')}</h3>\n    <ResultGrid\n      path=\"/manage/organizations/\"\n      endpoint=\"/organizations/?show=all\"\n      method=\"GET\"\n      columns={[<th key=\"column-org\">Organization</th>]}\n      columnsForRow={getRow}\n      hasSearch\n      sortOptions={[\n        ['date', 'Date Joined'],\n        ['members', 'Members'],\n        ['events', 'Events'],\n        ['projects', 'Projects'],\n        ['employees', 'Employees'],\n      ]}\n      defaultSort=\"date\"\n      {...props}\n    />\n  </div>\n);\n\nexport default AdminOrganizations;\n"],"sourceRoot":""}