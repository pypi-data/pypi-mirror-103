{"version":3,"sources":["webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/account/accountSecurity/components/recoveryCodes.tsx","webpack:///./app/views/settings/account/accountSecurity/components/u2fEnrolledDetails.tsx","webpack:///./app/views/settings/account/accountSecurity/accountSecurityDetails.tsx","webpack:///./app/views/settings/account/accountSecurity/components/confirmHeader.tsx","webpack:///./app/views/settings/account/accountSecurity/components/removeConfirm.tsx","webpack:///./app/views/settings/components/settingsPageHeader.tsx"],"names":["AsyncView","title","this","getTitle","renderComponent","AsyncComponent","RecoveryCodes","className","isEnrolled","codes","onRegenerateBackupCodes","formattedCodes","join","CodeContainer","hasButtons","t","Actions","hideUnsupported","value","size","label","onClick","iframe","window","frames","document","write","print","close","download","href","onConfirm","message","priority","type","length","map","code","Code","key","name","css","Panel","space","PanelItem","p","theme","text","familyMono","U2fEnrolledDetails","devices","id","onRemoveU2fDevice","hasDevices","isLastDevice","device","DevicePanelItem","DeviceInformation","Name","FadedDateTime","date","timestamp","disabled","AddAnotherPanelItem","to","DateTime","fontSizeRelativeSmall","ENDPOINT","AuthenticatorDate","DateLabel","authenticator","state","authId","deviceId","key_handle","deviceName","setState","loading","api","requestPromise","method","props","router","push","addSuccessMessage","addErrorMessage","params","deleteDisabled","AuthenticatorStatus","enabled","action","removeButton","handleRemove","description","AuthenticatorDates","createdAt","lastUsedAt","phone","PhoneWrapper","Phone","CircleIndicator","RemoveConfirm","UnstyledSettingsPageHeader","icon","subtitle","tabs","noTitleStyles","body","isNarrow","TitleAndActions","TitleWrapper","Icon","Title","styled","Subtitle","Action","BodyWrapper","TabsWrapper","React","gray400","fontSizeLarge","SettingsPageHeader"],"mappings":"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","file":"AccountSecurityDetails.97afa84da54e44c6647a.js","sourcesContent":["import React from 'react';\nimport DocumentTitle from 'react-document-title';\n\nimport AsyncComponent from 'app/components/asyncComponent';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    const title = this.getTitle();\n    return (\n      <DocumentTitle title={`${title ? `${title} - ` : ''}Sentry`}>\n        {this.renderComponent() as React.ReactChild}\n      </DocumentTitle>\n    );\n  }\n}\n","import React from 'react';\nimport styled from '@emotion/styled';\n\nimport Button from 'app/components/button';\nimport Clipboard from 'app/components/clipboard';\nimport Confirm from 'app/components/confirm';\nimport {\n  Panel,\n  PanelAlert,\n  PanelBody,\n  PanelHeader,\n  PanelItem,\n} from 'app/components/panels';\nimport {IconCopy, IconDownload, IconPrint} from 'app/icons';\nimport {t} from 'app/locale';\nimport space from 'app/styles/space';\nimport EmptyMessage from 'app/views/settings/components/emptyMessage';\n\ntype Props = {\n  isEnrolled: boolean;\n  codes: string[];\n  onRegenerateBackupCodes: () => void;\n  className?: string;\n};\n\nconst RecoveryCodes = ({\n  className,\n  isEnrolled,\n  codes,\n  onRegenerateBackupCodes,\n}: Props) => {\n  const printCodes = () => {\n    // eslint-disable-next-line dot-notation\n    const iframe = window.frames['printable'];\n    iframe.document.write(codes.join('<br>'));\n    iframe.print();\n    iframe.document.close();\n  };\n\n  if (!isEnrolled || !codes) {\n    return null;\n  }\n\n  const formattedCodes = codes.join(' \\n');\n\n  return (\n    <CodeContainer className={className}>\n      <PanelHeader hasButtons>\n        {t('Unused Codes')}\n\n        <Actions>\n          <Clipboard hideUnsupported value={formattedCodes}>\n            <Button size=\"small\" label={t('copy')}>\n              <IconCopy />\n            </Button>\n          </Clipboard>\n          <Button size=\"small\" onClick={printCodes} label={t('print')}>\n            <IconPrint />\n          </Button>\n          <Button\n            size=\"small\"\n            download=\"sentry-recovery-codes.txt\"\n            href={`data:text/plain;charset=utf-8,${formattedCodes}`}\n            label={t('download')}\n          >\n            <IconDownload />\n          </Button>\n          <Confirm\n            onConfirm={onRegenerateBackupCodes}\n            message={t(\n              'Are you sure you want to regenerate recovery codes? Your old codes will no longer work.'\n            )}\n          >\n            <Button priority=\"danger\" size=\"small\">\n              {t('Regenerate Codes')}\n            </Button>\n          </Confirm>\n        </Actions>\n      </PanelHeader>\n      <PanelBody>\n        <PanelAlert type=\"warning\">\n          {t(\n            'Make sure to save a copy of your recovery codes and store them in a safe place.'\n          )}\n        </PanelAlert>\n        <div>{!!codes.length && codes.map(code => <Code key={code}>{code}</Code>)}</div>\n        {!codes.length && (\n          <EmptyMessage>{t('You have no more recovery codes to use')}</EmptyMessage>\n        )}\n      </PanelBody>\n      <iframe name=\"printable\" css={{display: 'none'}} />\n    </CodeContainer>\n  );\n};\n\nexport default RecoveryCodes;\n\nconst CodeContainer = styled(Panel)`\n  margin-top: ${space(4)};\n`;\n\nconst Actions = styled('div')`\n  display: grid;\n  grid-auto-flow: column;\n  grid-gap: ${space(1)};\n`;\n\nconst Code = styled(PanelItem)`\n  font-family: ${p => p.theme.text.familyMono};\n  padding: ${space(2)};\n`;\n","import React from 'react';\nimport styled from '@emotion/styled';\n\nimport Button from 'app/components/button';\nimport Confirm from 'app/components/confirm';\nimport DateTime from 'app/components/dateTime';\nimport {Panel, PanelBody, PanelHeader, PanelItem} from 'app/components/panels';\nimport Tooltip from 'app/components/tooltip';\nimport {IconDelete} from 'app/icons';\nimport {t} from 'app/locale';\nimport space from 'app/styles/space';\nimport {AuthenticatorDevice} from 'app/types';\nimport ConfirmHeader from 'app/views/settings/account/accountSecurity/components/confirmHeader';\nimport EmptyMessage from 'app/views/settings/components/emptyMessage';\nimport TextBlock from 'app/views/settings/components/text/textBlock';\n\ntype Props = {\n  isEnrolled: boolean;\n  id: string;\n  onRemoveU2fDevice: (device: AuthenticatorDevice) => void;\n  devices?: AuthenticatorDevice[];\n  className?: string;\n};\n\n/**\n * List u2f devices w/ ability to remove a single device\n */\nfunction U2fEnrolledDetails({\n  className,\n  isEnrolled,\n  devices,\n  id,\n  onRemoveU2fDevice,\n}: Props) {\n  if (id !== 'u2f' || !isEnrolled) {\n    return null;\n  }\n\n  const hasDevices = devices?.length;\n  // Note Tooltip doesn't work because of bootstrap(?) pointer events for disabled buttons\n  const isLastDevice = hasDevices === 1;\n\n  return (\n    <Panel className={className}>\n      <PanelHeader>{t('Device name')}</PanelHeader>\n\n      <PanelBody>\n        {!hasDevices && (\n          <EmptyMessage>{t('You have not added any U2F devices')}</EmptyMessage>\n        )}\n        {hasDevices &&\n          devices?.map(device => (\n            <DevicePanelItem key={device.name}>\n              <DeviceInformation>\n                <Name>{device.name}</Name>\n                <FadedDateTime date={device.timestamp} />\n              </DeviceInformation>\n\n              <Actions>\n                <Confirm\n                  onConfirm={() => onRemoveU2fDevice(device)}\n                  disabled={isLastDevice}\n                  message={\n                    <React.Fragment>\n                      <ConfirmHeader>\n                        {t('Do you want to remove U2F device?')}\n                      </ConfirmHeader>\n                      <TextBlock>\n                        {t(\n                          `Are you sure you want to remove the U2F device \"${device.name}\"?`\n                        )}\n                      </TextBlock>\n                    </React.Fragment>\n                  }\n                >\n                  <Button size=\"small\" priority=\"danger\">\n                    <Tooltip\n                      disabled={!isLastDevice}\n                      title={t('Can not remove last U2F device')}\n                    >\n                      <IconDelete size=\"xs\" />\n                    </Tooltip>\n                  </Button>\n                </Confirm>\n              </Actions>\n            </DevicePanelItem>\n          ))}\n        <AddAnotherPanelItem>\n          <Button\n            type=\"button\"\n            to=\"/settings/account/security/mfa/u2f/enroll/\"\n            size=\"small\"\n          >\n            {t('Add Another Device')}\n          </Button>\n        </AddAnotherPanelItem>\n      </PanelBody>\n    </Panel>\n  );\n}\n\nconst DevicePanelItem = styled(PanelItem)`\n  padding: 0;\n`;\n\nconst DeviceInformation = styled('div')`\n  display: flex;\n  align-items: center;\n  flex: 1;\n\n  padding: ${space(2)};\n  padding-right: 0;\n`;\n\nconst FadedDateTime = styled(DateTime)`\n  font-size: ${p => p.theme.fontSizeRelativeSmall};\n  opacity: 0.6;\n`;\n\nconst Name = styled('div')`\n  flex: 1;\n`;\n\nconst Actions = styled('div')`\n  margin: ${space(2)};\n`;\n\nconst AddAnotherPanelItem = styled(PanelItem)`\n  justify-content: flex-end;\n  padding: ${space(2)};\n`;\n\nexport default styled(U2fEnrolledDetails)`\n  margin-top: ${space(4)};\n`;\n","/**\n * AccountSecurityDetails is only displayed when user is enrolled in the 2fa method.\n * It displays created + last used time of the 2fa method.\n *\n * Also displays 2fa method specific details.\n */\nimport React from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport {addErrorMessage, addSuccessMessage} from 'app/actionCreators/indicator';\nimport Button from 'app/components/button';\nimport CircleIndicator from 'app/components/circleIndicator';\nimport DateTime from 'app/components/dateTime';\nimport Tooltip from 'app/components/tooltip';\nimport {t} from 'app/locale';\nimport space from 'app/styles/space';\nimport {Authenticator, AuthenticatorDevice} from 'app/types';\nimport AsyncView from 'app/views/asyncView';\nimport RecoveryCodes from 'app/views/settings/account/accountSecurity/components/recoveryCodes';\nimport RemoveConfirm from 'app/views/settings/account/accountSecurity/components/removeConfirm';\nimport U2fEnrolledDetails from 'app/views/settings/account/accountSecurity/components/u2fEnrolledDetails';\nimport SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';\nimport TextBlock from 'app/views/settings/components/text/textBlock';\n\nconst ENDPOINT = '/users/me/authenticators/';\n\ntype AuthenticatorDateProps = {\n  label: string;\n  /**\n   * Can be null or a Date object.\n   * Component will have value \"never\" if it is null\n   */\n  date: string | null;\n};\n\nfunction AuthenticatorDate({label, date}: AuthenticatorDateProps) {\n  return (\n    <React.Fragment>\n      <DateLabel>{label}</DateLabel>\n      <div>{date ? <DateTime date={date} /> : t('never')}</div>\n    </React.Fragment>\n  );\n}\n\ntype Props = {\n  deleteDisabled: boolean;\n  onRegenerateBackupCodes: () => void;\n} & RouteComponentProps<{authId: string}, {}>;\n\ntype State = {\n  authenticator: Authenticator | null;\n} & AsyncView['state'];\n\nclass AccountSecurityDetails extends AsyncView<Props, State> {\n  getTitle() {\n    return t('Security');\n  }\n\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    const {params} = this.props;\n    const {authId} = params;\n\n    return [['authenticator', `${ENDPOINT}${authId}/`]];\n  }\n\n  handleRemove = async (device?: AuthenticatorDevice) => {\n    const {authenticator} = this.state;\n\n    if (!authenticator || !authenticator.authId) {\n      return;\n    }\n\n    // if the device is defined, it means that U2f is being removed\n    const deviceId = device ? `${device.key_handle}/` : '';\n    const deviceName = device ? device.name : t('Authenticator');\n\n    this.setState({loading: true});\n\n    try {\n      await this.api.requestPromise(`${ENDPOINT}${authenticator.authId}/${deviceId}`, {\n        method: 'DELETE',\n      });\n      this.props.router.push('/settings/account/security');\n      addSuccessMessage(t('%s has been removed', deviceName));\n    } catch {\n      // Error deleting authenticator\n      this.setState({loading: false});\n      addErrorMessage(t('Error removing %s', deviceName));\n    }\n  };\n\n  renderBody() {\n    const {authenticator} = this.state;\n\n    if (!authenticator) {\n      return null;\n    }\n\n    const {deleteDisabled, onRegenerateBackupCodes} = this.props;\n\n    return (\n      <React.Fragment>\n        <SettingsPageHeader\n          title={\n            <React.Fragment>\n              <span>{authenticator.name}</span>\n              <AuthenticatorStatus enabled={authenticator.isEnrolled} />\n            </React.Fragment>\n          }\n          action={\n            authenticator.isEnrolled &&\n            authenticator.removeButton && (\n              <Tooltip\n                title={t(\n                  \"Two-factor authentication is required for at least one organization you're a member of.\"\n                )}\n                disabled={!deleteDisabled}\n              >\n                <RemoveConfirm onConfirm={this.handleRemove} disabled={deleteDisabled}>\n                  <Button priority=\"danger\">{authenticator.removeButton}</Button>\n                </RemoveConfirm>\n              </Tooltip>\n            )\n          }\n        />\n\n        <TextBlock>{authenticator.description}</TextBlock>\n\n        <AuthenticatorDates>\n          <AuthenticatorDate label={t('Created at')} date={authenticator.createdAt} />\n          <AuthenticatorDate label={t('Last used')} date={authenticator.lastUsedAt} />\n        </AuthenticatorDates>\n\n        <U2fEnrolledDetails\n          isEnrolled={authenticator.isEnrolled}\n          id={authenticator.id}\n          devices={authenticator.devices}\n          onRemoveU2fDevice={this.handleRemove}\n        />\n\n        {authenticator.isEnrolled && authenticator.phone && (\n          <PhoneWrapper>\n            {t('Confirmation codes are sent to the following phone number')}:\n            <Phone>{authenticator.phone}</Phone>\n          </PhoneWrapper>\n        )}\n\n        <RecoveryCodes\n          onRegenerateBackupCodes={onRegenerateBackupCodes}\n          isEnrolled={authenticator.isEnrolled}\n          codes={authenticator.codes}\n        />\n      </React.Fragment>\n    );\n  }\n}\n\nexport default AccountSecurityDetails;\n\nconst AuthenticatorStatus = styled(CircleIndicator)`\n  margin-left: ${space(1)};\n`;\n\nconst AuthenticatorDates = styled('div')`\n  display: grid;\n  grid-gap: ${space(2)};\n  grid-template-columns: max-content auto;\n`;\n\nconst DateLabel = styled('span')`\n  font-weight: bold;\n`;\n\nconst PhoneWrapper = styled('div')`\n  margin-top: ${space(4)};\n`;\n\nconst Phone = styled('span')`\n  font-weight: bold;\n  margin-left: ${space(1)};\n`;\n","import styled from '@emotion/styled';\n\nconst ConfirmHeader = styled('div')`\n  font-size: 1.2em;\n  margin-bottom: 10px;\n`;\n\nexport default ConfirmHeader;\n","import React from 'react';\n\nimport Confirm from 'app/components/confirm';\nimport {t} from 'app/locale';\nimport ConfirmHeader from 'app/views/settings/account/accountSecurity/components/confirmHeader';\nimport TextBlock from 'app/views/settings/components/text/textBlock';\n\ntype Props = React.ComponentProps<typeof Confirm>;\n\nconst message = (\n  <React.Fragment>\n    <ConfirmHeader>{t('Do you want to remove this method?')}</ConfirmHeader>\n    <TextBlock>\n      {t(\n        'Removing the last authentication method will disable two-factor authentication completely.'\n      )}\n    </TextBlock>\n  </React.Fragment>\n);\n\nconst RemoveConfirm = (props: Props) => <Confirm {...props} message={message} />;\n\nexport default RemoveConfirm;\n","import React from 'react';\nimport styled from '@emotion/styled';\n\nimport {HeaderTitle} from 'app/styles/organization';\nimport space from 'app/styles/space';\n\ntype Props = {\n  // Icon left of title\n  icon?: React.ReactNode;\n\n  // The title\n  title: React.ReactNode;\n  subtitle?: React.ReactNode;\n\n  // Disables font styles in the title. Allows for more custom titles.\n  noTitleStyles?: boolean;\n  className?: string;\n\n  // CTA button\n  action?: React.ReactNode;\n\n  body?: React.ReactNode;\n\n  tabs?: React.ReactNode;\n};\n\nclass UnstyledSettingsPageHeader extends React.Component<Props> {\n  static defaultProps = {\n    noTitleStyles: false,\n  };\n\n  render() {\n    const {\n      icon,\n      title,\n      subtitle,\n      action,\n      tabs,\n      noTitleStyles,\n      body,\n      ...props\n    } = this.props;\n\n    // If Header is narrow, use align-items to center <Action>.\n    // Otherwise, use a fixed margin to prevent an odd alignment.\n    // This is needed as Actions could be a button or a dropdown.\n    const isNarrow = !subtitle;\n\n    return (\n      <div {...props}>\n        <TitleAndActions isNarrow={isNarrow}>\n          <TitleWrapper>\n            {icon && <Icon>{icon}</Icon>}\n            {title && (\n              <Title tabs={tabs} styled={noTitleStyles}>\n                <HeaderTitle>{title}</HeaderTitle>\n                {subtitle && <Subtitle>{subtitle}</Subtitle>}\n              </Title>\n            )}\n          </TitleWrapper>\n          {action && <Action isNarrow={isNarrow}>{action}</Action>}\n        </TitleAndActions>\n\n        {body && <BodyWrapper>{body}</BodyWrapper>}\n        {tabs && <TabsWrapper>{tabs}</TabsWrapper>}\n      </div>\n    );\n  }\n}\n\ntype TitleProps = {\n  styled?: boolean;\n  tabs?: React.ReactNode;\n};\n\nconst TitleAndActions = styled('div')<{isNarrow?: boolean}>`\n  display: flex;\n  align-items: ${p => (p.isNarrow ? 'center' : 'flex-start')};\n`;\nconst TitleWrapper = styled('div')`\n  flex: 1;\n`;\n\nconst Title = styled('div')<TitleProps & React.HTMLProps<HTMLDivElement>>`\n  ${p => !p.styled && `font-size: 20px; font-weight: 600;`};\n  margin: ${space(4)} ${space(2)} ${space(3)} 0;\n`;\nconst Subtitle = styled('div')`\n  color: ${p => p.theme.gray400};\n  font-weight: 400;\n  font-size: ${p => p.theme.fontSizeLarge};\n  padding: ${space(1.5)} 0 0;\n`;\n\nconst Icon = styled('div')`\n  margin-right: ${space(1)};\n`;\n\nconst Action = styled('div')<{isNarrow?: boolean}>`\n  margin-top: ${p => (p.isNarrow ? '0' : space(4))};\n`;\n\nconst SettingsPageHeader = styled(UnstyledSettingsPageHeader)<\n  Omit<React.HTMLProps<HTMLDivElement>, keyof Props> & Props\n>`\n  font-size: 14px;\n  margin-top: -${space(4)};\n`;\n\nconst BodyWrapper = styled('div')`\n  flex: 1;\n  margin: 0 0 ${space(3)};\n`;\nconst TabsWrapper = styled('div')`\n  flex: 1;\n  margin: 0; /* sentry/components/navTabs has added margin */\n`;\n\nexport default SettingsPageHeader;\n"],"sourceRoot":""}