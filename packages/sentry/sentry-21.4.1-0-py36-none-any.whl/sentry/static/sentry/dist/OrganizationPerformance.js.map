{"version":3,"sources":["webpack:///./app/views/settings/components/forms/formPanel.tsx","webpack:///./app/views/settings/components/forms/jsonForm.tsx","webpack:///./app/views/settings/components/settingsPageHeader.tsx","webpack:///./app/views/settings/organization/permissionAlert.tsx","webpack:///./app/views/settings/organizationPerformance/index.tsx"],"names":["FormPanel","this","props","title","fields","access","disabled","additionalFieldProps","renderFooter","renderHeader","otherProps","id","sanitizeQuerySelector","undefined","map","field","defaultValue","fieldWithoutDefaultValue","disabledReason","key","name","highlighted","React","JsonForm","getLocation","context","hash","scrollToHash","nextProps","setState","toHash","scrollToElement","decodeURIComponent","align","offset","err","Sentry","fieldsWithVisibleProp","filter","defined","visible","length","every","formPanelProps","shouldDisplayForm","forms","features","location","state","formGroup","i","renderForm","PropTypes","UnstyledSettingsPageHeader","icon","subtitle","action","tabs","noTitleStyles","body","isNarrow","TitleAndActions","TitleWrapper","Icon","Title","styled","Subtitle","Action","BodyWrapper","TabsWrapper","p","space","theme","gray400","fontSizeLarge","SettingsPageHeader","PermissionAlert","hasAccess","type","size","t","required","label","help","tct","link","href","OrganizationPerformance","data","updateOrganization","organization","Set","endpoint","slug","jsonFormSettings","has","data-test-id","apiMethod","apiEndpoint","saveOnBlur","allowUndo","initialData","onSubmitSuccess","handleSuccess","onSubmitError","addErrorMessage","withOrganization"],"mappings":"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","file":"OrganizationPerformance.3e597e89ee6292005590.js","sourcesContent":["import React from 'react';\n\nimport {Panel, PanelBody, PanelHeader} from 'app/components/panels';\nimport {Scope} from 'app/types';\nimport {sanitizeQuerySelector} from 'app/utils/sanitizeQuerySelector';\nimport FieldFromConfig from 'app/views/settings/components/forms/fieldFromConfig';\n\nimport {FieldObject, JsonFormObject} from './type';\n\ntype Props = {\n  /**\n   * Panel title\n   */\n  title?: React.ReactNode;\n\n  /**\n   * List of fields to render\n   */\n  fields: FieldObject[];\n\n  access?: Set<Scope>;\n  features?: Record<string, any>;\n\n  additionalFieldProps: {[key: string]: any};\n\n  /**\n   * The name of the field that should be highlighted\n   */\n  highlighted?: string;\n\n  /**\n   * Renders inside of PanelBody at the start\n   */\n  renderHeader?: (arg: JsonFormObject) => React.ReactNode;\n\n  /**\n   * Renders inside of PanelBody before PanelBody close\n   */\n  renderFooter?: (arg: JsonFormObject) => React.ReactNode;\n\n  /**\n   * Disables the entire form\n   */\n  disabled?: boolean;\n};\n\nexport default class FormPanel extends React.Component<Props> {\n  render() {\n    const {\n      title,\n      fields,\n      access,\n      disabled,\n      additionalFieldProps,\n      renderFooter,\n      renderHeader,\n      ...otherProps\n    } = this.props;\n\n    return (\n      <Panel id={typeof title === 'string' ? sanitizeQuerySelector(title) : undefined}>\n        {title && <PanelHeader>{title}</PanelHeader>}\n        <PanelBody>\n          {typeof renderHeader === 'function' && renderHeader({title, fields})}\n\n          {fields.map(field => {\n            if (typeof field === 'function') {\n              return field();\n            }\n\n            const {defaultValue: _, ...fieldWithoutDefaultValue} = field;\n\n            // Allow the form panel disabled prop to override the fields\n            // disabled prop, with fallback to the fields disabled state.\n            if (disabled === true) {\n              fieldWithoutDefaultValue.disabled = true;\n              fieldWithoutDefaultValue.disabledReason = undefined;\n            }\n\n            return (\n              <FieldFromConfig\n                access={access}\n                disabled={disabled}\n                key={field.name}\n                {...otherProps}\n                {...additionalFieldProps}\n                field={fieldWithoutDefaultValue}\n                highlighted={this.props.highlighted === `#${field.name}`}\n              />\n            );\n          })}\n          {typeof renderFooter === 'function' && renderFooter({title, fields})}\n        </PanelBody>\n      </Panel>\n    );\n  }\n}\n","import React from 'react';\nimport * as Sentry from '@sentry/react';\nimport {Location} from 'history';\nimport PropTypes from 'prop-types';\nimport {Box} from 'reflexbox'; // eslint-disable-line no-restricted-imports\nimport scrollToElement from 'scroll-to-element';\n\nimport {defined} from 'app/utils';\nimport {sanitizeQuerySelector} from 'app/utils/sanitizeQuerySelector';\n\nimport FormPanel from './formPanel';\nimport {Field, FieldObject, JsonFormObject} from './type';\n\ntype DefaultProps = {\n  additionalFieldProps: {[key: string]: any};\n};\n\ntype Props = {\n  /**\n   * Fields that are grouped by \"section\"\n   */\n  forms?: JsonFormObject[];\n\n  /**\n   * If `forms` is not defined, `title` + `fields` must be required.\n   * Allows more fine grain control of title/fields\n   */\n  fields?: FieldObject[];\n  location?: Location;\n} & DefaultProps &\n  Omit<\n    React.ComponentProps<typeof FormPanel>,\n    'highlighted' | 'fields' | 'additionalFieldProps'\n  >;\n\ntype Context = {\n  location?: Location;\n};\n\ntype State = {\n  // Field name that should be highlighted\n  highlighted?: string;\n};\n\nclass JsonForm extends React.Component<Props, State> {\n  static contextTypes = {\n    location: PropTypes.object,\n  };\n\n  static defaultProps: DefaultProps = {\n    additionalFieldProps: {},\n  };\n\n  state: State = {\n    highlighted: getLocation(this.props, this.context).hash,\n  };\n\n  componentDidMount() {\n    this.scrollToHash();\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps: Props) {\n    if (\n      getLocation(this.props, this.context).hash !==\n      getLocation(nextProps, this.context).hash\n    ) {\n      const hash = getLocation(nextProps, this.context).hash;\n      this.scrollToHash(hash);\n      this.setState({highlighted: hash});\n    }\n  }\n\n  scrollToHash(toHash?: string): void {\n    const hash = toHash || getLocation(this.props, this.context).hash;\n\n    if (!hash) {\n      return;\n    }\n\n    // Push onto callback queue so it runs after the DOM is updated,\n    // this is required when navigating from a different page so that\n    // the element is rendered on the page before trying to getElementById.\n    try {\n      scrollToElement(sanitizeQuerySelector(decodeURIComponent(hash)), {\n        align: 'middle',\n        offset: -100,\n      });\n    } catch (err) {\n      Sentry.captureException(err);\n    }\n  }\n\n  shouldDisplayForm(fields: FieldObject[]) {\n    const fieldsWithVisibleProp = fields.filter(\n      field => typeof field !== 'function' && defined(field?.visible)\n    ) as Array<Omit<Field, 'visible'> & Required<Pick<Field, 'visible'>>>;\n\n    if (fields.length === fieldsWithVisibleProp.length) {\n      const {additionalFieldProps, ...props} = this.props;\n\n      const areAllFieldsHidden = fieldsWithVisibleProp.every(field => {\n        if (typeof field.visible === 'function') {\n          return !field.visible({...props, ...additionalFieldProps});\n        }\n        return !field.visible;\n      });\n\n      return !areAllFieldsHidden;\n    }\n\n    return true;\n  }\n\n  renderForm({\n    fields,\n    formPanelProps,\n    title,\n  }: {\n    fields: FieldObject[];\n    formPanelProps: Pick<\n      Props,\n      | 'access'\n      | 'disabled'\n      | 'features'\n      | 'additionalFieldProps'\n      | 'renderFooter'\n      | 'renderHeader'\n    > &\n      Pick<State, 'highlighted'>;\n    title?: React.ReactNode;\n  }) {\n    const shouldDisplayForm = this.shouldDisplayForm(fields);\n\n    if (\n      !shouldDisplayForm &&\n      !formPanelProps?.renderFooter &&\n      !formPanelProps?.renderHeader\n    ) {\n      return null;\n    }\n\n    return <FormPanel title={title} fields={fields} {...formPanelProps} />;\n  }\n\n  render() {\n    const {\n      access,\n      fields,\n      title,\n      forms,\n      disabled,\n      features,\n      additionalFieldProps,\n      renderFooter,\n      renderHeader,\n      location: _location,\n      ...otherProps\n    } = this.props;\n\n    const formPanelProps = {\n      access,\n      disabled,\n      features,\n      additionalFieldProps,\n      renderFooter,\n      renderHeader,\n      highlighted: this.state.highlighted,\n    };\n\n    return (\n      <Box {...otherProps}>\n        {typeof forms !== 'undefined' &&\n          forms.map((formGroup, i) => (\n            <React.Fragment key={i}>\n              {this.renderForm({formPanelProps, ...formGroup})}\n            </React.Fragment>\n          ))}\n        {typeof forms === 'undefined' &&\n          typeof fields !== 'undefined' &&\n          this.renderForm({fields, formPanelProps, title})}\n      </Box>\n    );\n  }\n}\n\nexport default JsonForm;\n\nfunction getLocation(props: Props, context: Context): Location | {hash?: string} {\n  return props.location || context.location || {};\n}\n","import React from 'react';\nimport styled from '@emotion/styled';\n\nimport {HeaderTitle} from 'app/styles/organization';\nimport space from 'app/styles/space';\n\ntype Props = {\n  // Icon left of title\n  icon?: React.ReactNode;\n\n  // The title\n  title: React.ReactNode;\n  subtitle?: React.ReactNode;\n\n  // Disables font styles in the title. Allows for more custom titles.\n  noTitleStyles?: boolean;\n  className?: string;\n\n  // CTA button\n  action?: React.ReactNode;\n\n  body?: React.ReactNode;\n\n  tabs?: React.ReactNode;\n};\n\nclass UnstyledSettingsPageHeader extends React.Component<Props> {\n  static defaultProps = {\n    noTitleStyles: false,\n  };\n\n  render() {\n    const {\n      icon,\n      title,\n      subtitle,\n      action,\n      tabs,\n      noTitleStyles,\n      body,\n      ...props\n    } = this.props;\n\n    // If Header is narrow, use align-items to center <Action>.\n    // Otherwise, use a fixed margin to prevent an odd alignment.\n    // This is needed as Actions could be a button or a dropdown.\n    const isNarrow = !subtitle;\n\n    return (\n      <div {...props}>\n        <TitleAndActions isNarrow={isNarrow}>\n          <TitleWrapper>\n            {icon && <Icon>{icon}</Icon>}\n            {title && (\n              <Title tabs={tabs} styled={noTitleStyles}>\n                <HeaderTitle>{title}</HeaderTitle>\n                {subtitle && <Subtitle>{subtitle}</Subtitle>}\n              </Title>\n            )}\n          </TitleWrapper>\n          {action && <Action isNarrow={isNarrow}>{action}</Action>}\n        </TitleAndActions>\n\n        {body && <BodyWrapper>{body}</BodyWrapper>}\n        {tabs && <TabsWrapper>{tabs}</TabsWrapper>}\n      </div>\n    );\n  }\n}\n\ntype TitleProps = {\n  styled?: boolean;\n  tabs?: React.ReactNode;\n};\n\nconst TitleAndActions = styled('div')<{isNarrow?: boolean}>`\n  display: flex;\n  align-items: ${p => (p.isNarrow ? 'center' : 'flex-start')};\n`;\nconst TitleWrapper = styled('div')`\n  flex: 1;\n`;\n\nconst Title = styled('div')<TitleProps & React.HTMLProps<HTMLDivElement>>`\n  ${p => !p.styled && `font-size: 20px; font-weight: 600;`};\n  margin: ${space(4)} ${space(2)} ${space(3)} 0;\n`;\nconst Subtitle = styled('div')`\n  color: ${p => p.theme.gray400};\n  font-weight: 400;\n  font-size: ${p => p.theme.fontSizeLarge};\n  padding: ${space(1.5)} 0 0;\n`;\n\nconst Icon = styled('div')`\n  margin-right: ${space(1)};\n`;\n\nconst Action = styled('div')<{isNarrow?: boolean}>`\n  margin-top: ${p => (p.isNarrow ? '0' : space(4))};\n`;\n\nconst SettingsPageHeader = styled(UnstyledSettingsPageHeader)<\n  Omit<React.HTMLProps<HTMLDivElement>, keyof Props> & Props\n>`\n  font-size: 14px;\n  margin-top: -${space(4)};\n`;\n\nconst BodyWrapper = styled('div')`\n  flex: 1;\n  margin: 0 0 ${space(3)};\n`;\nconst TabsWrapper = styled('div')`\n  flex: 1;\n  margin: 0; /* sentry/components/navTabs has added margin */\n`;\n\nexport default SettingsPageHeader;\n","import React from 'react';\n\nimport Access from 'app/components/acl/access';\nimport Alert from 'app/components/alert';\nimport {IconWarning} from 'app/icons';\nimport {t} from 'app/locale';\n\ntype Props = React.ComponentPropsWithoutRef<typeof Alert> &\n  Pick<React.ComponentProps<typeof Access>, 'access'>;\n\nconst PermissionAlert = ({access = ['org:write'], ...props}: Props) => (\n  <Access access={access}>\n    {({hasAccess}) =>\n      !hasAccess && (\n        <Alert type=\"warning\" icon={<IconWarning size=\"sm\" />} {...props}>\n          {t(\n            'These settings can only be edited by users with the organization owner or manager role.'\n          )}\n        </Alert>\n      )\n    }\n  </Access>\n);\n\nexport default PermissionAlert;\n","import React from 'react';\nimport {Location} from 'history';\n\nimport {addErrorMessage} from 'app/actionCreators/indicator';\nimport {updateOrganization} from 'app/actionCreators/organizations';\nimport ExternalLink from 'app/components/links/externalLink';\nimport {t, tct} from 'app/locale';\nimport {Organization} from 'app/types';\nimport withOrganization from 'app/utils/withOrganization';\nimport Form from 'app/views/settings/components/forms/form';\nimport JsonForm from 'app/views/settings/components/forms/jsonForm';\nimport {JsonFormObject} from 'app/views/settings/components/forms/type';\nimport SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';\nimport PermissionAlert from 'app/views/settings/organization/permissionAlert';\n\nconst fields: JsonFormObject[] = [\n  {\n    title: t('General'),\n    fields: [\n      {\n        name: 'apdexThreshold',\n        type: 'number',\n        required: true,\n        label: t('Response Time Threshold (Apdex)'),\n        help: tct(\n          `Set a response time threshold in milliseconds to help define what satisfactory\n                and tolerable response times are. This value will be reflected in the\n                calculation of your [link:Apdex], a standard measurement in performance.`,\n          {\n            link: (\n              <ExternalLink href=\"https://docs.sentry.io/performance-monitoring/performance/metrics/#apdex\" />\n            ),\n          }\n        ),\n      },\n    ],\n  },\n];\n\ntype Props = {\n  organization: Organization;\n  location: Location;\n};\n\nclass OrganizationPerformance extends React.Component<Props> {\n  handleSuccess = (data: Organization) => {\n    updateOrganization(data);\n  };\n\n  render() {\n    const {location, organization} = this.props;\n    const features = new Set(organization.features);\n    const access = new Set(organization.access);\n    const endpoint = `/organizations/${organization.slug}/`;\n\n    const jsonFormSettings = {\n      location,\n      features,\n      access,\n      disabled: !(access.has('org:write') && features.has('performance-view')),\n    };\n\n    return (\n      <React.Fragment>\n        <SettingsPageHeader title=\"Performance\" />\n        <PermissionAlert />\n\n        <Form\n          data-test-id=\"organization-performance-settings\"\n          apiMethod=\"PUT\"\n          apiEndpoint={endpoint}\n          saveOnBlur\n          allowUndo\n          initialData={organization}\n          onSubmitSuccess={this.handleSuccess}\n          onSubmitError={() => addErrorMessage('Unable to save changes')}\n        >\n          <JsonForm {...jsonFormSettings} forms={fields} />\n        </Form>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default withOrganization(OrganizationPerformance);\n"],"sourceRoot":""}