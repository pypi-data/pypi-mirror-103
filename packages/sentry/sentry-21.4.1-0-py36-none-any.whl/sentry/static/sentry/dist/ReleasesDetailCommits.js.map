{"version":3,"sources":["webpack:///./app/components/commitLink.tsx","webpack:///./app/components/commitRow.tsx","webpack:///./app/views/releases/detail/commits.tsx"],"names":["SUPPORTED_PROVIDERS","icon","size","providerIds","commitUrl","baseUrl","commitId","inline","repository","t","shortId","getShortCommitHash","providerData","find","provider","includes","id","undefined","url","className","href","external","CommitRow","message","split","author","EmailWarning","tct","actorEmail","email","accountSettings","StyledLink","to","inviteUser","onClick","openInviteMembersModal","initialData","emails","Set","source","this","props","commit","customAvatar","dateCreated","nonMemberEmail","key","AvatarWrapper","body","renderHovercardBody","user","EmailWarningIcon","CommitMessage","Message","renderMessage","Meta","name","timeago","date","React","space","p","theme","fontSizeSmall","Link","textColor","white","yellow200","TextOverflow","subText","Commits","params","projectSlug","orgId","routeTitleGen","formatVersion","release","commits","activeRepository","activeReleaseRepo","location","orgSlug","query","getQuery","encodeURIComponent","state","commitsPageLinks","length","commitsByRepository","getCommitsByRepository","reposToRender","getReposToRender","Object","keys","map","repoName","pageLinks","router","releaseRepos","repositories","renderContent","fullWidth","AsyncView","withReleaseRepos"],"mappings":"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","file":"ReleasesDetailCommits.4ac035bd79dec48e40c2.js","sourcesContent":["import React from 'react';\n\nimport Button from 'app/components/button';\nimport ExternalLink from 'app/components/links/externalLink';\nimport {IconBitbucket, IconGithub, IconGitlab, IconVsts} from 'app/icons';\nimport {t} from 'app/locale';\nimport {Repository} from 'app/types';\nimport {getShortCommitHash} from 'app/utils';\n\ntype CommitFormatterParameters = {\n  baseUrl: string;\n  commitId: string;\n};\n\ntype CommitProvider = {\n  icon: React.ReactNode;\n  providerIds: string[];\n  commitUrl: (CommitFormatterParameters) => string;\n};\n\n// TODO(epurkhiser, jess): This should be moved into plugins.\nconst SUPPORTED_PROVIDERS: Readonly<CommitProvider[]> = [\n  {\n    icon: <IconGithub size=\"xs\" />,\n    providerIds: ['github', 'integrations:github', 'integrations:github_enterprise'],\n    commitUrl: ({baseUrl, commitId}) => `${baseUrl}/commit/${commitId}`,\n  },\n  {\n    icon: <IconBitbucket size=\"xs\" />,\n    providerIds: ['bitbucket', 'integrations:bitbucket'],\n    commitUrl: ({baseUrl, commitId}) => `${baseUrl}/commits/${commitId}`,\n  },\n  {\n    icon: <IconVsts size=\"xs\" />,\n    providerIds: ['visualstudio', 'integrations:vsts'],\n    commitUrl: ({baseUrl, commitId}) => `${baseUrl}/commit/${commitId}`,\n  },\n  {\n    icon: <IconGitlab size=\"xs\" />,\n    providerIds: ['gitlab', 'integrations:gitlab'],\n    commitUrl: ({baseUrl, commitId}) => `${baseUrl}/commit/${commitId}`,\n  },\n];\n\ntype Props = {\n  commitId: string;\n  repository?: Repository;\n  inline?: boolean;\n};\n\nfunction CommitLink({inline, commitId, repository}: Props) {\n  if (!commitId || !repository) {\n    return <span>{t('Unknown Commit')}</span>;\n  }\n\n  const shortId = getShortCommitHash(commitId);\n\n  const providerData = SUPPORTED_PROVIDERS.find(provider => {\n    if (!repository.provider) {\n      return false;\n    }\n    return provider.providerIds.includes(repository.provider.id);\n  });\n\n  if (providerData === undefined) {\n    return <span>{shortId}</span>;\n  }\n\n  const commitUrl =\n    repository.url &&\n    providerData.commitUrl({\n      commitId,\n      baseUrl: repository.url,\n    });\n\n  return !inline ? (\n    <Button external href={commitUrl} size=\"small\" icon={providerData.icon}>\n      {shortId}\n    </Button>\n  ) : (\n    <ExternalLink className=\"inline-commit\" href={commitUrl}>\n      {providerData.icon}\n      {' ' + shortId}\n    </ExternalLink>\n  );\n}\n\nexport default CommitLink;\n","import React from 'react';\nimport styled from '@emotion/styled';\n\nimport {openInviteMembersModal} from 'app/actionCreators/modal';\nimport UserAvatar from 'app/components/avatar/userAvatar';\nimport CommitLink from 'app/components/commitLink';\nimport Hovercard from 'app/components/hovercard';\nimport Link from 'app/components/links/link';\nimport {PanelItem} from 'app/components/panels';\nimport TextOverflow from 'app/components/textOverflow';\nimport TimeSince from 'app/components/timeSince';\nimport {IconWarning} from 'app/icons';\nimport {t, tct} from 'app/locale';\nimport space from 'app/styles/space';\nimport {Commit, User} from 'app/types';\n\ntype Props = {\n  commit: Commit;\n  customAvatar?: React.ReactNode;\n};\n\nclass CommitRow extends React.Component<Props> {\n  renderMessage(message: Commit['message']): string {\n    if (!message) {\n      return t('No message provided');\n    }\n\n    const firstLine = message.split(/\\n/)[0];\n\n    return firstLine;\n  }\n\n  renderHovercardBody(author: User) {\n    return (\n      <EmailWarning>\n        {tct(\n          'The email [actorEmail] is not a member of your organization. [inviteUser:Invite] them or link additional emails in [accountSettings:account settings].',\n          {\n            actorEmail: <strong>{author.email}</strong>,\n            accountSettings: <StyledLink to=\"/settings/account/emails/\" />,\n            inviteUser: (\n              <StyledLink\n                to=\"\"\n                onClick={() =>\n                  openInviteMembersModal({\n                    initialData: [\n                      {\n                        emails: new Set([author.email]),\n                      },\n                    ],\n                    source: 'suspect_commit',\n                  })\n                }\n              />\n            ),\n          }\n        )}\n      </EmailWarning>\n    );\n  }\n\n  render() {\n    const {commit, customAvatar, ...props} = this.props;\n    const {id, dateCreated, message, author, repository} = commit;\n    const nonMemberEmail = author && author.id === undefined;\n\n    return (\n      <PanelItem key={id} {...props}>\n        {customAvatar ? (\n          customAvatar\n        ) : nonMemberEmail ? (\n          <AvatarWrapper>\n            <Hovercard body={this.renderHovercardBody(author!)}>\n              <UserAvatar size={36} user={author} />\n              <EmailWarningIcon>\n                <IconWarning size=\"xs\" />\n              </EmailWarningIcon>\n            </Hovercard>\n          </AvatarWrapper>\n        ) : (\n          <AvatarWrapper>\n            <UserAvatar size={36} user={author} />\n          </AvatarWrapper>\n        )}\n\n        <CommitMessage>\n          <Message>{this.renderMessage(message)}</Message>\n          <Meta>\n            {tct('[author] committed [timeago]', {\n              author: <strong>{(author && author.name) || t('Unknown author')}</strong>,\n              timeago: <TimeSince date={dateCreated} />,\n            })}\n          </Meta>\n        </CommitMessage>\n\n        <div>\n          <CommitLink commitId={id} repository={repository} />\n        </div>\n      </PanelItem>\n    );\n  }\n}\n\nconst AvatarWrapper = styled('div')`\n  position: relative;\n  align-self: flex-start;\n  margin-right: ${space(2)};\n`;\n\nconst EmailWarning = styled('div')`\n  font-size: ${p => p.theme.fontSizeSmall};\n  line-height: 1.4;\n  margin: -4px;\n`;\n\nconst StyledLink = styled(Link)`\n  color: ${p => p.theme.textColor};\n  border-bottom: 1px dotted ${p => p.theme.textColor};\n\n  &:hover {\n    color: ${p => p.theme.textColor};\n  }\n`;\n\nconst EmailWarningIcon = styled('span')`\n  position: absolute;\n  bottom: -6px;\n  right: -7px;\n  line-height: 12px;\n  border-radius: 50%;\n  border: 1px solid ${p => p.theme.white};\n  background: ${p => p.theme.yellow200};\n  padding: 1px 2px 3px 2px;\n`;\n\nconst CommitMessage = styled('div')`\n  flex: 1;\n  flex-direction: column;\n  min-width: 0;\n  margin-right: ${space(2)};\n`;\n\nconst Message = styled(TextOverflow)`\n  font-size: 15px;\n  line-height: 1.1;\n  font-weight: bold;\n`;\n\nconst Meta = styled(TextOverflow)`\n  font-size: 13px;\n  line-height: 1.5;\n  margin: 0;\n  color: ${p => p.theme.subText};\n`;\n\nexport default styled(CommitRow)`\n  align-items: center;\n`;\n","import React from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport {Location} from 'history';\n\nimport CommitRow from 'app/components/commitRow';\nimport {Body, Main} from 'app/components/layouts/thirds';\nimport Pagination from 'app/components/pagination';\nimport {Panel, PanelBody, PanelHeader} from 'app/components/panels';\nimport {t} from 'app/locale';\nimport {Commit, Organization, Project, Repository} from 'app/types';\nimport {formatVersion} from 'app/utils/formatters';\nimport routeTitleGen from 'app/utils/routeTitle';\nimport AsyncView from 'app/views/asyncView';\n\nimport EmptyState from './emptyState';\nimport RepositorySwitcher from './repositorySwitcher';\nimport {getCommitsByRepository, getQuery, getReposToRender} from './utils';\nimport withReleaseRepos from './withReleaseRepos';\n\ntype Props = RouteComponentProps<{orgId: string; release: string}, {}> & {\n  location: Location;\n  projectSlug: Project['slug'];\n  orgSlug: Organization['slug'];\n  release: string;\n  releaseRepos: Repository[];\n  activeReleaseRepo?: Repository;\n} & AsyncView['props'];\n\ntype State = {\n  commits: Commit[];\n} & AsyncView['state'];\n\nclass Commits extends AsyncView<Props, State> {\n  getTitle() {\n    const {params, projectSlug} = this.props;\n    const {orgId} = params;\n\n    return routeTitleGen(\n      t('Commits - Release %s', formatVersion(params.release)),\n      orgId,\n      false,\n      projectSlug\n    );\n  }\n\n  getDefaultState(): State {\n    return {\n      ...super.getDefaultState(),\n      commits: [],\n    };\n  }\n\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    const {\n      projectSlug,\n      activeReleaseRepo: activeRepository,\n      location,\n      orgSlug,\n      release,\n    } = this.props;\n\n    const query = getQuery({location, activeRepository});\n\n    return [\n      [\n        'commits',\n        `/projects/${orgSlug}/${projectSlug}/releases/${encodeURIComponent(\n          release\n        )}/commits/`,\n        {query},\n      ],\n    ];\n  }\n\n  renderContent() {\n    const {commits, commitsPageLinks} = this.state;\n    const {activeReleaseRepo} = this.props;\n\n    if (!commits.length) {\n      return (\n        <EmptyState>\n          {!activeReleaseRepo\n            ? t('There are no commits associated with this release.')\n            : t(\n                'There are no commits associated with this release in the %s repository.',\n                activeReleaseRepo.name\n              )}\n        </EmptyState>\n      );\n    }\n\n    const commitsByRepository = getCommitsByRepository(commits);\n    const reposToRender = getReposToRender(Object.keys(commitsByRepository));\n\n    return (\n      <React.Fragment>\n        {reposToRender.map(repoName => (\n          <Panel key={repoName}>\n            <PanelHeader>{repoName}</PanelHeader>\n            <PanelBody>\n              {commitsByRepository[repoName]?.map(commit => (\n                <CommitRow key={commit.id} commit={commit} />\n              ))}\n            </PanelBody>\n          </Panel>\n        ))}\n        <Pagination pageLinks={commitsPageLinks} />\n      </React.Fragment>\n    );\n  }\n\n  renderBody() {\n    const {location, router, activeReleaseRepo, releaseRepos} = this.props;\n\n    return (\n      <React.Fragment>\n        {releaseRepos.length > 1 && (\n          <RepositorySwitcher\n            repositories={releaseRepos}\n            activeRepository={activeReleaseRepo}\n            location={location}\n            router={router}\n          />\n        )}\n        {this.renderContent()}\n      </React.Fragment>\n    );\n  }\n\n  renderComponent() {\n    return (\n      <Body>\n        <Main fullWidth>{super.renderComponent()}</Main>\n      </Body>\n    );\n  }\n}\n\nexport default withReleaseRepos(Commits);\n"],"sourceRoot":""}