{"version":3,"sources":["webpack:///./app/utils/recreateRoute.tsx","webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/account/accountSecurity/sessionHistory/utils.tsx","webpack:///./app/views/settings/account/accountSecurity/sessionHistory/sessionRow.tsx","webpack:///./app/views/settings/account/accountSecurity/sessionHistory/index.tsx","webpack:///./app/views/settings/components/settingsPageHeader.tsx"],"names":["recreateRoute","to","options","lastRootIndex","routeIndex","routes","params","location","stepBack","paths","map","path","indexOf","findLastIndex","slice","baseRoute","search","hash","fullRoute","join","replaceRouterParams","AsyncView","title","this","getTitle","renderComponent","AsyncComponent","tableLayout","space","SessionRow","ipAddress","lastSeen","firstSeen","countryCode","regionCode","SessionPanelItem","IpAndLocation","IpAddress","CountryCode","StyledTimeSince","date","p","theme","fontSizeRelativeSmall","TimeSince","PanelItem","t","ipList","state","props","recreateRouteProps","tabs","underlined","index","SessionPanelHeader","id","ipObj","key","PanelHeader","UnstyledSettingsPageHeader","icon","subtitle","action","noTitleStyles","body","isNarrow","TitleAndActions","TitleWrapper","Icon","Title","styled","Subtitle","Action","BodyWrapper","TabsWrapper","React","gray400","fontSizeLarge","SettingsPageHeader"],"mappings":"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","file":"SessionHistory.92279c184e5daa047485.js","sourcesContent":["import {Location} from 'history';\nimport findLastIndex from 'lodash/findLastIndex';\n\nimport replaceRouterParams from 'app/utils/replaceRouterParams';\nimport {RouteWithName} from 'app/views/settings/components/settingsBreadcrumb/types';\n\ntype Options = {\n  routes: RouteWithName[];\n\n  // parameters to replace any route string parameters (e.g. if route is `:orgId`,\n  // params should have `{orgId: slug}`\n  params: {[key: string]: string | undefined};\n\n  /**\n   * The number of routes to to pop off of `routes\n   * Must be < 0\n   *\n   * There's no ts type for negative numbers so we are arbitrarily specifying -1-9\n   */\n  stepBack?: -1 | -2 | -3 | -4 | -5 | -6 | -7 | -8 | -9;\n  location?: Location;\n};\n\n/**\n * Given a route object or a string and a list of routes + params from router, this will attempt to recreate a location string while replacing url params.\n * Can additionally specify the number of routes to move back\n *\n * See tests for examples\n */\nexport default function recreateRoute(\n  to: string | RouteWithName,\n  options: Options\n): string {\n  const {routes, params, location, stepBack} = options;\n  const paths = routes.map(({path}) => path || '');\n  let lastRootIndex: number;\n  let routeIndex: number | undefined;\n\n  // TODO(ts): typescript things\n  if (typeof to !== 'string') {\n    routeIndex = routes.indexOf(to) + 1;\n    lastRootIndex = findLastIndex(paths.slice(0, routeIndex), path => path[0] === '/');\n  } else {\n    lastRootIndex = findLastIndex(paths, path => path[0] === '/');\n  }\n\n  let baseRoute = paths.slice(lastRootIndex, routeIndex);\n\n  if (typeof stepBack !== 'undefined') {\n    baseRoute = baseRoute.slice(0, stepBack);\n  }\n\n  const search = location?.search ?? '';\n  const hash = location?.hash ?? '';\n\n  const fullRoute = `${baseRoute.join('')}${\n    typeof to !== 'string' ? '' : to\n  }${search}${hash}`;\n\n  return replaceRouterParams(fullRoute, params);\n}\n","import React from 'react';\nimport DocumentTitle from 'react-document-title';\n\nimport AsyncComponent from 'app/components/asyncComponent';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    const title = this.getTitle();\n    return (\n      <DocumentTitle title={`${title ? `${title} - ` : ''}Sentry`}>\n        {this.renderComponent() as React.ReactChild}\n      </DocumentTitle>\n    );\n  }\n}\n","import space from 'app/styles/space';\n\nexport const tableLayout = `\n  display: grid;\n  grid-template-columns: auto 140px 140px;\n  grid-gap ${space(1)};\n  align-items: center;\n`;\n","import React from 'react';\nimport styled from '@emotion/styled';\n\nimport {PanelItem} from 'app/components/panels';\nimport TimeSince from 'app/components/timeSince';\nimport space from 'app/styles/space';\nimport {InternetProtocol} from 'app/types';\n\nimport {tableLayout} from './utils';\n\nfunction SessionRow({\n  ipAddress,\n  lastSeen,\n  firstSeen,\n  countryCode,\n  regionCode,\n}: Omit<InternetProtocol, 'id'>) {\n  return (\n    <SessionPanelItem>\n      <IpAndLocation>\n        <IpAddress>{ipAddress}</IpAddress>\n        {countryCode && regionCode && (\n          <CountryCode>{`${countryCode} (${regionCode})`}</CountryCode>\n        )}\n      </IpAndLocation>\n      <StyledTimeSince date={firstSeen} />\n      <StyledTimeSince date={lastSeen} />\n    </SessionPanelItem>\n  );\n}\n\nexport default SessionRow;\n\nconst IpAddress = styled('div')`\n  margin-bottom: ${space(0.5)};\n  font-weight: bold;\n`;\nconst CountryCode = styled('div')`\n  font-size: ${p => p.theme.fontSizeRelativeSmall};\n`;\n\nconst StyledTimeSince = styled(TimeSince)`\n  font-size: ${p => p.theme.fontSizeRelativeSmall};\n`;\n\nconst IpAndLocation = styled('div')`\n  flex: 1;\n`;\n\nconst SessionPanelItem = styled(PanelItem)`\n  ${tableLayout};\n`;\n","import React from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport ListLink from 'app/components/links/listLink';\nimport NavTabs from 'app/components/navTabs';\nimport {Panel, PanelBody, PanelHeader} from 'app/components/panels';\nimport {t} from 'app/locale';\nimport {InternetProtocol} from 'app/types';\nimport recreateRoute from 'app/utils/recreateRoute';\nimport AsyncView from 'app/views/asyncView';\nimport SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';\n\nimport SessionRow from './sessionRow';\nimport {tableLayout} from './utils';\n\ntype Props = RouteComponentProps<{}, {}>;\n\ntype State = {\n  ipList: Array<InternetProtocol> | null;\n} & AsyncView['state'];\n\nclass SessionHistory extends AsyncView<Props, State> {\n  getTitle() {\n    return t('Session History');\n  }\n\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    return [['ipList', '/users/me/ips/']];\n  }\n\n  renderBody() {\n    const {ipList} = this.state;\n\n    if (!ipList) {\n      return null;\n    }\n\n    const {routes, params, location} = this.props;\n    const recreateRouteProps = {routes, params, location};\n\n    return (\n      <React.Fragment>\n        <SettingsPageHeader\n          title={t('Security')}\n          tabs={\n            <NavTabs underlined>\n              <ListLink\n                to={recreateRoute('', {...recreateRouteProps, stepBack: -1})}\n                index\n              >\n                {t('Settings')}\n              </ListLink>\n              <ListLink to={recreateRoute('', recreateRouteProps)}>\n                {t('Session History')}\n              </ListLink>\n            </NavTabs>\n          }\n        />\n\n        <Panel>\n          <SessionPanelHeader>\n            <div>{t('Sessions')}</div>\n            <div>{t('First Seen')}</div>\n            <div>{t('Last Seen')}</div>\n          </SessionPanelHeader>\n\n          <PanelBody>\n            {ipList.map(({id, ...ipObj}) => (\n              <SessionRow key={id} {...ipObj} />\n            ))}\n          </PanelBody>\n        </Panel>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default SessionHistory;\n\nconst SessionPanelHeader = styled(PanelHeader)`\n  ${tableLayout}\n  justify-content: initial;\n`;\n","import React from 'react';\nimport styled from '@emotion/styled';\n\nimport {HeaderTitle} from 'app/styles/organization';\nimport space from 'app/styles/space';\n\ntype Props = {\n  // Icon left of title\n  icon?: React.ReactNode;\n\n  // The title\n  title: React.ReactNode;\n  subtitle?: React.ReactNode;\n\n  // Disables font styles in the title. Allows for more custom titles.\n  noTitleStyles?: boolean;\n  className?: string;\n\n  // CTA button\n  action?: React.ReactNode;\n\n  body?: React.ReactNode;\n\n  tabs?: React.ReactNode;\n};\n\nclass UnstyledSettingsPageHeader extends React.Component<Props> {\n  static defaultProps = {\n    noTitleStyles: false,\n  };\n\n  render() {\n    const {\n      icon,\n      title,\n      subtitle,\n      action,\n      tabs,\n      noTitleStyles,\n      body,\n      ...props\n    } = this.props;\n\n    // If Header is narrow, use align-items to center <Action>.\n    // Otherwise, use a fixed margin to prevent an odd alignment.\n    // This is needed as Actions could be a button or a dropdown.\n    const isNarrow = !subtitle;\n\n    return (\n      <div {...props}>\n        <TitleAndActions isNarrow={isNarrow}>\n          <TitleWrapper>\n            {icon && <Icon>{icon}</Icon>}\n            {title && (\n              <Title tabs={tabs} styled={noTitleStyles}>\n                <HeaderTitle>{title}</HeaderTitle>\n                {subtitle && <Subtitle>{subtitle}</Subtitle>}\n              </Title>\n            )}\n          </TitleWrapper>\n          {action && <Action isNarrow={isNarrow}>{action}</Action>}\n        </TitleAndActions>\n\n        {body && <BodyWrapper>{body}</BodyWrapper>}\n        {tabs && <TabsWrapper>{tabs}</TabsWrapper>}\n      </div>\n    );\n  }\n}\n\ntype TitleProps = {\n  styled?: boolean;\n  tabs?: React.ReactNode;\n};\n\nconst TitleAndActions = styled('div')<{isNarrow?: boolean}>`\n  display: flex;\n  align-items: ${p => (p.isNarrow ? 'center' : 'flex-start')};\n`;\nconst TitleWrapper = styled('div')`\n  flex: 1;\n`;\n\nconst Title = styled('div')<TitleProps & React.HTMLProps<HTMLDivElement>>`\n  ${p => !p.styled && `font-size: 20px; font-weight: 600;`};\n  margin: ${space(4)} ${space(2)} ${space(3)} 0;\n`;\nconst Subtitle = styled('div')`\n  color: ${p => p.theme.gray400};\n  font-weight: 400;\n  font-size: ${p => p.theme.fontSizeLarge};\n  padding: ${space(1.5)} 0 0;\n`;\n\nconst Icon = styled('div')`\n  margin-right: ${space(1)};\n`;\n\nconst Action = styled('div')<{isNarrow?: boolean}>`\n  margin-top: ${p => (p.isNarrow ? '0' : space(4))};\n`;\n\nconst SettingsPageHeader = styled(UnstyledSettingsPageHeader)<\n  Omit<React.HTMLProps<HTMLDivElement>, keyof Props> & Props\n>`\n  font-size: 14px;\n  margin-top: -${space(4)};\n`;\n\nconst BodyWrapper = styled('div')`\n  flex: 1;\n  margin: 0 0 ${space(3)};\n`;\nconst TabsWrapper = styled('div')`\n  flex: 1;\n  margin: 0; /* sentry/components/navTabs has added margin */\n`;\n\nexport default SettingsPageHeader;\n"],"sourceRoot":""}