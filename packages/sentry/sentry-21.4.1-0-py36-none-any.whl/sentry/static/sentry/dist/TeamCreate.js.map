{"version":3,"sources":["webpack:///./app/components/teams/createTeamForm.tsx","webpack:///./app/utils/slugify.tsx","webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/components/forms/form.tsx","webpack:///./app/views/settings/components/forms/textField.tsx","webpack:///./app/views/teamCreate.tsx"],"names":["CreateTeamForm","data","onSuccess","onError","callIfFunction","props","onSubmit","organization","this","t","submitLabel","apiEndpoint","slug","apiMethod","handleSubmit","onSubmitSuccess","handleCreateTeamSuccess","requireChanges","data-test-id","formProps","name","label","placeholder","help","required","stacked","flexibleControlStateSize","inline","transformInput","slugify","React","str","toLowerCase","replace","AsyncView","title","getTitle","renderComponent","AsyncComponent","Form","context","model","FormModel","e","skipPreventDefault","preventDefault","isSaving","onPreSubmit","getData","onSubmitError","saveForm","submitSuccess","error","submitError","saveOnBlur","resetOnError","onFieldChange","initialData","allowUndo","setInitialData","setFormOptions","form","reset","className","children","footerClass","footerStyle","submitDisabled","submitPriority","cancelLabel","onCancel","extraButton","hideFooter","shouldShowFooter","isRenderFunc","StyledFooter","style","DefaultButtons","type","disabled","onClick","marginLeft","priority","isError","formChanged","PropTypes","p","Panel","space","TextField","TeamCreate","orgId","params","redirectUrl","router","push","handleSubmitSuccess","withRouter","withOrganization"],"mappings":"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","file":"TeamCreate.faa035d14c0bb044baf2.js","sourcesContent":["import React from 'react';\n\nimport {t} from 'app/locale';\nimport {Organization} from 'app/types';\nimport {callIfFunction} from 'app/utils/callIfFunction';\nimport slugify from 'app/utils/slugify';\nimport Form from 'app/views/settings/components/forms/form';\nimport TextField from 'app/views/settings/components/forms/textField';\n\ntype Payload = {\n  slug: string;\n};\n\ntype Props = {\n  organization: Organization;\n  onSubmit?: (data: Payload, onSuccess: Function, onError: Function) => void;\n  onSuccess?: (data: Payload) => void;\n  formProps?: Partial<typeof Form>;\n};\n\nexport default class CreateTeamForm extends React.Component<Props> {\n  handleSubmit = (data: Record<string, any>, onSuccess: Function, onError: Function) => {\n    callIfFunction(this.props.onSubmit, data as Payload, onSuccess, onError);\n  };\n\n  handleCreateTeamSuccess = (data: Payload) => {\n    callIfFunction(this.props.onSuccess, data);\n  };\n\n  render() {\n    const {organization} = this.props;\n\n    return (\n      <React.Fragment>\n        <p>\n          {t(\n            'Members of a team have access to specific areas, such as a new release or a new application feature.'\n          )}\n        </p>\n\n        <Form\n          submitLabel={t('Create Team')}\n          apiEndpoint={`/organizations/${organization.slug}/teams/`}\n          apiMethod=\"POST\"\n          onSubmit={this.handleSubmit}\n          onSubmitSuccess={this.handleCreateTeamSuccess}\n          requireChanges\n          data-test-id=\"create-team-form\"\n          {...this.props.formProps}\n        >\n          <TextField\n            name=\"slug\"\n            label={t('Team Name')}\n            placeholder={t('e.g. operations, web-frontend, desktop')}\n            help={t('May contain lowercase letters, numbers, dashes and underscores.')}\n            required\n            stacked\n            flexibleControlStateSize\n            inline={false}\n            transformInput={slugify}\n          />\n        </Form>\n      </React.Fragment>\n    );\n  }\n}\n","// XXX: This is NOT an exhaustive slugify function\n// Only forces lowercase and replaces spaces with hyphens\nexport default function slugify(str: any): string {\n  return typeof str === 'string' ? str.toLowerCase().replace(' ', '-') : '';\n}\n","import React from 'react';\nimport DocumentTitle from 'react-document-title';\n\nimport AsyncComponent from 'app/components/asyncComponent';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    const title = this.getTitle();\n    return (\n      <DocumentTitle title={`${title ? `${title} - ` : ''}Sentry`}>\n        {this.renderComponent() as React.ReactChild}\n      </DocumentTitle>\n    );\n  }\n}\n","import React from 'react';\nimport styled from '@emotion/styled';\nimport {Observer} from 'mobx-react';\nimport PropTypes from 'prop-types';\n\nimport {APIRequestMethod} from 'app/api';\nimport Button from 'app/components/button';\nimport Panel from 'app/components/panels/panel';\nimport {t} from 'app/locale';\nimport space from 'app/styles/space';\nimport {isRenderFunc} from 'app/utils/isRenderFunc';\nimport FormModel, {FormOptions} from 'app/views/settings/components/forms/model';\n\ntype Data = Record<string, any>;\n\ntype RenderProps = {\n  model: FormModel;\n};\n\ntype RenderFunc = (props: RenderProps) => React.ReactNode;\n\ntype Props = {\n  apiMethod?: APIRequestMethod;\n  apiEndpoint?: string;\n  children?: React.ReactNode | RenderFunc;\n  className?: string;\n  cancelLabel?: string;\n  submitDisabled?: boolean;\n  submitLabel?: string;\n  submitPriority?: React.ComponentProps<typeof Button>['priority'];\n  footerClass?: string;\n  footerStyle?: React.CSSProperties;\n  extraButton?: React.ReactNode;\n  initialData?: Data;\n  // Require changes before able to submit form\n  requireChanges?: boolean;\n  // Reset form when there are errors; after submit\n  resetOnError?: boolean;\n  hideFooter?: boolean;\n  allowUndo?: boolean;\n  // Save field on control blur\n  saveOnBlur?: boolean;\n  model?: FormModel;\n  // if set to true, preventDefault is not called\n  skipPreventDefault?: boolean;\n  additionalFieldProps?: {[key: string]: any};\n  'data-test-id'?: string;\n\n  onCancel?: (e: React.MouseEvent) => void;\n  onSubmit?: (\n    data: Data,\n    onSubmitSuccess: (data: Data) => void,\n    onSubmitError: (error: any) => void,\n    e: React.FormEvent,\n    model: FormModel\n  ) => void;\n  onPreSubmit?: () => void;\n} & Pick<FormOptions, 'onSubmitSuccess' | 'onSubmitError' | 'onFieldChange'>;\n\ntype Context = {\n  saveOnBlur: boolean;\n  form: FormModel;\n};\n\nexport default class Form extends React.Component<Props> {\n  static childContextTypes = {\n    saveOnBlur: PropTypes.bool,\n    form: PropTypes.object,\n  };\n\n  constructor(props: Props, context: Context) {\n    super(props, context);\n    const {\n      saveOnBlur,\n      apiEndpoint,\n      apiMethod,\n      resetOnError,\n      onSubmitSuccess,\n      onSubmitError,\n      onFieldChange,\n      initialData,\n      allowUndo,\n    } = props;\n\n    this.model.setInitialData(initialData);\n    this.model.setFormOptions({\n      resetOnError,\n      allowUndo,\n      onFieldChange,\n      onSubmitSuccess,\n      onSubmitError,\n      saveOnBlur,\n      apiEndpoint,\n      apiMethod,\n    });\n  }\n\n  getChildContext() {\n    return {\n      saveOnBlur: this.props.saveOnBlur,\n      form: this.model,\n    };\n  }\n\n  componentWillUnmount() {\n    this.model.reset();\n  }\n\n  model: FormModel = this.props.model || new FormModel();\n\n  onSubmit = e => {\n    !this.props.skipPreventDefault && e.preventDefault();\n    if (this.model.isSaving) {\n      return;\n    }\n\n    this.props.onPreSubmit?.();\n\n    if (this.props.onSubmit) {\n      this.props.onSubmit(\n        this.model.getData(),\n        this.onSubmitSuccess,\n        this.onSubmitError,\n        e,\n        this.model\n      );\n    } else {\n      this.model.saveForm();\n    }\n  };\n\n  onSubmitSuccess = data => {\n    const {onSubmitSuccess} = this.props;\n    this.model.submitSuccess(data);\n\n    if (onSubmitSuccess) {\n      onSubmitSuccess(data, this.model);\n    }\n  };\n\n  onSubmitError = error => {\n    const {onSubmitError} = this.props;\n    this.model.submitError(error);\n\n    if (onSubmitError) {\n      onSubmitError(error, this.model);\n    }\n  };\n\n  render() {\n    const {\n      className,\n      children,\n      footerClass,\n      footerStyle,\n      submitDisabled,\n      submitLabel,\n      submitPriority,\n      cancelLabel,\n      onCancel,\n      extraButton,\n      requireChanges,\n      saveOnBlur,\n      hideFooter,\n    } = this.props;\n    const shouldShowFooter =\n      typeof hideFooter !== 'undefined' ? !hideFooter : !saveOnBlur;\n\n    return (\n      <form\n        onSubmit={this.onSubmit}\n        className={className ?? 'form-stacked'}\n        data-test-id={this.props['data-test-id']}\n      >\n        <div>\n          {isRenderFunc<RenderFunc>(children) ? children({model: this.model}) : children}\n        </div>\n\n        {shouldShowFooter && (\n          <StyledFooter\n            className={footerClass}\n            style={footerStyle}\n            saveOnBlur={saveOnBlur}\n          >\n            {extraButton}\n            <DefaultButtons>\n              {onCancel && (\n                <Observer>\n                  {() => (\n                    <Button\n                      type=\"button\"\n                      disabled={this.model.isSaving}\n                      onClick={onCancel}\n                      style={{marginLeft: 5}}\n                    >\n                      {cancelLabel ?? t('Cancel')}\n                    </Button>\n                  )}\n                </Observer>\n              )}\n\n              <Observer>\n                {() => (\n                  <Button\n                    data-test-id=\"form-submit\"\n                    priority={submitPriority ?? 'primary'}\n                    disabled={\n                      this.model.isError ||\n                      this.model.isSaving ||\n                      submitDisabled ||\n                      (requireChanges ? !this.model.formChanged : false)\n                    }\n                    type=\"submit\"\n                  >\n                    {submitLabel ?? t('Save Changes')}\n                  </Button>\n                )}\n              </Observer>\n            </DefaultButtons>\n          </StyledFooter>\n        )}\n      </form>\n    );\n  }\n}\n\nconst StyledFooter = styled('div')<{saveOnBlur?: boolean}>`\n  display: flex;\n  justify-content: flex-end;\n  margin-top: 25px;\n  border-top: 1px solid #e9ebec;\n  background: none;\n  padding: 16px 0 0;\n  margin-bottom: 16px;\n\n  ${p =>\n    !p.saveOnBlur &&\n    `\n  ${Panel} & {\n    margin-top: 0;\n    padding-right: 36px;\n  }\n\n  /* Better padding with form inside of a modal */\n  .modal-content & {\n    padding-right: 30px;\n    margin-left: -30px;\n    margin-right: -30px;\n    margin-bottom: -30px;\n    margin-top: 16px;\n    padding-bottom: 16px;\n  }\n  `};\n`;\n\nconst DefaultButtons = styled('div')`\n  display: grid;\n  grid-gap: ${space(1)};\n  grid-auto-flow: column;\n  justify-content: flex-end;\n  flex: 1;\n`;\n","import React from 'react';\n\nimport InputField from 'app/views/settings/components/forms/inputField';\n\ntype Props = InputField['props'];\n\nexport default function TextField(props: Omit<Props, 'type'>) {\n  return <InputField {...props} type=\"text\" />;\n}\n","import React from 'react';\nimport {withRouter, WithRouterProps} from 'react-router';\n\nimport NarrowLayout from 'app/components/narrowLayout';\nimport CreateTeamForm from 'app/components/teams/createTeamForm';\nimport {t} from 'app/locale';\nimport {Organization} from 'app/types';\nimport withOrganization from 'app/utils/withOrganization';\nimport AsyncView from 'app/views/asyncView';\n\ntype Props = WithRouterProps<{orgId: string}, {}> & {\n  organization: Organization;\n};\n\nclass TeamCreate extends AsyncView<Props> {\n  getTitle() {\n    return t('Create Team');\n  }\n\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    return [];\n  }\n\n  handleSubmitSuccess = data => {\n    const {orgId} = this.props.params;\n    const redirectUrl = `/settings/${orgId}/teams/${data.slug}/`;\n    this.props.router.push(redirectUrl);\n  };\n\n  renderBody() {\n    return (\n      <NarrowLayout>\n        <h3>{t('Create a New Team')}</h3>\n\n        <CreateTeamForm\n          onSuccess={this.handleSubmitSuccess}\n          organization={this.props.organization}\n        />\n      </NarrowLayout>\n    );\n  }\n}\n\nexport {TeamCreate};\nexport default withRouter(withOrganization(TeamCreate));\n"],"sourceRoot":""}