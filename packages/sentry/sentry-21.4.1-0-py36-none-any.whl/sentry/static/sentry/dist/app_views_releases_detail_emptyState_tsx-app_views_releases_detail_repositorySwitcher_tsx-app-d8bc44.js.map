{"version":3,"sources":["webpack:///./app/actions/repositoryActions.tsx","webpack:///./app/stores/repositoryStore.tsx","webpack:///./app/utils/withRepositories.tsx","webpack:///./app/actionCreators/repositories.tsx","webpack:///./app/views/releases/detail/emptyState.tsx","webpack:///./app/views/releases/detail/repositorySwitcher.tsx","webpack:///./app/views/releases/detail/utils.tsx","webpack:///./app/views/releases/detail/withReleaseRepos.tsx"],"names":["Reflux","RepositoryStoreConfig","listenables","RepoActions","state","orgSlug","undefined","repositories","repositoriesLoading","repositoriesError","init","this","resetRepositories","trigger","loadRepositories","loadRepositoriesError","err","loadRepositoriesSuccess","data","get","INITIAL_STATE","WrappedComponent","createReactClass","displayName","getDisplayName","mixins","RepositoryStore","getInitialState","props","organization","slug","repoData","RepositoryActions","componentDidMount","fetchRepositories","api","params","path","requestPromise","method","then","res","Sentry","scope","setLevel","setFingerprint","getRepositories","onStoreUpdate","setState","render","EmptyState","children","RepositorySwitcher","React","activeRepo","router","location","push","query","cursor","setButtonDropDownWidth","dropdownButtonWidth","dropdownButton","current","offsetWidth","activeRepository","name","StyledDropdownControl","minMenuWidth","label","FilterText","t","buttonProps","forwardRef","map","repo","repoName","key","onSelect","handleRepoFilterChange","eventKey","isActive","RepoLabel","DropdownControl","space","p","theme","borderRadius","button","border","gray300","overflowEllipsis","getFilesByRepository","fileList","reduce","filesByRepository","file","filename","author","type","hasOwnProperty","authors","types","Set","email","add","getCommitsByRepository","commitList","commitsByRepository","commit","repositoryName","repository","getQuery","perPage","pick","Object","values","URL_PARAM","per_page","repo_name","getReposToRender","repos","getReleaseEventView","selection","version","projects","environments","datetime","start","end","period","discoverQuery","id","fields","apdexThreshold","stringifyQueryObject","QueryResults","range","environment","getUtcDateString","EventView","withApi","withOrganization","withRepositories","releaseRepos","isLoading","fetchReleaseRepos","nextProps","setActiveReleaseRepo","prevProps","prevState","length","activeReleaseRepo","activeCommitRepo","matchedRepository","find","commitRepo","addErrorMessage","release","orgId","project","context","encodeURIComponent","fullWidth","dashedBorder","icon","size","title","description","action","priority","to","projectSlug","ReleaseContext"],"mappings":"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","file":"app_views_releases_detail_emptyState_tsx-app_views_releases_detail_repositorySwitcher_tsx-app-d8bc44.2784cd003ac19e0f32a3.js","sourcesContent":["import Reflux from 'reflux';\n\nexport default Reflux.createActions([\n  'resetRepositories',\n  'loadRepositories',\n  'loadRepositoriesError',\n  'loadRepositoriesSuccess',\n]);\n","import Reflux from 'reflux';\n\nimport RepoActions from 'app/actions/repositoryActions';\nimport {Repository} from 'app/types';\n\ntype RepositoryStoreInterface = {\n  get(): {\n    orgSlug?: string;\n    repositories?: Repository[];\n    repositoriesLoading?: boolean;\n    repositoriesError?: Error;\n  };\n\n  state: {\n    orgSlug?: string;\n    repositories?: Repository[];\n    repositoriesLoading?: boolean;\n    repositoriesError?: Error;\n  };\n\n  loadRepositories(orgSlug: string): void;\n  loadRepositoriesSuccess(data: Repository[]): void;\n  loadRepositoriesError(error: Error): void;\n};\n\nexport const RepositoryStoreConfig: Reflux.StoreDefinition & RepositoryStoreInterface = {\n  listenables: RepoActions,\n  state: {\n    orgSlug: undefined,\n    repositories: undefined,\n    repositoriesLoading: undefined,\n    repositoriesError: undefined,\n  },\n\n  init() {\n    this.resetRepositories();\n  },\n\n  resetRepositories() {\n    this.state = {\n      orgSlug: undefined,\n      repositories: undefined,\n      repositoriesLoading: undefined,\n      repositoriesError: undefined,\n    };\n    this.trigger(this.state);\n  },\n\n  loadRepositories(orgSlug: string) {\n    this.state = {\n      orgSlug,\n      repositories: orgSlug === this.state.orgSlug ? this.state.repositories : undefined,\n      repositoriesLoading: true,\n      repositoriesError: undefined,\n    };\n    this.trigger(this.state);\n  },\n\n  loadRepositoriesError(err: Error) {\n    this.state = {\n      ...this.state,\n      repositories: undefined,\n      repositoriesLoading: false,\n      repositoriesError: err,\n    };\n    this.trigger(this.state);\n  },\n\n  loadRepositoriesSuccess(data: Repository[]) {\n    this.state = {\n      ...this.state,\n      repositories: data,\n      repositoriesLoading: false,\n      repositoriesError: undefined,\n    };\n    this.trigger(this.state);\n  },\n\n  get() {\n    return {...this.state};\n  },\n};\n\ntype RepositoryStore = Reflux.Store & RepositoryStoreInterface;\n\nconst RepositoryStore = Reflux.createStore(RepositoryStoreConfig) as RepositoryStore;\n\nexport default RepositoryStore;\n","import React from 'react';\nimport createReactClass from 'create-react-class';\nimport Reflux from 'reflux';\n\nimport {getRepositories} from 'app/actionCreators/repositories';\nimport RepositoryActions from 'app/actions/repositoryActions';\nimport {Client} from 'app/api';\nimport RepositoryStore from 'app/stores/repositoryStore';\nimport {Organization, Repository} from 'app/types';\nimport getDisplayName from 'app/utils/getDisplayName';\n\ntype DependentProps = {\n  api: Client;\n  organization: Organization;\n};\n\ntype InjectedProps = {\n  repositories?: Repository[];\n  repositoriesLoading?: boolean;\n  repositoriesError?: Error;\n};\n\nconst INITIAL_STATE: InjectedProps = {\n  repositories: undefined,\n  repositoriesLoading: undefined,\n  repositoriesError: undefined,\n};\n\nconst withRepositories = <P extends DependentProps>(\n  WrappedComponent: React.ComponentType<P>\n) =>\n  createReactClass<\n    Omit<P, keyof InjectedProps> & Partial<InjectedProps> & DependentProps,\n    InjectedProps\n  >({\n    displayName: `withRepositories(${getDisplayName(WrappedComponent)})`,\n    mixins: [Reflux.listenTo(RepositoryStore, 'onStoreUpdate') as any],\n\n    getInitialState() {\n      const {organization} = this.props as P & DependentProps;\n      const orgSlug = organization.slug;\n      const repoData = RepositoryStore.get();\n\n      if (repoData.orgSlug !== orgSlug) {\n        RepositoryActions.resetRepositories();\n      }\n\n      return repoData.orgSlug === orgSlug\n        ? {...INITIAL_STATE, ...repoData}\n        : {...INITIAL_STATE};\n    },\n\n    componentDidMount() {\n      // XXX(leedongwei): Do not move this function call unless you modify the\n      // unit test named \"prevents repeated calls\"\n      this.fetchRepositories();\n    },\n\n    fetchRepositories() {\n      const {api, organization} = this.props as P & DependentProps;\n      const orgSlug = organization.slug;\n      const repoData = RepositoryStore.get();\n\n      // XXX(leedongwei): Do not check the orgSlug here. It would have been\n      // verified at `getInitialState`. The short-circuit hack in actionCreator\n      // does not update the orgSlug in the store.\n      if (\n        (!repoData.repositories && !repoData.repositoriesLoading) ||\n        repoData.repositoriesError\n      ) {\n        getRepositories(api, {orgSlug});\n      }\n    },\n\n    onStoreUpdate() {\n      const repoData = RepositoryStore.get();\n      this.setState({...repoData});\n    },\n\n    render() {\n      return <WrappedComponent {...(this.props as P & DependentProps)} {...this.state} />;\n    },\n  });\n\nexport default withRepositories;\n","import * as Sentry from '@sentry/react';\n\nimport RepositoryActions from 'app/actions/repositoryActions';\nimport {Client} from 'app/api';\nimport RepositoryStore from 'app/stores/repositoryStore';\nimport {Repository} from 'app/types';\n\ntype ParamsGet = {\n  orgSlug: string;\n};\n\nexport function getRepositories(api: Client, params: ParamsGet) {\n  const {orgSlug} = params;\n  const path = `/organizations/${orgSlug}/repos/`;\n\n  // HACK(leedongwei): Actions fired by the ActionCreators are queued to\n  // the back of the event loop, allowing another getRepo for the same\n  // repo to be fired before the loading state is updated in store.\n  // This hack short-circuits that and update the state immediately.\n  RepositoryStore.state.repositoriesLoading = true;\n  RepositoryActions.loadRepositories(orgSlug);\n\n  return api\n    .requestPromise(path, {\n      method: 'GET',\n    })\n    .then((res: Repository[]) => {\n      RepositoryActions.loadRepositoriesSuccess(res);\n    })\n    .catch(err => {\n      RepositoryActions.loadRepositoriesError(err);\n      Sentry.withScope(scope => {\n        scope.setLevel(Sentry.Severity.Warning);\n        scope.setFingerprint(['getRepositories-action-creator']);\n        Sentry.captureException(err);\n      });\n    });\n}\n","import React from 'react';\n\nimport EmptyStateWarning from 'app/components/emptyStateWarning';\nimport {Panel, PanelBody} from 'app/components/panels';\n\ntype Props = {\n  children: React.ReactNode;\n};\n\nconst EmptyState = ({children}: Props) => (\n  <Panel>\n    <PanelBody>\n      <EmptyStateWarning>\n        <p>{children}</p>\n      </EmptyStateWarning>\n    </PanelBody>\n  </Panel>\n);\n\nexport default EmptyState;\n","import React from 'react';\nimport {InjectedRouter} from 'react-router';\nimport styled from '@emotion/styled';\nimport {Location} from 'history';\n\nimport DropdownControl, {DropdownItem} from 'app/components/dropdownControl';\nimport {t} from 'app/locale';\nimport overflowEllipsis from 'app/styles/overflowEllipsis';\nimport space from 'app/styles/space';\nimport {Repository} from 'app/types';\n\ntype Props = {\n  repositories: Array<Repository>;\n  router: InjectedRouter;\n  location: Location;\n  activeRepository?: Repository;\n};\n\ntype State = {\n  dropdownButtonWidth?: number;\n};\n\nclass RepositorySwitcher extends React.PureComponent<Props, State> {\n  state: State = {};\n\n  componentDidMount() {\n    this.setButtonDropDownWidth();\n  }\n  setButtonDropDownWidth() {\n    const dropdownButtonWidth = this.dropdownButton?.current?.offsetWidth;\n    if (dropdownButtonWidth) {\n      this.setState({dropdownButtonWidth});\n    }\n  }\n\n  dropdownButton = React.createRef<HTMLButtonElement>();\n  handleRepoFilterChange = (activeRepo: string) => {\n    const {router, location} = this.props;\n\n    router.push({\n      ...location,\n      query: {...location.query, cursor: undefined, activeRepo},\n    });\n  };\n\n  render() {\n    const {activeRepository, repositories} = this.props;\n    const {dropdownButtonWidth} = this.state;\n\n    const activeRepo = activeRepository?.name;\n\n    return (\n      <StyledDropdownControl\n        minMenuWidth={dropdownButtonWidth}\n        label={\n          <React.Fragment>\n            <FilterText>{`${t('Filter')}:`}</FilterText>\n            {activeRepo}\n          </React.Fragment>\n        }\n        buttonProps={{forwardRef: this.dropdownButton}}\n      >\n        {repositories\n          .map(repo => repo.name)\n          .map(repoName => (\n            <DropdownItem\n              key={repoName}\n              onSelect={this.handleRepoFilterChange}\n              eventKey={repoName}\n              isActive={repoName === activeRepo}\n            >\n              <RepoLabel>{repoName}</RepoLabel>\n            </DropdownItem>\n          ))}\n      </StyledDropdownControl>\n    );\n  }\n}\n\nexport default RepositorySwitcher;\n\nconst StyledDropdownControl = styled(DropdownControl)<{\n  minMenuWidth: State['dropdownButtonWidth'];\n}>`\n  margin-bottom: ${space(1)};\n  > *:nth-child(2) {\n    right: auto;\n    width: auto;\n    ${p => p.minMenuWidth && `min-width: calc(${p.minMenuWidth}px + 10px);`}\n    border-radius: ${p => p.theme.borderRadius};\n    border-top-left-radius: 0px;\n    border: 1px solid ${p => p.theme.button.default.border};\n    top: calc(100% - 1px);\n  }\n`;\n\nconst FilterText = styled('em')`\n  font-style: normal;\n  color: ${p => p.theme.gray300};\n  margin-right: ${space(0.5)};\n`;\n\nconst RepoLabel = styled('div')`\n  ${overflowEllipsis}\n`;\n","import {Location} from 'history';\nimport pick from 'lodash/pick';\n\nimport {URL_PARAM} from 'app/constants/globalSelectionHeader';\nimport {t} from 'app/locale';\nimport {\n  Commit,\n  CommitFile,\n  FilesByRepository,\n  GlobalSelection,\n  LightWeightOrganization,\n  Repository,\n} from 'app/types';\nimport {getUtcDateString} from 'app/utils/dates';\nimport EventView from 'app/utils/discover/eventView';\nimport {QueryResults, stringifyQueryObject} from 'app/utils/tokenizeSearch';\n\nexport type CommitsByRepository = {\n  [key: string]: Commit[];\n};\n\n/**\n * Convert list of individual file changes into a per-file summary grouped by repository\n */\nexport function getFilesByRepository(fileList: CommitFile[]) {\n  return fileList.reduce<FilesByRepository>((filesByRepository, file) => {\n    const {filename, repoName, author, type} = file;\n\n    if (!filesByRepository.hasOwnProperty(repoName)) {\n      filesByRepository[repoName] = {};\n    }\n\n    if (!filesByRepository[repoName].hasOwnProperty(filename)) {\n      filesByRepository[repoName][filename] = {\n        authors: {},\n        types: new Set(),\n      };\n    }\n\n    if (author.email) {\n      filesByRepository[repoName][filename].authors[author.email] = author;\n    }\n\n    filesByRepository[repoName][filename].types.add(type);\n\n    return filesByRepository;\n  }, {});\n}\n\n/**\n * Convert list of individual commits into a summary grouped by repository\n */\nexport function getCommitsByRepository(commitList: Commit[]): CommitsByRepository {\n  return commitList.reduce((commitsByRepository, commit) => {\n    const repositoryName = commit.repository?.name ?? t('unknown');\n\n    if (!commitsByRepository.hasOwnProperty(repositoryName)) {\n      commitsByRepository[repositoryName] = [];\n    }\n\n    commitsByRepository[repositoryName].push(commit);\n\n    return commitsByRepository;\n  }, {});\n}\n\n/**\n * Get request query according to the url params and active repository\n */\n\ntype GetQueryProps = {\n  location: Location;\n  perPage?: number;\n  activeRepository?: Repository;\n};\n\nexport function getQuery({location, perPage = 40, activeRepository}: GetQueryProps) {\n  const query = {\n    ...pick(location.query, [...Object.values(URL_PARAM), 'cursor']),\n    per_page: perPage,\n  };\n\n  if (!activeRepository) {\n    return query;\n  }\n\n  return {...query, repo_name: activeRepository.name};\n}\n\n/**\n * Get repositories to render according to the activeRepository\n */\nexport function getReposToRender(repos: Array<string>, activeRepository?: Repository) {\n  if (!activeRepository) {\n    return repos;\n  }\n  return [activeRepository.name];\n}\n\n/**\n * Get high level transaction information for this release\n */\nexport function getReleaseEventView(\n  selection: GlobalSelection,\n  version: string,\n  organization: LightWeightOrganization\n): EventView {\n  const {projects, environments, datetime} = selection;\n  const {start, end, period} = datetime;\n\n  const discoverQuery = {\n    id: undefined,\n    version: 2,\n    name: `${t('Release Apdex')}`,\n    fields: [`apdex(${organization.apdexThreshold})`],\n    query: stringifyQueryObject(\n      new QueryResults([`release:${version}`, 'event.type:transaction', 'count():>0'])\n    ),\n    range: period,\n    environment: environments,\n    projects,\n    start: start ? getUtcDateString(start) : undefined,\n    end: end ? getUtcDateString(end) : undefined,\n  } as const;\n\n  return EventView.fromSavedQuery(discoverQuery);\n}\n","import React from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport * as Sentry from '@sentry/react';\n\nimport {addErrorMessage} from 'app/actionCreators/indicator';\nimport {Client} from 'app/api';\nimport Button from 'app/components/button';\nimport {Body, Main} from 'app/components/layouts/thirds';\nimport LoadingIndicator from 'app/components/loadingIndicator';\nimport {Panel} from 'app/components/panels';\nimport {IconCommit} from 'app/icons';\nimport {t} from 'app/locale';\nimport {Organization, Repository} from 'app/types';\nimport getDisplayName from 'app/utils/getDisplayName';\nimport withApi from 'app/utils/withApi';\nimport withOrganization from 'app/utils/withOrganization';\nimport withRepositories from 'app/utils/withRepositories';\nimport EmptyMessage from 'app/views/settings/components/emptyMessage';\n\nimport {ReleaseContext} from '.';\n\n// These props are required when using this HoC\ntype DependentProps = RouteComponentProps<{orgId: string; release: string}, {}>;\n\ntype HoCsProps = {\n  api: Client;\n  organization: Organization;\n  repositories?: Repository[];\n  repositoriesLoading?: boolean;\n  repositoriesError?: Error;\n};\n\ntype State = {\n  releaseRepos: Repository[];\n  isLoading: boolean;\n  activeReleaseRepo?: Repository;\n};\n\nconst withReleaseRepos = <P extends DependentProps>(\n  WrappedComponent: React.ComponentType<P>\n) =>\n  withApi(\n    withOrganization(\n      withRepositories(\n        class extends React.Component<P & HoCsProps, State> {\n          static displayName = `withReleaseRepos(${getDisplayName(WrappedComponent)})`;\n\n          state: State = {\n            releaseRepos: [],\n            isLoading: true,\n          };\n\n          componentDidMount() {\n            this.fetchReleaseRepos();\n          }\n\n          UNSAFE_componentWillReceiveProps(nextProps: P & HoCsProps) {\n            this.setActiveReleaseRepo(nextProps);\n          }\n\n          componentDidUpdate(prevProps: P & HoCsProps, prevState: State) {\n            if (!!prevProps.repositoriesLoading && !this.props.repositoriesLoading) {\n              this.fetchReleaseRepos();\n              return;\n            }\n\n            if (prevState.releaseRepos.length !== this.state.releaseRepos.length) {\n              this.setActiveReleaseRepo(this.props);\n            }\n          }\n\n          static contextType = ReleaseContext;\n\n          setActiveReleaseRepo(props: P & HoCsProps) {\n            const {releaseRepos, activeReleaseRepo} = this.state;\n\n            if (!releaseRepos.length) {\n              return;\n            }\n\n            const activeCommitRepo = props.location.query?.activeRepo;\n\n            if (!activeCommitRepo) {\n              this.setState({\n                activeReleaseRepo: releaseRepos[0] ?? null,\n              });\n              return;\n            }\n\n            if (activeCommitRepo === activeReleaseRepo?.name) {\n              return;\n            }\n\n            const matchedRepository = releaseRepos.find(\n              commitRepo => commitRepo.name === activeCommitRepo\n            );\n\n            if (matchedRepository) {\n              this.setState({\n                activeReleaseRepo: matchedRepository,\n              });\n              return;\n            }\n\n            addErrorMessage(t('The repository you were looking for was not found.'));\n          }\n\n          async fetchReleaseRepos() {\n            const {params, api, repositories, repositoriesLoading} = this.props;\n\n            if (repositoriesLoading === undefined || repositoriesLoading === true) {\n              return;\n            }\n\n            if (!repositories?.length) {\n              this.setState({isLoading: false});\n              return;\n            }\n\n            const {release, orgId} = params;\n            const {project} = this.context;\n\n            this.setState({isLoading: true});\n\n            try {\n              const releaseRepos = await api.requestPromise(\n                `/projects/${orgId}/${project.slug}/releases/${encodeURIComponent(\n                  release\n                )}/repositories/`\n              );\n              this.setState({releaseRepos, isLoading: false});\n            } catch (error) {\n              Sentry.captureException(error);\n              addErrorMessage(\n                t(\n                  'An error occured while trying to fetch the repositories of the release: %s',\n                  release\n                )\n              );\n            }\n          }\n\n          render() {\n            const {isLoading, activeReleaseRepo, releaseRepos} = this.state;\n            const {\n              repositoriesLoading,\n              repositories,\n              params,\n              router,\n              location,\n              organization,\n            } = this.props;\n\n            if (isLoading || repositoriesLoading) {\n              return <LoadingIndicator />;\n            }\n\n            const noRepositoryOrgRelatedFound = !repositories?.length;\n\n            if (noRepositoryOrgRelatedFound) {\n              const {orgId} = params;\n              return (\n                <Body>\n                  <Main fullWidth>\n                    <Panel dashedBorder>\n                      <EmptyMessage\n                        icon={<IconCommit size=\"xl\" />}\n                        title={t('Releases are better with commit data!')}\n                        description={t(\n                          'Connect a repository to see commit info, files changed, and authors involved in future releases.'\n                        )}\n                        action={\n                          <Button priority=\"primary\" to={`/settings/${orgId}/repos/`}>\n                            {t('Connect a repository')}\n                          </Button>\n                        }\n                      />\n                    </Panel>\n                  </Main>\n                </Body>\n              );\n            }\n\n            const noReleaseReposFound = !releaseRepos.length;\n\n            if (noReleaseReposFound) {\n              return (\n                <Body>\n                  <Main fullWidth>\n                    <Panel dashedBorder>\n                      <EmptyMessage\n                        icon={<IconCommit size=\"xl\" />}\n                        title={t('Releases are better with commit data!')}\n                        description={t(\n                          'No commits associated with this release have been found.'\n                        )}\n                      />\n                    </Panel>\n                  </Main>\n                </Body>\n              );\n            }\n\n            if (activeReleaseRepo === undefined) {\n              return <LoadingIndicator />;\n            }\n\n            const {release} = params;\n            const orgSlug = organization.slug;\n\n            return (\n              <WrappedComponent\n                {...(this.props as P)} // this is just to satisfy the compiler\n                orgSlug={orgSlug}\n                projectSlug={this.context.project.slug}\n                release={release}\n                router={router}\n                location={location}\n                releaseRepos={releaseRepos}\n                activeReleaseRepo={activeReleaseRepo}\n              />\n            );\n          }\n        }\n      )\n    )\n  );\n\nexport default withReleaseRepos;\n"],"sourceRoot":""}