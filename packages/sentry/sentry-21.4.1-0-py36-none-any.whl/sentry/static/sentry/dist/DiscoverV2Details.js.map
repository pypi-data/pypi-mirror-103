{"version":3,"sources":["webpack:///./app/views/eventsV2/breadcrumb.tsx","webpack:///./app/views/eventsV2/eventDetails/linkedIssue.tsx","webpack:///./app/views/eventsV2/eventDetails/content.tsx","webpack:///./app/views/eventsV2/eventDetails/index.tsx"],"names":["DiscoverBreadcrumb","crumbs","this","props","eventView","event","organization","location","discoverTarget","features","includes","pathname","getDiscoverLandingUrl","query","generateBlankQueryStringObject","getGlobalSelectionQuery","push","to","label","t","isValid","getResultsViewUrlTarget","slug","name","getCrumbs","React","undefined","LinkedIssue","groupId","height","bottomGutter","error","disableLog","disableReport","errors","state","hasNotFound","Object","values","find","resp","status","type","icon","size","eventId","group","issueUrl","permalink","Section","StyledIssueCard","IssueCardHeader","StyledLink","data-test-id","StyledShortId","shortId","avatar","project","avatarSize","hideName","disableLink","StyledSeenByList","seenBy","maxVisibleAvatars","IssueCardBody","statsPeriod","data","IssueCardFooter","lastSeen","firstSeen","AsyncComponent","space","p","theme","border","borderRadius","Link","backgroundSecondary","SeenByList","ShortId","fontSizeMedium","textColor","gray300","fontSizeSmall","EventDetailsContent","loading","reloading","isSidebarVisible","setState","tag","key","FIELD_TAGS","eventReference","id","tagKey","generateTagKey","getExpandedResults","value","eventSlug","params","trim","getEventsAPIPayload","field","split","renderContent","trackAnalyticsEvent","eventKey","eventName","event_type","organization_id","parseInt","transactionName","tags","transactionSummaryTarget","transactionSummaryRouteWithQuery","orgSlug","transaction","projectID","eventJsonUrl","projectId","eventID","results","metaResults","EventHeader","gap","onClick","toggleSidebar","href","external","bytes","hasFeature","disabled","priority","fullWidth","quickTrace","meta","errorDest","transactionDest","orgId","slugs","projects","initiallyLoaded","getViewChildTransactionTarget","childTransactionProps","eventDetailsRoute","generateQueryStringObject","showExampleCommit","showTagSummary","api","groupID","generateUrl","generateTagUrl","traceId","contexts","trace","trace_id","getTraceTimeRangeFromEvent","start","end","notFound","permissionDenied","message","projectSlug","getEventSlug","title","generateTitle","getMessage","EventHeaderContainer","TitleWrapper","MessageWrapper","breakpoints","headerFontSize","EventDetails","EventView","String","length","getEventView","documentTitle","getDocumentTitle","join","StyledPageContent","withOrganization","PageContent"],"mappings":"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","file":"DiscoverV2Details.f7e0370a760a3c83b2cb.js","sourcesContent":["import React from 'react';\nimport {Location} from 'history';\n\nimport Breadcrumbs, {Crumb} from 'app/components/breadcrumbs';\nimport {t} from 'app/locale';\nimport {Organization} from 'app/types';\nimport {Event} from 'app/types/event';\nimport EventView from 'app/utils/discover/eventView';\nimport {getDiscoverLandingUrl} from 'app/utils/discover/urls';\n\ntype DefaultProps = {\n  event: Event | undefined;\n};\n\ntype Props = DefaultProps & {\n  eventView: EventView;\n  organization: Organization;\n  location: Location;\n};\n\nclass DiscoverBreadcrumb extends React.Component<Props> {\n  static defaultProps: DefaultProps = {\n    event: undefined,\n  };\n\n  getCrumbs() {\n    const crumbs: Crumb[] = [];\n    const {eventView, event, organization, location} = this.props;\n    const discoverTarget = organization.features.includes('discover-query')\n      ? {\n          pathname: getDiscoverLandingUrl(organization),\n          query: {\n            ...location.query,\n            ...eventView.generateBlankQueryStringObject(),\n            ...eventView.getGlobalSelectionQuery(),\n          },\n        }\n      : null;\n\n    crumbs.push({\n      to: discoverTarget,\n      label: t('Discover'),\n    });\n\n    if (eventView && eventView.isValid()) {\n      crumbs.push({\n        to: eventView.getResultsViewUrlTarget(organization.slug),\n        label: eventView.name || '',\n      });\n    }\n\n    if (event) {\n      crumbs.push({\n        label: t('Event Detail'),\n      });\n    }\n\n    return crumbs;\n  }\n\n  render() {\n    return <Breadcrumbs crumbs={this.getCrumbs()} />;\n  }\n}\n\nexport default DiscoverBreadcrumb;\n","import React from 'react';\nimport styled from '@emotion/styled';\n\nimport Alert from 'app/components/alert';\nimport AsyncComponent from 'app/components/asyncComponent';\nimport {SectionHeading} from 'app/components/charts/styles';\nimport Times from 'app/components/group/times';\nimport ProjectBadge from 'app/components/idBadge/projectBadge';\nimport Link from 'app/components/links/link';\nimport Placeholder from 'app/components/placeholder';\nimport SeenByList from 'app/components/seenByList';\nimport ShortId from 'app/components/shortId';\nimport GroupChart from 'app/components/stream/groupChart';\nimport {IconWarning} from 'app/icons';\nimport {t} from 'app/locale';\nimport space from 'app/styles/space';\nimport {Group} from 'app/types';\n\ntype Props = {\n  groupId: string;\n  eventId: string;\n};\n\ntype State = {\n  group: Group;\n};\n\nclass LinkedIssue extends AsyncComponent<\n  Props & AsyncComponent['props'],\n  State & AsyncComponent['state']\n> {\n  getEndpoints(): ReturnType<AsyncComponent['getEndpoints']> {\n    const {groupId} = this.props;\n    const groupUrl = `/issues/${groupId}/`;\n\n    return [['group', groupUrl]];\n  }\n\n  renderLoading() {\n    return <Placeholder height=\"120px\" bottomGutter={2} />;\n  }\n\n  renderError(error?: Error, disableLog = false, disableReport = false): React.ReactNode {\n    const {errors} = this.state;\n    const hasNotFound = Object.values(errors).find(resp => resp && resp.status === 404);\n    if (hasNotFound) {\n      return (\n        <Alert type=\"warning\" icon={<IconWarning size=\"md\" />}>\n          {t('The linked issue cannot be found. It may have been deleted, or merged.')}\n        </Alert>\n      );\n    }\n\n    return super.renderError(error, disableLog, disableReport);\n  }\n\n  renderBody() {\n    const {eventId} = this.props;\n    const {group} = this.state;\n    const issueUrl = `${group.permalink}events/${eventId}/`;\n\n    return (\n      <Section>\n        <SectionHeading>{t('Event Issue')}</SectionHeading>\n        <StyledIssueCard>\n          <IssueCardHeader>\n            <StyledLink to={issueUrl} data-test-id=\"linked-issue\">\n              <StyledShortId\n                shortId={group.shortId}\n                avatar={\n                  <ProjectBadge\n                    project={group.project}\n                    avatarSize={16}\n                    hideName\n                    disableLink\n                  />\n                }\n              />\n            </StyledLink>\n            <StyledSeenByList seenBy={group.seenBy} maxVisibleAvatars={5} />\n          </IssueCardHeader>\n          <IssueCardBody>\n            <GroupChart statsPeriod=\"30d\" data={group} height={56} />\n          </IssueCardBody>\n          <IssueCardFooter>\n            <Times lastSeen={group.lastSeen} firstSeen={group.firstSeen} />\n          </IssueCardFooter>\n        </StyledIssueCard>\n      </Section>\n    );\n  }\n}\n\nconst Section = styled('div')`\n  margin-bottom: ${space(4)};\n`;\n\nconst StyledIssueCard = styled('div')`\n  border: 1px solid ${p => p.theme.border};\n  border-radius: ${p => p.theme.borderRadius};\n`;\n\nconst IssueCardHeader = styled('div')`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: ${space(1)};\n`;\n\nconst StyledLink = styled(Link)`\n  justify-content: flex-start;\n`;\n\nconst IssueCardBody = styled('div')`\n  background: ${p => p.theme.backgroundSecondary};\n  padding-top: ${space(1)};\n`;\n\nconst StyledSeenByList = styled(SeenByList)`\n  margin: 0;\n`;\n\nconst StyledShortId = styled(ShortId)`\n  font-size: ${p => p.theme.fontSizeMedium};\n  color: ${p => p.theme.textColor};\n`;\n\nconst IssueCardFooter = styled('div')`\n  color: ${p => p.theme.gray300};\n  font-size: ${p => p.theme.fontSizeSmall};\n  padding: ${space(0.5)} ${space(1)};\n`;\n\nexport default LinkedIssue;\n","import React from 'react';\nimport {Params} from 'react-router/lib/Router';\nimport styled from '@emotion/styled';\nimport {Location} from 'history';\n\nimport Feature from 'app/components/acl/feature';\nimport AsyncComponent from 'app/components/asyncComponent';\nimport Button from 'app/components/button';\nimport ButtonBar from 'app/components/buttonBar';\nimport NotFound from 'app/components/errors/notFound';\nimport EventOrGroupTitle from 'app/components/eventOrGroupTitle';\nimport {BorderlessEventEntries} from 'app/components/events/eventEntries';\nimport EventMessage from 'app/components/events/eventMessage';\nimport EventMetadata from 'app/components/events/eventMetadata';\nimport EventVitals from 'app/components/events/eventVitals';\nimport * as SpanEntryContext from 'app/components/events/interfaces/spans/context';\nimport OpsBreakdown from 'app/components/events/opsBreakdown';\nimport RootSpanStatus from 'app/components/events/rootSpanStatus';\nimport FileSize from 'app/components/fileSize';\nimport * as Layout from 'app/components/layouts/thirds';\nimport LoadingError from 'app/components/loadingError';\nimport LoadingIndicator from 'app/components/loadingIndicator';\nimport SentryDocumentTitle from 'app/components/sentryDocumentTitle';\nimport TagsTable from 'app/components/tagsTable';\nimport {IconOpen} from 'app/icons';\nimport {t} from 'app/locale';\nimport space from 'app/styles/space';\nimport {Organization, Project} from 'app/types';\nimport {Event, EventTag} from 'app/types/event';\nimport {trackAnalyticsEvent} from 'app/utils/analytics';\nimport EventView from 'app/utils/discover/eventView';\nimport {FIELD_TAGS} from 'app/utils/discover/fields';\nimport {eventDetailsRoute} from 'app/utils/discover/urls';\nimport {getMessage} from 'app/utils/events';\nimport * as QuickTraceContext from 'app/utils/performance/quickTrace/quickTraceContext';\nimport QuickTraceQuery from 'app/utils/performance/quickTrace/quickTraceQuery';\nimport TraceMetaQuery, {\n  TraceMetaQueryChildrenProps,\n} from 'app/utils/performance/quickTrace/traceMetaQuery';\nimport {QuickTraceQueryChildrenProps} from 'app/utils/performance/quickTrace/types';\nimport {getTraceTimeRangeFromEvent} from 'app/utils/performance/quickTrace/utils';\nimport Projects from 'app/utils/projects';\nimport EventMetas from 'app/views/performance/transactionDetails/eventMetas';\nimport {transactionSummaryRouteWithQuery} from 'app/views/performance/transactionSummary/utils';\n\nimport DiscoverBreadcrumb from '../breadcrumb';\nimport {generateTitle, getExpandedResults} from '../utils';\n\nimport LinkedIssue from './linkedIssue';\n\ntype Props = {\n  organization: Organization;\n  location: Location;\n  params: Params;\n  eventSlug: string;\n  eventView: EventView;\n};\n\ntype State = {\n  event: Event | undefined;\n  isSidebarVisible: boolean;\n} & AsyncComponent['state'];\n\nclass EventDetailsContent extends AsyncComponent<Props, State> {\n  state: State = {\n    // AsyncComponent state\n    loading: true,\n    reloading: false,\n    error: false,\n    errors: {},\n    event: undefined,\n\n    // local state\n    isSidebarVisible: true,\n  };\n\n  toggleSidebar = () => {\n    this.setState({isSidebarVisible: !this.state.isSidebarVisible});\n  };\n\n  getEndpoints(): ReturnType<AsyncComponent['getEndpoints']> {\n    const {organization, params, location, eventView} = this.props;\n    const {eventSlug} = params;\n\n    const query = eventView.getEventsAPIPayload(location);\n\n    // Fields aren't used, reduce complexity by omitting from query entirely\n    query.field = [];\n\n    const url = `/organizations/${organization.slug}/events/${eventSlug}/`;\n\n    // Get a specific event. This could be coming from\n    // a paginated group or standalone event.\n    return [['event', url, {query}]];\n  }\n\n  get projectId() {\n    return this.props.eventSlug.split(':')[0];\n  }\n\n  generateTagKey = (tag: EventTag) => {\n    // Some tags may be normalized from context, but not all of them are.\n    // This supports a user making a custom tag with the same name as one\n    // that comes from context as all of these are also tags.\n    if (tag.key in FIELD_TAGS) {\n      return `tags[${tag.key}]`;\n    }\n    return tag.key;\n  };\n\n  generateTagUrl = (tag: EventTag) => {\n    const {eventView, organization} = this.props;\n    const {event} = this.state;\n    if (!event) {\n      return '';\n    }\n    const eventReference = {...event};\n    if (eventReference.id) {\n      delete (eventReference as any).id;\n    }\n    const tagKey = this.generateTagKey(tag);\n    const nextView = getExpandedResults(eventView, {[tagKey]: tag.value}, eventReference);\n    return nextView.getResultsViewUrlTarget(organization.slug);\n  };\n\n  renderBody() {\n    const {event} = this.state;\n\n    if (!event) {\n      return <NotFound />;\n    }\n\n    return this.renderContent(event);\n  }\n\n  renderContent(event: Event) {\n    const {organization, location, eventView} = this.props;\n    const {isSidebarVisible} = this.state;\n\n    // metrics\n    trackAnalyticsEvent({\n      eventKey: 'discover_v2.event_details',\n      eventName: 'Discoverv2: Opened Event Details',\n      event_type: event.type,\n      organization_id: parseInt(organization.id, 10),\n    });\n\n    const transactionName = event.tags.find(tag => tag.key === 'transaction')?.value;\n    const transactionSummaryTarget =\n      event.type === 'transaction' && transactionName\n        ? transactionSummaryRouteWithQuery({\n            orgSlug: organization.slug,\n            transaction: transactionName,\n            projectID: event.projectID,\n            query: location.query,\n          })\n        : null;\n\n    const eventJsonUrl = `/api/0/projects/${organization.slug}/${this.projectId}/events/${event.eventID}/json/`;\n\n    const renderContent = (\n      results?: QuickTraceQueryChildrenProps,\n      metaResults?: TraceMetaQueryChildrenProps\n    ) => (\n      <React.Fragment>\n        <Layout.Header>\n          <Layout.HeaderContent>\n            <DiscoverBreadcrumb\n              eventView={eventView}\n              event={event}\n              organization={organization}\n              location={location}\n            />\n            <EventHeader event={event} />\n          </Layout.HeaderContent>\n          <Layout.HeaderActions>\n            <ButtonBar gap={1}>\n              <Button onClick={this.toggleSidebar}>\n                {isSidebarVisible ? 'Hide Details' : 'Show Details'}\n              </Button>\n              {results && (\n                <Button icon={<IconOpen />} href={eventJsonUrl} external>\n                  {t('JSON')} (<FileSize bytes={event.size} />)\n                </Button>\n              )}\n              {transactionSummaryTarget && (\n                <Feature organization={organization} features={['performance-view']}>\n                  {({hasFeature}) => (\n                    <Button\n                      disabled={!hasFeature}\n                      priority=\"primary\"\n                      to={transactionSummaryTarget}\n                    >\n                      {t('Go to Summary')}\n                    </Button>\n                  )}\n                </Feature>\n              )}\n            </ButtonBar>\n          </Layout.HeaderActions>\n        </Layout.Header>\n        <Layout.Body>\n          {results && (\n            <Layout.Main fullWidth>\n              <EventMetas\n                quickTrace={results}\n                meta={metaResults?.meta ?? null}\n                event={event}\n                organization={organization}\n                projectId={this.projectId}\n                location={location}\n                errorDest=\"discover\"\n                transactionDest=\"discover\"\n              />\n            </Layout.Main>\n          )}\n          <Layout.Main fullWidth={!isSidebarVisible}>\n            <Projects orgId={organization.slug} slugs={[this.projectId]}>\n              {({projects, initiallyLoaded}) =>\n                initiallyLoaded ? (\n                  <SpanEntryContext.Provider\n                    value={{\n                      getViewChildTransactionTarget: childTransactionProps => {\n                        const childTransactionLink = eventDetailsRoute({\n                          eventSlug: childTransactionProps.eventSlug,\n                          orgSlug: organization.slug,\n                        });\n\n                        return {\n                          pathname: childTransactionLink,\n                          query: eventView.generateQueryStringObject(),\n                        };\n                      },\n                    }}\n                  >\n                    <QuickTraceContext.Provider value={results}>\n                      <BorderlessEventEntries\n                        organization={organization}\n                        event={event}\n                        project={projects[0] as Project}\n                        location={location}\n                        showExampleCommit={false}\n                        showTagSummary={false}\n                        api={this.api}\n                      />\n                    </QuickTraceContext.Provider>\n                  </SpanEntryContext.Provider>\n                ) : (\n                  <LoadingIndicator />\n                )\n              }\n            </Projects>\n          </Layout.Main>\n          {isSidebarVisible && (\n            <Layout.Side>\n              {results === undefined && (\n                <React.Fragment>\n                  <EventMetadata\n                    event={event}\n                    organization={organization}\n                    projectId={this.projectId}\n                  />\n                  <RootSpanStatus event={event} />\n                  <OpsBreakdown event={event} />\n                </React.Fragment>\n              )}\n              <EventVitals event={event} />\n              {event.groupID && (\n                <LinkedIssue groupId={event.groupID} eventId={event.eventID} />\n              )}\n              <TagsTable\n                generateUrl={this.generateTagUrl}\n                event={event}\n                query={eventView.query}\n              />\n            </Layout.Side>\n          )}\n        </Layout.Body>\n      </React.Fragment>\n    );\n\n    const hasQuickTraceView =\n      organization.features.includes('trace-view-quick') ||\n      organization.features.includes('trace-view-summary');\n\n    if (hasQuickTraceView) {\n      const traceId = event.contexts?.trace?.trace_id ?? '';\n      const {start, end} = getTraceTimeRangeFromEvent(event);\n\n      return (\n        <TraceMetaQuery\n          location={location}\n          orgSlug={organization.slug}\n          traceId={traceId}\n          start={start}\n          end={end}\n        >\n          {metaResults => (\n            <QuickTraceQuery\n              event={event}\n              location={location}\n              orgSlug={organization.slug}\n            >\n              {results => renderContent(results, metaResults)}\n            </QuickTraceQuery>\n          )}\n        </TraceMetaQuery>\n      );\n    }\n\n    return renderContent();\n  }\n\n  renderError(error: Error) {\n    const notFound = Object.values(this.state.errors).find(\n      resp => resp && resp.status === 404\n    );\n    const permissionDenied = Object.values(this.state.errors).find(\n      resp => resp && resp.status === 403\n    );\n\n    if (notFound) {\n      return <NotFound />;\n    }\n    if (permissionDenied) {\n      return (\n        <LoadingError message={t('You do not have permission to view that event.')} />\n      );\n    }\n\n    return super.renderError(error, true, true);\n  }\n\n  getEventSlug = (): string => {\n    const {eventSlug} = this.props.params;\n\n    if (typeof eventSlug === 'string') {\n      return eventSlug.trim();\n    }\n\n    return '';\n  };\n\n  renderComponent() {\n    const {eventView, organization} = this.props;\n    const {event} = this.state;\n    const eventSlug = this.getEventSlug();\n    const projectSlug = eventSlug.split(':')[0];\n\n    const title = generateTitle({eventView, event, organization});\n\n    return (\n      <SentryDocumentTitle\n        title={title}\n        orgSlug={organization.slug}\n        projectSlug={projectSlug}\n      >\n        {super.renderComponent()}\n      </SentryDocumentTitle>\n    );\n  }\n}\n\nconst EventHeader = ({event}: {event: Event}) => {\n  const message = getMessage(event);\n  return (\n    <EventHeaderContainer data-test-id=\"event-header\">\n      <TitleWrapper>\n        <EventOrGroupTitle data={event} />\n      </TitleWrapper>\n      {message && (\n        <MessageWrapper>\n          <EventMessage message={message} />\n        </MessageWrapper>\n      )}\n    </EventHeaderContainer>\n  );\n};\n\nconst EventHeaderContainer = styled('div')`\n  max-width: ${p => p.theme.breakpoints[0]};\n`;\n\nconst TitleWrapper = styled('div')`\n  font-size: ${p => p.theme.headerFontSize};\n  margin-top: 20px;\n`;\n\nconst MessageWrapper = styled('div')`\n  margin-top: ${space(1)};\n`;\n\nexport default EventDetailsContent;\n","import React from 'react';\nimport {Params} from 'react-router/lib/Router';\nimport styled from '@emotion/styled';\nimport {Location} from 'history';\n\nimport LightWeightNoProjectMessage from 'app/components/lightWeightNoProjectMessage';\nimport SentryDocumentTitle from 'app/components/sentryDocumentTitle';\nimport {t} from 'app/locale';\nimport {PageContent} from 'app/styles/organization';\nimport {Organization} from 'app/types';\nimport EventView from 'app/utils/discover/eventView';\nimport withOrganization from 'app/utils/withOrganization';\n\nimport EventDetailsContent from './content';\n\ntype Props = {\n  organization: Organization;\n  location: Location;\n  params: Params;\n};\n\nclass EventDetails extends React.Component<Props> {\n  getEventSlug = (): string => {\n    const {eventSlug} = this.props.params;\n\n    if (typeof eventSlug === 'string') {\n      return eventSlug.trim();\n    }\n\n    return '';\n  };\n\n  getEventView = (): EventView => {\n    const {location} = this.props;\n\n    return EventView.fromLocation(location);\n  };\n\n  getDocumentTitle = (name: string | undefined): Array<string> =>\n    typeof name === 'string' && String(name).trim().length > 0\n      ? [String(name).trim(), t('Discover')]\n      : [t('Discover')];\n\n  render() {\n    const {organization, location, params} = this.props;\n    const eventView = this.getEventView();\n    const eventSlug = this.getEventSlug();\n\n    const documentTitle = this.getDocumentTitle(eventView.name).join(' - ');\n    const projectSlug = eventSlug.split(':')[0];\n\n    return (\n      <SentryDocumentTitle\n        title={documentTitle}\n        orgSlug={organization.slug}\n        projectSlug={projectSlug}\n      >\n        <StyledPageContent>\n          <LightWeightNoProjectMessage organization={organization}>\n            <EventDetailsContent\n              organization={organization}\n              location={location}\n              params={params}\n              eventView={eventView}\n              eventSlug={eventSlug}\n            />\n          </LightWeightNoProjectMessage>\n        </StyledPageContent>\n      </SentryDocumentTitle>\n    );\n  }\n}\n\nexport default withOrganization(EventDetails);\n\nconst StyledPageContent = styled(PageContent)`\n  padding: 0;\n`;\n"],"sourceRoot":""}