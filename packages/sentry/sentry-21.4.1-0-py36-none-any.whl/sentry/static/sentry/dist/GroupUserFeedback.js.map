{"version":3,"sources":["webpack:///./app/components/activity/author.tsx","webpack:///./app/components/activity/item/avatar.tsx","webpack:///./app/components/activity/item/bubble.tsx","webpack:///./app/components/activity/item/index.tsx","webpack:///./app/components/events/userFeedback.tsx","webpack:///./app/components/onboardingPanel.tsx","webpack:///./app/views/organizationGroupDetails/groupUserFeedback.tsx","webpack:///./app/views/userFeedback/userFeedbackEmpty.tsx","webpack:///./images/spot/feedback-empty-state.svg"],"names":["p","theme","fontSizeMedium","ActivityAvatar","className","type","user","size","SystemAvatar","StyledIconSentry","width","height","shape","textColor","background","IconSentry","backgroundColor","borderColor","border","borderRadius","ActivityItem","author","avatarSize","bubbleProps","children","date","interval","footer","id","header","hideDate","showTime","showDate","showRange","dateEnded","moment","add","utc","format","undefined","timeOnly","Boolean","ActivityItemWrapper","data-test-id","StyledActivityAvatar","StyledActivityBubble","isRenderFunc","ActivityHeader","ActivityHeaderContent","StyledTimeSince","StyledDateTime","StyledDateTimeWindow","timeAndDate","ActivityBody","ActivityFooter","space","HeaderAndFooter","textStyles","TimeSince","gray300","DateTime","ActivityBubble","EventUserFeedback","this","props","report","orgId","issueId","eventID","name","email","username","ip_address","dateCreated","value","Email","StyledIconCopy","ViewEventLink","to","getUrl","t","dangerouslySetInnerHTML","__html","nl2br","escape","comments","React","fontSizeSmall","Link","IconCopy","OnboardingPanel","image","Container","IlloBox","StyledBox","breakpoints","GroupUserFeedback","loading","error","reportList","pageLinks","setState","fetchGroupUserReports","group","params","cursor","location","query","then","data","jqXHR","getResponseHeader","fetchData","prevProps","isEqual","pathname","search","state","organization","onRetry","length","map","item","idx","key","slug","projectIds","project","withOrganization","UserFeedbackEmpty","window","sentryEmbedCallback","embed","submit","_body","_submitInProgress","setTimeout","onSuccess","hasAnyFeedback","trackAdhocEvent","eventKey","org_id","parseInt","projects","filter","includes","selectedProjects","some","hasUserReports","eventName","trackAnalyticsEvent","organization_id","loadingProjects","src","emptyStateImg","ButtonList","gap","external","priority","onClick","trackAnalytics","href","platform","Sentry","eventId","ButtonBar","withProjects","module","exports"],"mappings":"sJAOA,SALuB,E,0EAAA,GAAO,OAAP,6CAAH,8BAEL,SAAAA,GAAC,OAAIA,EAAEC,MAAMC,iBAFR,M,2XCapB,SAASC,EAAT,GAAmE,IAA1CC,EAA0C,EAA1CA,UAAWC,EAA+B,EAA/BA,KAAMC,EAAyB,EAAzBA,KAAyB,IAAnBC,YAAmB,MAAZ,GAAY,EACjE,OAAID,GACK,QAAC,IAAD,CAAYA,KAAMA,EAAMC,KAAMA,EAAMH,UAAWA,IAG3C,WAATC,GAGA,QAACG,EAAD,CAAcJ,UAAWA,EAAWG,KAAMA,IACxC,QAACE,EAAD,CAAkBF,KAAK,SAM3B,QAAC,IAAD,CACEH,UAAWA,EACXM,MAAK,UAAKH,EAAL,MACLI,OAAM,UAAKJ,EAAL,MACNK,MAAM,WAnBHT,E,6BAwBT,UAMA,IAAMK,GAAe,OAAO,OAAP,0CAAH,iEAIP,SAAAR,GAAC,OAAIA,EAAEO,OAJA,cAKN,SAAAP,GAAC,OAAIA,EAAEO,OALD,wBAMI,SAAAP,GAAC,OAAIA,EAAEC,MAAMY,YANjB,WAOP,SAAAb,GAAC,OAAIA,EAAEC,MAAMa,aAPN,uBAWZL,GAAmB,OAAOM,KAAP,8CAAH,+C,6dCVtB,SAnCuB,OAAO,MAAP,4CAAH,4BAEE,SAAAf,GAAC,OAAIA,EAAEgB,iBAAmBhB,EAAEC,MAAMa,aAFpC,sBAGE,SAAAd,GAAC,OAAIA,EAAEiB,aAAejB,EAAEC,MAAMiB,SAHhC,mBAID,SAAAlB,GAAC,OAAIA,EAAEC,MAAMkB,eAJZ,iLAeU,SAAAnB,GAAC,OAAIA,EAAEiB,aAAejB,EAAEC,MAAMiB,SAfxC,yLA4BU,SAAAlB,GAAC,OAAIA,EAAEgB,iBAAmBhB,EAAEC,MAAMa,aA5B5C,2C,kEC0DpB,SAASM,EAAT,GAaU,IAZRC,EAYQ,EAZRA,OACAC,EAWQ,EAXRA,WACAC,EAUQ,EAVRA,YACAnB,EASQ,EATRA,UACAoB,EAQQ,EARRA,SACAC,EAOQ,EAPRA,KACAC,EAMQ,EANRA,SACAC,EAKQ,EALRA,OACAC,EAIQ,EAJRA,GACAC,EAGQ,EAHRA,OAGQ,IAFRC,gBAEQ,aADRC,gBACQ,SACFC,GAAYF,GAAYL,IAASC,EACjCO,GAAaH,GAAYL,GAAQC,EACjCQ,EAAYD,EACdE,IAAOV,GAAMW,IAAIV,EAAU,WAAWW,MAAMC,cAC5CC,EACEC,EAAWC,QACfhB,GAAQS,GAAaC,IAAOV,GAAMA,SAAWU,IAAOD,GAAWT,QAGjE,OACE,QAACiB,EAAD,CAAqBC,eAAa,gBAAgBvC,UAAWA,GAC1DwB,IAAM,aAAGA,GAAIA,IAEbP,IACC,QAACuB,EAAD,CAAsBvC,KAAMgB,EAAOhB,KAAMC,KAAMe,EAAOf,KAAMC,KAAMe,KAGpE,QAACuB,EAAyBtB,EACvBM,IAAUiB,OAA4BjB,IAAWA,IACjDA,KAAWiB,OAA4BjB,KACtC,QAACkB,EAAD,MACE,QAACC,EAAD,KAAwBnB,GACvBJ,GAAQO,IAAaD,IAAY,QAACkB,EAAD,CAAiBxB,KAAMA,IACxDA,GAAQO,GAAYD,IAAY,QAACmB,EAAD,CAAgBV,UAAQ,EAACf,KAAMA,IAE/DQ,IACC,QAACkB,EAAD,MACE,QAACD,EAAD,CAAgBV,SAAUA,EAAUY,aAAcZ,EAAUf,KAAMA,IACjE,OACD,QAACyB,EAAD,CACEV,SAAUA,EACVY,aAAcZ,EACdf,KAAMS,MAOfV,IAAYsB,OAA4BtB,IAAaA,IACrDA,KAAasB,OAA4BtB,KACxC,QAAC6B,EAAD,KAAe7B,GAGhBG,IAAUmB,OAA4BnB,IAAWA,IACjDA,KAAWmB,OAA4BnB,KACtC,QAAC2B,EAAD,KAAiB3B,KA5DlBP,E,2BAmET,IAAMsB,GAAsB,OAAO,MAAP,iDAAH,+BAENa,OAAM,GAFA,KAKnBC,GAAkB,OAAO,MAAP,6CAAH,gBACJD,OAAM,GADF,KAIfR,GAAiB,OAAOS,EAAP,4CAAH,yCAES,SAAAxD,GAAC,OAAIA,EAAEC,MAAMiB,SAFtB,eAGL,SAAAlB,GAAC,OAAIA,EAAEC,MAAMC,iBAHR,sCAUd8C,GAAwB,OAAO,MAAP,mDAAH,mCAIrBM,GAAiB,OAAOE,EAAP,4CAAH,sCAEM,SAAAxD,GAAC,OAAIA,EAAEC,MAAMiB,SAFnB,eAGL,SAAAlB,GAAC,OAAIA,EAAEC,MAAMC,iBAHR,KAMdmD,GAAe,OAAO,MAAP,0CAAH,YACLE,OAAM,GADD,KACOA,OAAM,GADb,IAEdE,KAGEb,GAAuB,OAAOzC,IAAP,kDAAH,iBACRoD,OAAM,GADE,KAIpBN,GAAkB,OAAOS,IAAP,6CAAH,UACV,SAAA1D,GAAC,OAAIA,EAAEC,MAAM0D,UADH,KAIfT,GAAiB,OAAOU,IAAP,4CAAH,UACT,SAAA5D,GAAC,OAAIA,EAAEC,MAAM0D,UADJ,KAIdR,GAAuB,OAAO,MAAP,kDAAH,UACf,SAAAnD,GAAC,OAAIA,EAAEC,MAAM0D,UADE,KAIpBd,GAAuB,OAAOgB,EAAP,mDAAH,+DAK1B,W,o3BC3KMC,E,wiBACJ,WAAS,MAC0BC,KAAKC,MAA/BC,EADA,EACAA,OAAQC,EADR,EACQA,MAAOC,EADf,EACeA,QAEtB,+BAAyBD,EAAzB,mBAAyCC,EAAzC,mBAA2DF,EAAOG,QAAlE,O,oBAGF,WAAS,MACqBL,KAAKC,MAA1B5D,EADA,EACAA,UAAW6D,EADX,EACWA,OACZ3D,EAAO2D,EAAO3D,MAAQ,CAC1B+D,KAAMJ,EAAOI,KACbC,MAAOL,EAAOK,MACd1C,GAAI,GACJ2C,SAAU,GACVC,WAAY,IAGd,OACE,eAAKpE,UAAWA,IACd,QAAC,IAAD,CACEqB,KAAMwC,EAAOQ,YACbpD,OAAQ,CAAChB,KAAM,OAAQC,QACvBuB,QACE,oBACE,QAAC,IAAD,KAAiBoC,EAAOI,OACxB,QAAC,IAAD,CAAWK,MAAOT,EAAOK,QACvB,QAACK,EAAD,KACGV,EAAOK,OACR,QAACM,EAAD,CAAgBrE,KAAK,SAGxB0D,EAAOG,UACN,QAACS,EAAD,CAAeC,GAAIf,KAAKgB,WAAWC,OAAE,kBAK3C,aACEC,wBAAyB,CACvBC,QAAQC,SAAMC,QAAOnB,EAAOoB,oB,GAvCVC,aAA1BxB,E,gCAgDN,UAEA,IAAMa,GAAQ,OAAO,OAAP,mCAAH,cACI,SAAA3E,GAAC,OAAIA,EAAEC,MAAMsF,gBADjB,mDAIMhC,OAAM,GAJZ,KAOLsB,GAAgB,OAAOW,IAAP,2CAAH,gCAEFjC,OAAM,GAFJ,qBAMbqB,GAAiB,OAAOa,KAAP,4CAAH,gBACHlC,OAAM,GADH,M,0UCxEpB,SAASmC,EAAT,GAA8D,IAApCtF,EAAoC,EAApCA,UAAWuF,EAAyB,EAAzBA,MAAOnE,EAAkB,EAAlBA,SAC1C,OACE,QAAC,KAAD,CAAOpB,UAAWA,IAChB,QAACwF,EAAD,MACE,QAACC,EAAD,KAAUF,IACV,QAACG,EAAD,KAAYtE,KALXkE,E,8BAWT,IAAME,GAAY,OAAO,MAAP,wCAAH,YACFrC,OAAM,GADJ,yCAIQ,SAAAvD,GAAC,OAAIA,EAAEC,MAAM8F,YAAY,KAJjC,kKAeQ,SAAA/F,GAAC,OAAIA,EAAEC,MAAM8F,YAAY,KAfjC,wBAoBTD,GAAY,OAAO,MAAP,wCAAH,gCAGQ,SAAA9F,GAAC,OAAIA,EAAEC,MAAM8F,YAAY,KAHjC,cAQTF,GAAU,OAAOC,EAAP,sCAAH,8DAIDvC,OAAM,GAJL,4BAMU,SAAAvD,GAAC,OAAIA,EAAEC,MAAM8F,YAAY,KANnC,oBAQCxC,OAAM,GARP,qBAab,W,oyDC7BMyC,E,wnBACW,CACbC,SAAS,EACTC,OAAO,EACPC,WAAY,GACZC,UAAW,M,+BAiBD,WACV,EAAKC,SAAS,CACZJ,SAAS,EACTC,OAAO,KAGTI,QAAsB,EAAKtC,MAAMuC,MAAM3E,GAAlB,OAChB,EAAKoC,MAAMwC,QADK,IAEnBC,OAAQ,EAAKzC,MAAM0C,SAASC,MAAMF,QAAU,MAE3CG,MAAK,YAAsB,mBAApBC,EAAoB,KAAXC,GAAW,WAC1B,EAAKT,SAAS,CACZH,OAAO,EACPD,SAAS,EACTE,WAAYU,EACZT,UAAWU,aAAF,EAAEA,EAAOC,kBAAkB,aAT1C,OAYS,WACL,EAAKV,SAAS,CACZH,OAAO,EACPD,SAAS,U,kDAnCjB,WACElC,KAAKiD,c,gCAGP,SAAmBC,GAEdC,IAAQD,EAAUT,OAAQzC,KAAKC,MAAMwC,SACtCS,EAAUP,SAASS,WAAapD,KAAKC,MAAM0C,SAASS,UACpDF,EAAUP,SAASU,SAAWrD,KAAKC,MAAM0C,SAASU,QAElDrD,KAAKiD,c,oBA8BT,WAAS,MAC8BjD,KAAKsD,MAAnClB,EADA,EACAA,WAAYF,EADZ,EACYA,QAASC,EADrB,EACqBA,MADrB,EAEuBnC,KAAKC,MAA5BsD,EAFA,EAEAA,aAAcf,EAFd,EAEcA,MAErB,OAAIN,GACK,QAAC,IAAD,MAGLC,GACK,QAAC,IAAD,CAAcqB,QAASxD,KAAKiD,YAGjCb,EAAWqB,QAEX,eAAKpH,UAAU,QACb,eAAKA,UAAU,YACZ+F,EAAWsB,KAAI,SAACC,EAAMC,GAAP,OACd,QAAC,IAAD,CACEC,IAAKD,EACL1D,OAAQyD,EACRxD,MAAOoD,EAAaO,KACpB1D,QAASoC,EAAM3E,SAGnB,QAAC,KAAD,QAAYwE,UAAWrC,KAAKsD,MAAMjB,WAAerC,KAAKC,WAO5D,QAAC,KAAD,MACE,QAAC,IAAD,CAAmB8D,WAAY,CAACvB,EAAMwB,QAAQnG,W,GAhFtB0D,aAA1BU,E,gCAsFN,SAAegC,OAAiBhC,I,w/BCjG1BiC,E,mjBACJ,WAAoB,MACiBlE,KAAKC,MAAjCsD,EADW,EACXA,aAAcQ,EADH,EACGA,WAErBI,OAAOC,oBAAsB,SAAUC,GAGrCA,EAAMC,OAAS,SAAUC,GAAO,WAC9BvE,KAAKwE,mBAAoB,EACzBC,YAAW,WACT,EAAKD,mBAAoB,EACzB,EAAKE,cACJ,QAIqB,IAAxB1E,KAAK2E,iBAEPC,QAAgB,CACdC,SAAU,uBACVC,OAAQC,SAASxB,EAAa1F,GAAI,IAClCmH,SAAUjB,M,kCAKhB,WACEI,OAAOC,oBAAsB,O,4BAG/B,WAAuB,MACUpE,KAAKC,MAA7B+E,EADc,EACdA,SAAUjB,EADI,EACJA,WAEjB,OAAOA,GAAcA,EAAWN,OAC5BuB,EAASC,QAAO,gBAAEpH,EAAF,EAAEA,GAAF,OAAUkG,EAAWmB,SAASrH,MAC9CmH,I,0BAGN,WACE,OAAOhF,KAAKmF,iBAAiBC,MAAK,qBAAEC,oB,4BAGtC,YAA6E,IAA7DR,EAA6D,EAA7DA,SAAUS,EAAmD,EAAnDA,UAAmD,EACxCtF,KAAKC,MAAjCsD,EADoE,EACpEA,aAAcQ,EADsD,EACtDA,YAErBwB,QAAoB,CAClBV,WACAS,YACAE,gBAAiBjC,EAAa1F,GAC9BmH,SAAUjB,M,oBAId,WAAS,aAEP,OAAI/D,KAAKC,MAAMwF,kBAA2C,IAAxBzF,KAAK2E,gBAEnC,QAAC,IAAD,MACE,kBAAI1D,OAAE,iDAMV,QAAC,IAAD,CAAiBW,OAAO,eAAK8D,IAAKC,QAChC,mBAAK1E,OAAE,0BACP,kBACGA,OAAE,sIAIL,QAAC2E,EAAD,CAAYC,IAAK,IACf,QAAC,KAAD,CACEC,UAAQ,EACRC,SAAS,UACTC,QAAS,kBACP,EAAKC,eAAe,CAClBpB,SAAU,6BACVS,UAAW,gCAGfY,KAAI,6GAA8FlG,KAAKmF,iBAAiB,UAApH,aAA8F,EAA0BgB,YAE3HlF,OAAE,mBAEL,QAAC,KAAD,CACE+E,QAAS,WACPI,KAAwB,CAEtBC,QAAS,qCAGX,EAAKJ,eAAe,CAClBpB,SAAU,8BACVS,UAAW,mCAIdrE,OAAE,yB,GAlGiBM,aAA1B2C,E,gCA0GN,IAAM0B,GAAa,OAAOU,IAAP,wCAAH,6FAMhB,SAAerC,QAAiBsC,OAAarC,K,mDCvI7CsC,EAAOC,QAAU,IAA0B","file":"GroupUserFeedback.a1185192073a27d3c3db.js","sourcesContent":["import styled from '@emotion/styled';\n\nconst ActivityAuthor = styled('span')`\n  font-weight: 600;\n  font-size: ${p => p.theme.fontSizeMedium};\n`;\n\nexport default ActivityAuthor;\n","import React from 'react';\nimport styled from '@emotion/styled';\n\nimport UserAvatar from 'app/components/avatar/userAvatar';\nimport Placeholder from 'app/components/placeholder';\nimport {IconSentry} from 'app/icons';\nimport {AvatarUser} from 'app/types';\n\ntype Props = {\n  type: 'system' | 'user';\n  user?: AvatarUser;\n  className?: string;\n  size?: number;\n};\n\nfunction ActivityAvatar({className, type, user, size = 38}: Props) {\n  if (user) {\n    return <UserAvatar user={user} size={size} className={className} />;\n  }\n\n  if (type === 'system') {\n    // Return Sentry avatar\n    return (\n      <SystemAvatar className={className} size={size}>\n        <StyledIconSentry size=\"md\" />\n      </SystemAvatar>\n    );\n  }\n\n  return (\n    <Placeholder\n      className={className}\n      width={`${size}px`}\n      height={`${size}px`}\n      shape=\"circle\"\n    />\n  );\n}\n\nexport default ActivityAvatar;\n\ntype SystemAvatarProps = {\n  size: number;\n};\n\nconst SystemAvatar = styled('span')<SystemAvatarProps>`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: ${p => p.size}px;\n  height: ${p => p.size}px;\n  background-color: ${p => p.theme.textColor};\n  color: ${p => p.theme.background};\n  border-radius: 50%;\n`;\n\nconst StyledIconSentry = styled(IconSentry)`\n  padding-bottom: 3px;\n`;\n","import styled from '@emotion/styled';\n\ntype Props = {\n  backgroundColor?: string;\n  borderColor?: string;\n};\n\n/**\n * This creates a bordered box that has a left pointing arrow\n * on the left-side at the top.\n */\nconst ActivityBubble = styled('div')<Props>`\n  flex: 1;\n  background-color: ${p => p.backgroundColor || p.theme.background};\n  border: 1px solid ${p => p.borderColor || p.theme.border};\n  border-radius: ${p => p.theme.borderRadius};\n  position: relative;\n  width: 100%; /* this is used in Incidents Details - a chart can cause overflow and won't resize properly */\n\n  &:before {\n    display: block;\n    content: '';\n    width: 0;\n    height: 0;\n    border-top: 7px solid transparent;\n    border-bottom: 7px solid transparent;\n    border-right: 7px solid ${p => p.borderColor || p.theme.border};\n    position: absolute;\n    left: -7px;\n    top: 12px;\n  }\n\n  &:after {\n    display: block;\n    content: '';\n    width: 0;\n    height: 0;\n    border-top: 6px solid transparent;\n    border-bottom: 6px solid transparent;\n    border-right: 6px solid ${p => p.backgroundColor || p.theme.background};\n    position: absolute;\n    left: -6px;\n    top: 13px;\n  }\n`;\n\nexport default ActivityBubble;\n","import React from 'react';\nimport styled from '@emotion/styled';\nimport moment from 'moment-timezone';\n\nimport DateTime from 'app/components/dateTime';\nimport TimeSince from 'app/components/timeSince';\nimport space from 'app/styles/space';\nimport textStyles from 'app/styles/text';\nimport {AvatarUser} from 'app/types';\nimport {isRenderFunc} from 'app/utils/isRenderFunc';\n\nimport ActivityAvatar from './avatar';\nimport ActivityBubble from './bubble';\n\nexport type ActivityAuthorType = 'user' | 'system';\n\ntype ChildFunction = () => React.ReactNode;\n\ntype Props = {\n  children?: React.ReactChild | ChildFunction;\n  className?: string;\n  /**\n   * This is used to uniquely identify the activity item for use as an anchor\n   */\n  id?: string;\n\n  /**\n   * If supplied, will show the time that the activity started\n   */\n  date?: string | Date;\n\n  /**\n   * If supplied, will show the interval that the activity occurred in\n   */\n  interval?: number;\n\n  /**\n   * Used to render an avatar for the author. Currently can be a user, otherwise\n   * defaults as a \"system\" avatar (i.e. sentry)\n   *\n   * `user` is required if `type` is \"user\"\n   */\n  author?: {\n    type: ActivityAuthorType;\n    user?: AvatarUser;\n  };\n\n  // Size of the avatar.\n  avatarSize?: number;\n\n  // Hides date in header\n  hideDate?: boolean;\n\n  // Instead of showing a relative time/date, show the time\n  showTime?: boolean;\n\n  /**\n   * Can be a react node or a render function. render function will not include default wrapper\n   */\n  header?: React.ReactNode | ChildFunction;\n\n  /**\n   * Can be a react node or a render function. render function will not include default wrapper\n   */\n  footer?: React.ReactNode | ChildFunction;\n\n  bubbleProps?: React.ComponentProps<typeof ActivityBubble>;\n};\n\nfunction ActivityItem({\n  author,\n  avatarSize,\n  bubbleProps,\n  className,\n  children,\n  date,\n  interval,\n  footer,\n  id,\n  header,\n  hideDate = false,\n  showTime = false,\n}: Props) {\n  const showDate = !hideDate && date && !interval;\n  const showRange = !hideDate && date && interval;\n  const dateEnded = showRange\n    ? moment(date).add(interval, 'minutes').utc().format()\n    : undefined;\n  const timeOnly = Boolean(\n    date && dateEnded && moment(date).date() === moment(dateEnded).date()\n  );\n\n  return (\n    <ActivityItemWrapper data-test-id=\"activity-item\" className={className}>\n      {id && <a id={id} />}\n\n      {author && (\n        <StyledActivityAvatar type={author.type} user={author.user} size={avatarSize} />\n      )}\n\n      <StyledActivityBubble {...bubbleProps}>\n        {header && isRenderFunc<ChildFunction>(header) && header()}\n        {header && !isRenderFunc<ChildFunction>(header) && (\n          <ActivityHeader>\n            <ActivityHeaderContent>{header}</ActivityHeaderContent>\n            {date && showDate && !showTime && <StyledTimeSince date={date} />}\n            {date && showDate && showTime && <StyledDateTime timeOnly date={date} />}\n\n            {showRange && (\n              <StyledDateTimeWindow>\n                <StyledDateTime timeOnly={timeOnly} timeAndDate={!timeOnly} date={date} />\n                {' — '}\n                <StyledDateTime\n                  timeOnly={timeOnly}\n                  timeAndDate={!timeOnly}\n                  date={dateEnded}\n                />\n              </StyledDateTimeWindow>\n            )}\n          </ActivityHeader>\n        )}\n\n        {children && isRenderFunc<ChildFunction>(children) && children()}\n        {children && !isRenderFunc<ChildFunction>(children) && (\n          <ActivityBody>{children}</ActivityBody>\n        )}\n\n        {footer && isRenderFunc<ChildFunction>(footer) && footer()}\n        {footer && !isRenderFunc<ChildFunction>(footer) && (\n          <ActivityFooter>{footer}</ActivityFooter>\n        )}\n      </StyledActivityBubble>\n    </ActivityItemWrapper>\n  );\n}\n\nconst ActivityItemWrapper = styled('div')`\n  display: flex;\n  margin-bottom: ${space(2)};\n`;\n\nconst HeaderAndFooter = styled('div')`\n  padding: 6px ${space(2)};\n`;\n\nconst ActivityHeader = styled(HeaderAndFooter)`\n  display: flex;\n  border-bottom: 1px solid ${p => p.theme.border};\n  font-size: ${p => p.theme.fontSizeMedium};\n\n  &:last-child {\n    border-bottom: none;\n  }\n`;\n\nconst ActivityHeaderContent = styled('div')`\n  flex: 1;\n`;\n\nconst ActivityFooter = styled(HeaderAndFooter)`\n  display: flex;\n  border-top: 1px solid ${p => p.theme.border};\n  font-size: ${p => p.theme.fontSizeMedium};\n`;\n\nconst ActivityBody = styled('div')`\n  padding: ${space(2)} ${space(2)};\n  ${textStyles}\n`;\n\nconst StyledActivityAvatar = styled(ActivityAvatar)`\n  margin-right: ${space(1)};\n`;\n\nconst StyledTimeSince = styled(TimeSince)`\n  color: ${p => p.theme.gray300};\n`;\n\nconst StyledDateTime = styled(DateTime)`\n  color: ${p => p.theme.gray300};\n`;\n\nconst StyledDateTimeWindow = styled('div')`\n  color: ${p => p.theme.gray300};\n`;\n\nconst StyledActivityBubble = styled(ActivityBubble)`\n  width: 75%;\n  overflow-wrap: break-word;\n`;\n\nexport default ActivityItem;\n","import React from 'react';\nimport styled from '@emotion/styled';\n\nimport ActivityAuthor from 'app/components/activity/author';\nimport ActivityItem from 'app/components/activity/item';\nimport Clipboard from 'app/components/clipboard';\nimport Link from 'app/components/links/link';\nimport {IconCopy} from 'app/icons';\nimport {t} from 'app/locale';\nimport space from 'app/styles/space';\nimport {UserReport} from 'app/types';\nimport {escape, nl2br} from 'app/utils';\n\ntype Props = {\n  report: UserReport;\n  orgId: string;\n  issueId: string;\n  className?: string;\n};\n\nclass EventUserFeedback extends React.Component<Props> {\n  getUrl() {\n    const {report, orgId, issueId} = this.props;\n\n    return `/organizations/${orgId}/issues/${issueId}/events/${report.eventID}/`;\n  }\n\n  render() {\n    const {className, report} = this.props;\n    const user = report.user || {\n      name: report.name,\n      email: report.email,\n      id: '',\n      username: '',\n      ip_address: '',\n    };\n\n    return (\n      <div className={className}>\n        <ActivityItem\n          date={report.dateCreated}\n          author={{type: 'user', user}}\n          header={\n            <div>\n              <ActivityAuthor>{report.name}</ActivityAuthor>\n              <Clipboard value={report.email}>\n                <Email>\n                  {report.email}\n                  <StyledIconCopy size=\"xs\" />\n                </Email>\n              </Clipboard>\n              {report.eventID && (\n                <ViewEventLink to={this.getUrl()}>{t('View event')}</ViewEventLink>\n              )}\n            </div>\n          }\n        >\n          <p\n            dangerouslySetInnerHTML={{\n              __html: nl2br(escape(report.comments)),\n            }}\n          />\n        </ActivityItem>\n      </div>\n    );\n  }\n}\n\nexport default EventUserFeedback;\n\nconst Email = styled('span')`\n  font-size: ${p => p.theme.fontSizeSmall};\n  font-weight: normal;\n  cursor: pointer;\n  margin-left: ${space(1)};\n`;\n\nconst ViewEventLink = styled(Link)`\n  font-weight: 300;\n  margin-left: ${space(1)};\n  font-size: 0.9em;\n`;\n\nconst StyledIconCopy = styled(IconCopy)`\n  margin-left: ${space(1)};\n`;\n","import React from 'react';\nimport styled from '@emotion/styled';\n\nimport {Panel} from 'app/components/panels';\nimport space from 'app/styles/space';\n\ntype Props = React.PropsWithChildren<{\n  image: React.ReactNode;\n  className?: string;\n}>;\n\nfunction OnboardingPanel({className, image, children}: Props) {\n  return (\n    <Panel className={className}>\n      <Container>\n        <IlloBox>{image}</IlloBox>\n        <StyledBox>{children}</StyledBox>\n      </Container>\n    </Panel>\n  );\n}\n\nconst Container = styled('div')`\n  padding: ${space(3)};\n  position: relative;\n\n  @media (min-width: ${p => p.theme.breakpoints[0]}) {\n    display: flex;\n    align-items: center;\n    flex-direction: row;\n    justify-content: center;\n    flex-wrap: wrap;\n    min-height: 300px;\n    max-width: 1000px;\n    margin: 0 auto;\n  }\n\n  @media (min-width: ${p => p.theme.breakpoints[1]}) {\n    min-height: 350px;\n  }\n`;\n\nconst StyledBox = styled('div')`\n  z-index: 1;\n\n  @media (min-width: ${p => p.theme.breakpoints[0]}) {\n    flex: 2;\n  }\n`;\n\nconst IlloBox = styled(StyledBox)`\n  position: relative;\n  min-height: 100px;\n  max-width: 300px;\n  margin: ${space(2)} auto;\n\n  @media (min-width: ${p => p.theme.breakpoints[0]}) {\n    flex: 1;\n    margin: ${space(3)};\n    max-width: auto;\n  }\n`;\n\nexport default OnboardingPanel;\n","import React from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport isEqual from 'lodash/isEqual';\n\nimport EventUserFeedback from 'app/components/events/userFeedback';\nimport LoadingError from 'app/components/loadingError';\nimport LoadingIndicator from 'app/components/loadingIndicator';\nimport Pagination from 'app/components/pagination';\nimport {Panel} from 'app/components/panels';\nimport {Group, Organization, Project, UserReport} from 'app/types';\nimport withOrganization from 'app/utils/withOrganization';\nimport UserFeedbackEmpty from 'app/views/userFeedback/userFeedbackEmpty';\n\nimport {fetchGroupUserReports} from './utils';\n\ntype RouteParams = {\n  orgId: string;\n  groupId: string;\n};\n\ntype Props = RouteComponentProps<RouteParams, {}> & {\n  group: Group;\n  organization: Organization;\n  project: Project;\n  environments: string[];\n};\n\ntype State = {\n  loading: boolean;\n  error: boolean;\n  reportList: UserReport[];\n  pageLinks?: string | null;\n};\n\nclass GroupUserFeedback extends React.Component<Props, State> {\n  state: State = {\n    loading: true,\n    error: false,\n    reportList: [],\n    pageLinks: '',\n  };\n\n  componentDidMount() {\n    this.fetchData();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (\n      !isEqual(prevProps.params, this.props.params) ||\n      prevProps.location.pathname !== this.props.location.pathname ||\n      prevProps.location.search !== this.props.location.search\n    ) {\n      this.fetchData();\n    }\n  }\n\n  fetchData = () => {\n    this.setState({\n      loading: true,\n      error: false,\n    });\n\n    fetchGroupUserReports(this.props.group.id, {\n      ...this.props.params,\n      cursor: this.props.location.query.cursor || '',\n    })\n      .then(([data, _, jqXHR]) => {\n        this.setState({\n          error: false,\n          loading: false,\n          reportList: data,\n          pageLinks: jqXHR?.getResponseHeader('Link'),\n        });\n      })\n      .catch(() => {\n        this.setState({\n          error: true,\n          loading: false,\n        });\n      });\n  };\n\n  render() {\n    const {reportList, loading, error} = this.state;\n    const {organization, group} = this.props;\n\n    if (loading) {\n      return <LoadingIndicator />;\n    }\n\n    if (error) {\n      return <LoadingError onRetry={this.fetchData} />;\n    }\n\n    if (reportList.length) {\n      return (\n        <div className=\"row\">\n          <div className=\"col-md-9\">\n            {reportList.map((item, idx) => (\n              <EventUserFeedback\n                key={idx}\n                report={item}\n                orgId={organization.slug}\n                issueId={group.id}\n              />\n            ))}\n            <Pagination pageLinks={this.state.pageLinks} {...this.props} />\n          </div>\n        </div>\n      );\n    }\n\n    return (\n      <Panel>\n        <UserFeedbackEmpty projectIds={[group.project.id]} />\n      </Panel>\n    );\n  }\n}\n\nexport default withOrganization(GroupUserFeedback);\n","import React from 'react';\nimport styled from '@emotion/styled';\nimport * as Sentry from '@sentry/react';\n\nimport emptyStateImg from 'sentry-images/spot/feedback-empty-state.svg';\n\nimport Button from 'app/components/button';\nimport ButtonBar from 'app/components/buttonBar';\nimport EmptyStateWarning from 'app/components/emptyStateWarning';\nimport OnboardingPanel from 'app/components/onboardingPanel';\nimport {t} from 'app/locale';\nimport {Organization, Project} from 'app/types';\nimport {trackAdhocEvent, trackAnalyticsEvent} from 'app/utils/analytics';\nimport withOrganization from 'app/utils/withOrganization';\nimport withProjects from 'app/utils/withProjects';\n\ntype Props = {\n  organization: Organization;\n  projects: Project[];\n  loadingProjects: boolean;\n  projectIds?: string[];\n};\n\nclass UserFeedbackEmpty extends React.Component<Props> {\n  componentDidMount() {\n    const {organization, projectIds} = this.props;\n\n    window.sentryEmbedCallback = function (embed) {\n      // Mock the embed's submit xhr to always be successful\n      // NOTE: this will not have errors if the form is empty\n      embed.submit = function (_body) {\n        this._submitInProgress = true;\n        setTimeout(() => {\n          this._submitInProgress = false;\n          this.onSuccess();\n        }, 500);\n      };\n    };\n\n    if (this.hasAnyFeedback === false) {\n      // send to reload only due to higher event volume\n      trackAdhocEvent({\n        eventKey: 'user_feedback.viewed',\n        org_id: parseInt(organization.id, 10),\n        projects: projectIds,\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    window.sentryEmbedCallback = null;\n  }\n\n  get selectedProjects() {\n    const {projects, projectIds} = this.props;\n\n    return projectIds && projectIds.length\n      ? projects.filter(({id}) => projectIds.includes(id))\n      : projects;\n  }\n\n  get hasAnyFeedback() {\n    return this.selectedProjects.some(({hasUserReports}) => hasUserReports);\n  }\n\n  trackAnalytics({eventKey, eventName}: {eventKey: string; eventName: string}) {\n    const {organization, projectIds} = this.props;\n\n    trackAnalyticsEvent({\n      eventKey,\n      eventName,\n      organization_id: organization.id,\n      projects: projectIds,\n    });\n  }\n\n  render() {\n    // Show no user reports if waiting for projects to load or if there is no feedback\n    if (this.props.loadingProjects || this.hasAnyFeedback !== false) {\n      return (\n        <EmptyStateWarning>\n          <p>{t('Sorry, no user reports match your filters.')}</p>\n        </EmptyStateWarning>\n      );\n    }\n    // Show landing page after projects have loaded and it is confirmed no projects have feedback\n    return (\n      <OnboardingPanel image={<img src={emptyStateImg} />}>\n        <h3>{t('What do users think?')}</h3>\n        <p>\n          {t(\n            `You can't read minds. At least we hope not. Ask users for feedback on the impact of their crashes or bugs and you shall receive.`\n          )}\n        </p>\n        <ButtonList gap={1}>\n          <Button\n            external\n            priority=\"primary\"\n            onClick={() =>\n              this.trackAnalytics({\n                eventKey: 'user_feedback.docs_clicked',\n                eventName: 'User Feedback Docs Clicked',\n              })\n            }\n            href={`https://docs.sentry.io/platform-redirect/?next=/enriching-events/user-feedback/&platform=${this.selectedProjects[0]?.platform}`}\n          >\n            {t('Read the docs')}\n          </Button>\n          <Button\n            onClick={() => {\n              Sentry.showReportDialog({\n                // should never make it to the Sentry API, but just in case, use throwaway id\n                eventId: '00000000000000000000000000000000',\n              });\n\n              this.trackAnalytics({\n                eventKey: 'user_feedback.dialog_opened',\n                eventName: 'User Feedback Dialog Opened',\n              });\n            }}\n          >\n            {t('See an example')}\n          </Button>\n        </ButtonList>\n      </OnboardingPanel>\n    );\n  }\n}\n\nconst ButtonList = styled(ButtonBar)`\n  grid-template-columns: repeat(auto-fit, minmax(130px, max-content));\n`;\n\nexport {UserFeedbackEmpty};\n\nexport default withOrganization(withProjects(UserFeedbackEmpty));\n","module.exports = __webpack_public_path__ + \"spot/feedback-empty-state.024ae4.svg\";"],"sourceRoot":""}