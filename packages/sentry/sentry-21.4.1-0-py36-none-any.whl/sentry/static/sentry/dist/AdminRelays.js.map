{"version":3,"sources":["webpack:///./app/components/links/linkWithConfirmation.tsx","webpack:///./app/components/resultGrid.tsx","webpack:///./app/views/admin/adminRelays.tsx"],"names":["LinkWithConfirmation","this","props","className","disabled","title","children","otherProps","href","classNames","React","Filter","getCurrentLabel","getDefaultItem","options","map","value","label","filterQuery","queryKey","query","location","key","isActive","to","pathname","path","selected","find","item","name","cursor","length","getSelector","SortBy","getCurrentSortLabel","sortBy","getSortBySelector","ResultGrid","defaultState","e","state","targetQueryParams","preventDefault","browserHistory","evt","setState","target","fetchData","queryParams","defaultSort","filters","pageLinks","loading","error","rows","defaultParams","api","request","endpoint","method","data","success","_","jqXHR","getResponseHeader","colSpan","columns","row","keyForRow","columnsForRow","hasSearch","onSubmit","onSearch","type","placeholder","style","width","autoComplete","onChange","onQueryChange","size","sortOptions","Object","keys","filterKey","renderLoading","renderError","renderNoResults","renderResults","hasPagination","id","per_page","withApi","prettyDate","x","moment","format","AdminRelays","relayId","publicKey","textAlign","firstSeen","lastSeen","message","t","onConfirm","onDelete","getRow"],"mappings":"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","file":"AdminRelays.6daa87c906ca0e023637.js","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\n\nimport Button from 'app/components/button';\nimport Confirm from 'app/components/confirm';\n\ntype Props = {\n  message: React.ReactNode;\n  title: string;\n  onConfirm: () => void;\n  disabled?: boolean;\n  className?: string;\n  priority?: React.ComponentProps<typeof Button>['priority'];\n};\n\n/**\n * <Confirm> is a more generic version of this component\n */\nclass LinkWithConfirmation extends React.PureComponent<Props> {\n  render() {\n    const {className, disabled, title, children, ...otherProps} = this.props;\n    return (\n      <Confirm {...otherProps} disabled={disabled}>\n        <a href=\"#\" className={classNames(className || '', {disabled})} title={title}>\n          {children}\n        </a>\n      </Confirm>\n    );\n  }\n}\n\nexport default LinkWithConfirmation;\n","import React from 'react';\nimport {browserHistory} from 'react-router';\nimport {Location} from 'history';\n\nimport {Client, RequestOptions} from 'app/api';\nimport DropdownLink from 'app/components/dropdownLink';\nimport MenuItem from 'app/components/menuItem';\nimport Pagination from 'app/components/pagination';\nimport {IconSearch} from 'app/icons';\nimport withApi from 'app/utils/withApi';\n\ntype Option = [value: string, label: string];\n\ntype FilterProps = {\n  name: string;\n  queryKey: string;\n  options: Option[];\n  path: string;\n  value: string;\n  location: Location;\n};\n\nclass Filter extends React.Component<FilterProps> {\n  getCurrentLabel() {\n    const selected = this.props.options.find(\n      item => item[0] === (this.props.value ?? '')\n    );\n    if (selected) {\n      return this.props.name + ': ' + selected[1];\n    }\n    return this.props.name + ': ' + 'Any';\n  }\n\n  getDefaultItem() {\n    const query = {...this.props.location.query, cursor: ''};\n    delete query[this.props.queryKey];\n\n    return (\n      <MenuItem\n        key=\"\"\n        isActive={this.props.value === '' || !this.props.value}\n        to={{pathname: this.props.path, query}}\n      >\n        Any\n      </MenuItem>\n    );\n  }\n\n  getSelector = () => (\n    <DropdownLink title={this.getCurrentLabel()}>\n      {this.getDefaultItem()}\n      {this.props.options.map(([value, label]) => {\n        const filterQuery = {\n          [this.props.queryKey]: value,\n          cursor: '',\n        };\n\n        const query = {...this.props.location.query, ...filterQuery};\n        return (\n          <MenuItem\n            key={value}\n            isActive={this.props.value === value}\n            to={{pathname: this.props.path, query}}\n          >\n            {label}\n          </MenuItem>\n        );\n      })}\n    </DropdownLink>\n  );\n\n  render() {\n    return (\n      <div className=\"filter-options\">\n        {this.props.options.length === 1 ? (\n          <strong>{this.getCurrentLabel()}</strong>\n        ) : (\n          this.getSelector()\n        )}\n      </div>\n    );\n  }\n}\n\ntype SortByProps = {\n  options: Option[];\n  path: string;\n  location: Location;\n  value: string;\n};\n\nclass SortBy extends React.Component<SortByProps> {\n  getCurrentSortLabel() {\n    return this.props.options.find(([value]) => value === this.props.value)?.[1];\n  }\n\n  getSortBySelector() {\n    return (\n      <DropdownLink title={this.getCurrentSortLabel()} className=\"sorted-by\">\n        {this.props.options.map(([value, label]) => {\n          const query = {...this.props.location.query, sortBy: value, cursor: ''};\n          return (\n            <MenuItem\n              isActive={this.props.value === value}\n              key={value}\n              to={{pathname: this.props.path, query}}\n            >\n              {label}\n            </MenuItem>\n          );\n        })}\n      </DropdownLink>\n    );\n  }\n\n  render() {\n    if (this.props.options.length === 0) {\n      return null;\n    }\n\n    return (\n      <div className=\"sort-options\">\n        Showing results sorted by\n        {this.props.options.length === 1 ? (\n          <strong className=\"sorted-by\">{this.getCurrentSortLabel()}</strong>\n        ) : (\n          this.getSortBySelector()\n        )}\n      </div>\n    );\n  }\n}\n\ntype FilterConfig = {\n  name: string;\n  options: Option[];\n};\n\n// XXX(ts): Using Partial here on the DefaultProps is not really correct, since\n// defaultProps guarantees they'll be set. But because this component is\n// wrapped with a HoC, we lose the defaultProps, and users of the component\ntype Props = {\n  api: Client;\n  location: Location;\n} & Partial<DefaultProps>;\n\ntype DefaultProps = {\n  columns: React.ReactNode[];\n  columnsForRow: (row: any) => React.ReactNode[];\n  defaultSort: string;\n  defaultParams: Record<string, any>;\n  filters: Record<string, FilterConfig>;\n  endpoint: string;\n  hasPagination: boolean;\n  hasSearch: boolean;\n  keyForRow: (row: any) => string;\n  method: RequestOptions['method'];\n  path: string;\n  sortOptions: Option[];\n};\n\ntype State = {\n  rows: any[];\n  loading: boolean;\n  error: string | boolean;\n  pageLinks: null | string;\n  query: string;\n  sortBy: string;\n  filters: Record<string, string>;\n};\n\nclass ResultGrid extends React.Component<Props, State> {\n  static defaultProps: DefaultProps = {\n    path: '',\n    endpoint: '',\n    method: 'GET',\n    columns: [],\n    sortOptions: [],\n    filters: {},\n    defaultSort: '',\n    keyForRow: row => row.id,\n    columnsForRow: () => [],\n    defaultParams: {\n      per_page: 50,\n    },\n    hasPagination: true,\n    hasSearch: false,\n  };\n\n  state: State = this.defaultState;\n\n  componentWillMount() {\n    this.fetchData();\n  }\n\n  componentWillReceiveProps() {\n    const queryParams = this.query;\n    this.setState(\n      {\n        query: queryParams.query ?? '',\n        sortBy: queryParams.sortBy ?? this.props.defaultSort,\n        filters: {...queryParams},\n        pageLinks: null,\n        loading: true,\n        error: false,\n      },\n      this.fetchData\n    );\n  }\n\n  get defaultState() {\n    const queryParams = this.query;\n\n    return {\n      rows: [],\n      loading: true,\n      error: false,\n      pageLinks: null,\n      query: queryParams.query ?? '',\n      sortBy: queryParams.sortBy ?? this.props.defaultSort,\n      filters: {...queryParams},\n    } as State;\n  }\n\n  get query() {\n    return ((this.props.location ?? {}).query ?? {}) as {[k: string]: string};\n  }\n\n  remountComponent() {\n    this.setState(this.defaultState, this.fetchData);\n  }\n\n  refresh() {\n    this.setState({loading: true}, this.fetchData);\n  }\n\n  fetchData() {\n    // TODO(dcramer): this should explicitly allow filters/sortBy/cursor/perPage\n    const queryParams = {\n      ...this.props.defaultParams,\n      sortBy: this.state.sortBy,\n      ...this.query,\n    };\n\n    this.props.api.request(this.props.endpoint!, {\n      method: this.props.method,\n      data: queryParams,\n      success: (data, _, jqXHR) => {\n        this.setState({\n          loading: false,\n          error: false,\n          rows: data,\n          pageLinks: jqXHR?.getResponseHeader('Link') ?? null,\n        });\n      },\n      error: () => {\n        this.setState({\n          loading: false,\n          error: true,\n        });\n      },\n    });\n  }\n\n  onSearch = (e: React.FormEvent<HTMLFormElement>) => {\n    const location = this.props.location ?? {};\n    const {query} = this.state;\n    const targetQueryParams = {...(location.query ?? {}), query, cursor: ''};\n\n    e.preventDefault();\n\n    browserHistory.push({\n      pathname: this.props.path,\n      query: targetQueryParams,\n    });\n  };\n\n  onQueryChange = (evt: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({query: evt.target.value});\n  };\n\n  renderLoading() {\n    return (\n      <tr>\n        <td colSpan={this.props.columns!.length}>\n          <div className=\"loading\">\n            <div className=\"loading-indicator\" />\n            <div className=\"loading-message\">Hold on to your butts!</div>\n          </div>\n        </td>\n      </tr>\n    );\n  }\n\n  renderError() {\n    return (\n      <tr>\n        <td colSpan={this.props.columns!.length}>\n          <div className=\"alert-block alert-error\">Something bad happened :(</div>\n        </td>\n      </tr>\n    );\n  }\n\n  renderNoResults() {\n    return (\n      <tr>\n        <td colSpan={this.props.columns!.length}>No results found.</td>\n      </tr>\n    );\n  }\n\n  renderResults() {\n    return this.state.rows.map(row => (\n      <tr key={this.props.keyForRow?.(row)}>{this.props.columnsForRow?.(row)}</tr>\n    ));\n  }\n\n  render() {\n    const {filters} = this.props;\n    return (\n      <div className=\"result-grid\">\n        <div className=\"table-options\">\n          {this.props.hasSearch && (\n            <div className=\"result-grid-search\">\n              <form onSubmit={this.onSearch}>\n                <div className=\"form-group\">\n                  <input\n                    type=\"text\"\n                    className=\"form-control input-search\"\n                    placeholder=\"search\"\n                    style={{width: 300}}\n                    name=\"query\"\n                    autoComplete=\"off\"\n                    value={this.state.query}\n                    onChange={this.onQueryChange}\n                  />\n                  <button type=\"submit\" className=\"btn btn-sm btn-primary\">\n                    <IconSearch size=\"xs\" />\n                  </button>\n                </div>\n              </form>\n            </div>\n          )}\n          <SortBy\n            options={this.props.sortOptions ?? []}\n            value={this.state.sortBy}\n            path={this.props.path ?? ''}\n            location={this.props.location}\n          />\n          {Object.keys(filters ?? {}).map(filterKey => (\n            <Filter\n              key={filterKey}\n              queryKey={filterKey}\n              value={this.state.filters[filterKey]}\n              path={this.props.path ?? ''}\n              location={this.props.location}\n              {...(filters?.[filterKey] as FilterConfig)}\n            />\n          ))}\n        </div>\n\n        <table className=\"table table-grid\">\n          <thead>\n            <tr>{this.props.columns}</tr>\n          </thead>\n          <tbody>\n            {this.state.loading\n              ? this.renderLoading()\n              : this.state.error\n              ? this.renderError()\n              : this.state.rows.length === 0\n              ? this.renderNoResults()\n              : this.renderResults()}\n          </tbody>\n        </table>\n        {this.props.hasPagination && this.state.pageLinks && (\n          <Pagination pageLinks={this.state.pageLinks} />\n        )}\n      </div>\n    );\n  }\n}\n\nexport {ResultGrid};\n\nexport default withApi(ResultGrid);\n","import React from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport moment from 'moment';\n\nimport {Client} from 'app/api';\nimport LinkWithConfirmation from 'app/components/links/linkWithConfirmation';\nimport ResultGrid from 'app/components/resultGrid';\nimport {t} from 'app/locale';\nimport withApi from 'app/utils/withApi';\n\nconst prettyDate = (x: string) => moment(x).format('ll LTS');\n\ntype Props = RouteComponentProps<{}, {}> & {api: Client};\n\ntype State = {\n  loading: boolean;\n};\n\ntype RelayRow = {\n  id: string;\n  relayId: string;\n  publicKey: string;\n  firstSeen: string;\n  lastSeen: string;\n};\n\nclass AdminRelays extends React.Component<Props, State> {\n  state: State = {\n    loading: false,\n  };\n\n  onDelete(key: string) {\n    this.setState({loading: true});\n    this.props.api.request(`/relays/${key}/`, {\n      method: 'DELETE',\n      success: () => this.setState({loading: false}),\n      error: () => this.setState({loading: false}),\n    });\n  }\n\n  getRow(row: RelayRow) {\n    return [\n      <td key=\"id\">\n        <strong>{row.relayId}</strong>\n      </td>,\n      <td key=\"key\">{row.publicKey}</td>,\n      <td key=\"firstSeen\" style={{textAlign: 'right'}}>\n        {prettyDate(row.firstSeen)}\n      </td>,\n      <td key=\"lastSeen\" style={{textAlign: 'right'}}>\n        {prettyDate(row.lastSeen)}\n      </td>,\n      <td key=\"tools\" style={{textAlign: 'right'}}>\n        <span className=\"editor-tools\">\n          <LinkWithConfirmation\n            className=\"danger\"\n            title=\"Remove\"\n            message={t('Are you sure you wish to delete this relay?')}\n            onConfirm={() => this.onDelete(row.id)}\n          >\n            {t('Remove')}\n          </LinkWithConfirmation>\n        </span>\n      </td>,\n    ];\n  }\n\n  render() {\n    const columns = [\n      <th key=\"id\" style={{width: 350, textAlign: 'left'}}>\n        Relay\n      </th>,\n      <th key=\"key\">Public Key</th>,\n      <th key=\"firstSeen\" style={{width: 150, textAlign: 'right'}}>\n        First seen\n      </th>,\n      <th key=\"lastSeen\" style={{width: 150, textAlign: 'right'}}>\n        Last seen\n      </th>,\n      <th key=\"tools\" />,\n    ];\n\n    return (\n      <div>\n        <h3>{t('Relays')}</h3>\n        <ResultGrid\n          path=\"/manage/relays/\"\n          endpoint=\"/relays/\"\n          method=\"GET\"\n          columns={columns}\n          columnsForRow={this.getRow}\n          hasSearch={false}\n          sortOptions={[\n            ['firstSeen', 'First seen'],\n            ['lastSeen', 'Last seen'],\n            ['relayId', 'Relay ID'],\n          ]}\n          defaultSort=\"firstSeen\"\n          {...this.props}\n        />\n      </div>\n    );\n  }\n}\n\nexport {AdminRelays};\n\nexport default withApi(AdminRelays);\n"],"sourceRoot":""}