{"version":3,"sources":["webpack:///./app/utils/routeTitle.tsx","webpack:///./app/views/asyncView.tsx","webpack:///./app/views/releases/list/utils.tsx","webpack:///./app/views/releases/utils/index.tsx","webpack:///./app/views/releases/utils/releaseHealthRequest.tsx"],"names":["routeName","orgSlug","withSentry","projectSlug","tmplBase","tmpl","AsyncView","title","this","getTitle","renderComponent","AsyncComponent","SortOption","DisplayOption","StatusOption","roundDuration","seconds","round","getCrashFreePercent","percent","decimalThreshold","decimalPlaces","displayCrashFreePercent","isNaN","rounded","toLocaleString","getReleaseNewIssuesUrl","projectId","version","pathname","query","project","statsPeriod","undefined","start","end","stringifyQueryObject","QueryResults","sort","IssueSortOptions","getReleaseUnhandledIssuesUrl","isReleaseArchived","release","status","ReleaseStatus","releaseDisplayLabel","displayOption","count","tn","omitIgnoredProps","props","omit","reduceTimeSeriesGroups","acc","group","field","series","forEach","value","index","ReleaseHealthRequest","loading","errored","statusCountByReleaseInPeriod","totalCountByReleaseIn24h","totalCountByProjectIn24h","statusCountByProjectInPeriod","api","healthStatsPeriod","clear","setState","promises","fetchStatusCountByReleaseInPeriod","fetchTotalCountByReleaseIn24h","fetchTotalCountByProjectIn24h","HealthStatsPeriodOption","push","fetchStatusCountByProjectInPeriod","Promise","all","addErrorMessage","responseJSON","detail","t","getCrashCount","getCrashFreeRate","get24hCountByRelease","get24hCountByProject","getTimeSeries","getAdoption","display","state","displayToField","groups","find","by","totals","totalCount","filter","reduce","crashedCount","defined","getPeriodTimeSeries","get24hTimeSeries","intervals","projectData","releaseData","seriesName","data","map","interval","name","moment","valueOf","z","fetchData","prevProps","releasesReloading","isEqual","organization","slug","datetimeObj","diffInMinutes","location","selection","defaultStatsPeriod","releases","allReleases","length","datetime","getDiffInMinutes","TWO_WEEKS","ONE_WEEK","TWENTY_FOUR_HOURS","getParams","pick","Object","values","URL_PARAM","requestPromise","path","baseQueryParams","Set","d","groupBy","response","children","isHealthLoading","getHealthData","React","withApi"],"mappings":"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","file":"app_utils_routeTitle_tsx-app_views_asyncView_tsx-app_views_releases_utils_releaseHealthRequest_tsx.c1dad0042e7b15802ad8.js","sourcesContent":["function routeTitleGen(\n  routeName: string,\n  orgSlug: string,\n  withSentry: boolean = true,\n  projectSlug?: string\n): string {\n  const tmplBase = `${routeName} - ${orgSlug}`;\n  const tmpl = projectSlug ? `${tmplBase} - ${projectSlug}` : tmplBase;\n\n  return withSentry ? `${tmpl} - Sentry` : tmpl;\n}\n\nexport default routeTitleGen;\n","import React from 'react';\nimport DocumentTitle from 'react-document-title';\n\nimport AsyncComponent from 'app/components/asyncComponent';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    const title = this.getTitle();\n    return (\n      <DocumentTitle title={`${title ? `${title} - ` : ''}Sentry`}>\n        {this.renderComponent() as React.ReactChild}\n      </DocumentTitle>\n    );\n  }\n}\n","export enum SortOption {\n  CRASH_FREE_USERS = 'crash_free_users',\n  CRASH_FREE_SESSIONS = 'crash_free_sessions',\n  USERS_24_HOURS = 'users_24h',\n  SESSIONS = 'sessions',\n  DATE = 'date',\n}\n\nexport enum DisplayOption {\n  USERS = 'users',\n  SESSIONS = 'sessions',\n}\n\nexport enum StatusOption {\n  ACTIVE = 'active',\n  ARCHIVED = 'archived',\n}\n","import round from 'lodash/round';\n\nimport {tn} from 'app/locale';\nimport {Release, ReleaseStatus} from 'app/types';\nimport {QueryResults, stringifyQueryObject} from 'app/utils/tokenizeSearch';\nimport {IssueSortOptions} from 'app/views/issueList/utils';\n\nimport {DisplayOption} from '../list/utils';\n\nexport const roundDuration = (seconds: number) => {\n  return round(seconds, seconds > 60 ? 0 : 3);\n};\n\nexport const getCrashFreePercent = (\n  percent: number,\n  decimalThreshold = 95,\n  decimalPlaces = 3\n): number => {\n  return round(percent, percent > decimalThreshold ? decimalPlaces : 0);\n};\n\nexport const displayCrashFreePercent = (\n  percent: number,\n  decimalThreshold = 95,\n  decimalPlaces = 3\n): string => {\n  if (isNaN(percent)) {\n    return '\\u2015';\n  }\n\n  if (percent < 1 && percent > 0) {\n    return `<1\\u0025`;\n  }\n\n  const rounded = getCrashFreePercent(\n    percent,\n    decimalThreshold,\n    decimalPlaces\n  ).toLocaleString();\n\n  return `${rounded}\\u0025`;\n};\n\nexport const getReleaseNewIssuesUrl = (\n  orgSlug: string,\n  projectId: string | number | null,\n  version: string\n) => {\n  return {\n    pathname: `/organizations/${orgSlug}/issues/`,\n    query: {\n      project: projectId,\n      // we are resetting time selector because releases' new issues count doesn't take time selector into account\n      statsPeriod: undefined,\n      start: undefined,\n      end: undefined,\n      query: stringifyQueryObject(new QueryResults([`firstRelease:${version}`])),\n      sort: IssueSortOptions.FREQ,\n    },\n  };\n};\n\nexport const getReleaseUnhandledIssuesUrl = (\n  orgSlug: string,\n  projectId: string | number | null,\n  version: string\n) => {\n  return {\n    pathname: `/organizations/${orgSlug}/issues/`,\n    query: {\n      project: projectId,\n      query: stringifyQueryObject(\n        new QueryResults([`release:${version}`, 'error.unhandled:true'])\n      ),\n      sort: IssueSortOptions.FREQ,\n    },\n  };\n};\n\nexport const isReleaseArchived = (release: Release) =>\n  release.status === ReleaseStatus.Archived;\n\nexport function releaseDisplayLabel(displayOption: DisplayOption, count?: number | null) {\n  if (displayOption === DisplayOption.USERS) {\n    return tn('user', 'users', count);\n  }\n\n  return tn('session', 'sessions', count);\n}\n","import React from 'react';\nimport {Location} from 'history';\nimport isEqual from 'lodash/isEqual';\nimport omit from 'lodash/omit';\nimport pick from 'lodash/pick';\nimport moment from 'moment';\n\nimport {addErrorMessage} from 'app/actionCreators/indicator';\nimport {Client} from 'app/api';\nimport {\n  DateTimeObject,\n  getDiffInMinutes,\n  ONE_WEEK,\n  TWENTY_FOUR_HOURS,\n  TWO_WEEKS,\n} from 'app/components/charts/utils';\nimport {getParams} from 'app/components/organizations/globalSelectionHeader/getParams';\nimport {URL_PARAM} from 'app/constants/globalSelectionHeader';\nimport {t} from 'app/locale';\nimport {\n  GlobalSelection,\n  HealthStatsPeriodOption,\n  Organization,\n  SessionApiResponse,\n} from 'app/types';\nimport {defined, percent} from 'app/utils';\nimport {QueryResults, stringifyQueryObject} from 'app/utils/tokenizeSearch';\nimport withApi from 'app/utils/withApi';\n\nimport {DisplayOption} from '../list/utils';\n\nimport {getCrashFreePercent} from '.';\n\nfunction omitIgnoredProps(props: Props) {\n  return omit(props, [\n    'api',\n    'organization',\n    'children',\n    'selection.datetime.utc',\n    'location',\n  ]);\n}\n\nfunction getInterval(datetimeObj: DateTimeObject) {\n  const diffInMinutes = getDiffInMinutes(datetimeObj);\n\n  if (diffInMinutes >= TWO_WEEKS) {\n    return '1d';\n  }\n  if (diffInMinutes >= ONE_WEEK) {\n    return '6h';\n  }\n\n  if (diffInMinutes > TWENTY_FOUR_HOURS) {\n    return '4h';\n  }\n\n  // TODO(sessions): sub-hour session resolution is still not possible\n  return '1h';\n}\nfunction reduceTimeSeriesGroups(\n  acc: number[],\n  group: SessionApiResponse['groups'][number],\n  field: 'count_unique(user)' | 'sum(session)'\n) {\n  group.series[field]?.forEach(\n    (value, index) => (acc[index] = (acc[index] ?? 0) + value)\n  );\n\n  return acc;\n}\n\nexport type ReleaseHealthRequestRenderProps = {\n  isHealthLoading: boolean;\n  errored: boolean;\n  getHealthData: ReturnType<ReleaseHealthRequest['getHealthData']>;\n};\n\ntype Props = {\n  api: Client;\n  releases: string[];\n  organization: Organization;\n  children: (renderProps: ReleaseHealthRequestRenderProps) => React.ReactNode;\n  selection: GlobalSelection;\n  location: Location;\n  display: DisplayOption[];\n  defaultStatsPeriod?: string;\n  releasesReloading?: boolean;\n  healthStatsPeriod?: HealthStatsPeriodOption;\n};\ntype State = {\n  loading: boolean;\n  errored: boolean;\n  statusCountByReleaseInPeriod: SessionApiResponse | null;\n  totalCountByReleaseIn24h: SessionApiResponse | null;\n  totalCountByProjectIn24h: SessionApiResponse | null;\n  statusCountByProjectInPeriod: SessionApiResponse | null;\n};\n\nclass ReleaseHealthRequest extends React.Component<Props, State> {\n  state: State = {\n    loading: false,\n    errored: false,\n    statusCountByReleaseInPeriod: null,\n    totalCountByReleaseIn24h: null,\n    totalCountByProjectIn24h: null,\n    statusCountByProjectInPeriod: null,\n  };\n\n  componentDidMount() {\n    this.fetchData();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (this.props.releasesReloading) {\n      return;\n    }\n    if (isEqual(omitIgnoredProps(prevProps), omitIgnoredProps(this.props))) {\n      return;\n    }\n\n    this.fetchData();\n  }\n\n  get path() {\n    const {organization} = this.props;\n\n    return `/organizations/${organization.slug}/sessions/`;\n  }\n\n  get baseQueryParams() {\n    const {location, selection, defaultStatsPeriod, releases} = this.props;\n\n    return {\n      query: stringifyQueryObject(\n        new QueryResults(\n          releases.reduce((acc, release, index, allReleases) => {\n            acc.push(`release:\"${release}\"`);\n            if (index < allReleases.length - 1) {\n              acc.push('OR');\n            }\n\n            return acc;\n          }, [] as string[])\n        )\n      ),\n      interval: getInterval(selection.datetime),\n      ...getParams(pick(location.query, Object.values(URL_PARAM)), {\n        defaultStatsPeriod,\n      }),\n    };\n  }\n\n  fetchData = async () => {\n    const {api, healthStatsPeriod} = this.props;\n\n    api.clear();\n    this.setState({\n      loading: true,\n      errored: false,\n      statusCountByReleaseInPeriod: null,\n      totalCountByReleaseIn24h: null,\n      totalCountByProjectIn24h: null,\n    });\n\n    const promises = [\n      this.fetchStatusCountByReleaseInPeriod(),\n      this.fetchTotalCountByReleaseIn24h(),\n      this.fetchTotalCountByProjectIn24h(),\n    ];\n\n    if (healthStatsPeriod === HealthStatsPeriodOption.AUTO) {\n      promises.push(this.fetchStatusCountByProjectInPeriod());\n    }\n\n    try {\n      const [\n        statusCountByReleaseInPeriod,\n        totalCountByReleaseIn24h,\n        totalCountByProjectIn24h,\n        statusCountByProjectInPeriod,\n      ] = await Promise.all(promises);\n\n      this.setState({\n        loading: false,\n        statusCountByReleaseInPeriod,\n        totalCountByReleaseIn24h,\n        totalCountByProjectIn24h,\n        statusCountByProjectInPeriod,\n      });\n    } catch (error) {\n      addErrorMessage(error.responseJSON?.detail ?? t('Error loading health data'));\n      this.setState({\n        loading: false,\n        errored: true,\n      });\n    }\n  };\n\n  /**\n   * Used to calculate crash free rate, count histogram (This Release series), and crash count\n   */\n  async fetchStatusCountByReleaseInPeriod() {\n    const {api, display} = this.props;\n\n    const response: SessionApiResponse = await api.requestPromise(this.path, {\n      query: {\n        ...this.baseQueryParams,\n        field: [\n          ...new Set([...display.map(d => this.displayToField(d)), 'sum(session)']),\n        ], // this request needs to be fired for sessions in both display options (because of crash count), removing potential sum(session) duplicated with Set\n        groupBy: ['project', 'release', 'session.status'],\n      },\n    });\n\n    return response;\n  }\n\n  /**\n   * Used to calculate count histogram (Total Project series)\n   */\n  async fetchStatusCountByProjectInPeriod() {\n    const {api, display} = this.props;\n\n    const response: SessionApiResponse = await api.requestPromise(this.path, {\n      query: {\n        ...this.baseQueryParams,\n        query: undefined,\n        field: [\n          ...new Set([...display.map(d => this.displayToField(d)), 'sum(session)']),\n        ],\n        groupBy: ['project', 'session.status'],\n      },\n    });\n\n    return response;\n  }\n\n  /**\n   * Used to calculate adoption, and count histogram (This Release series)\n   */\n  async fetchTotalCountByReleaseIn24h() {\n    const {api, display} = this.props;\n\n    const response: SessionApiResponse = await api.requestPromise(this.path, {\n      query: {\n        ...this.baseQueryParams,\n        field: display.map(d => this.displayToField(d)),\n        groupBy: ['project', 'release'],\n        interval: '1h',\n        statsPeriod: '24h',\n      },\n    });\n\n    return response;\n  }\n\n  /**\n   * Used to calculate adoption, and count histogram (Total Project series)\n   */\n  async fetchTotalCountByProjectIn24h() {\n    const {api, display} = this.props;\n\n    const response: SessionApiResponse = await api.requestPromise(this.path, {\n      query: {\n        ...this.baseQueryParams,\n        query: undefined,\n        field: display.map(d => this.displayToField(d)),\n        groupBy: ['project'],\n        interval: '1h',\n        statsPeriod: '24h',\n      },\n    });\n\n    return response;\n  }\n\n  displayToField(display: DisplayOption) {\n    switch (display) {\n      case DisplayOption.USERS:\n        return 'count_unique(user)';\n      case DisplayOption.SESSIONS:\n      default:\n        return 'sum(session)';\n    }\n  }\n\n  getHealthData = () => {\n    // TODO(sessions): investigate if this needs to be optimized to lower O(n) complexity\n    return {\n      getCrashCount: this.getCrashCount,\n      getCrashFreeRate: this.getCrashFreeRate,\n      get24hCountByRelease: this.get24hCountByRelease,\n      get24hCountByProject: this.get24hCountByProject,\n      getTimeSeries: this.getTimeSeries,\n      getAdoption: this.getAdoption,\n    };\n  };\n\n  getCrashCount = (version: string, project: number, display: DisplayOption) => {\n    const {statusCountByReleaseInPeriod} = this.state;\n    const field = this.displayToField(display);\n\n    return statusCountByReleaseInPeriod?.groups.find(\n      ({by}) =>\n        by.release === version &&\n        by.project === project &&\n        by['session.status'] === 'crashed'\n    )?.totals[field];\n  };\n\n  getCrashFreeRate = (version: string, project: number, display: DisplayOption) => {\n    const {statusCountByReleaseInPeriod} = this.state;\n    const field = this.displayToField(display);\n\n    const totalCount = statusCountByReleaseInPeriod?.groups\n      .filter(({by}) => by.release === version && by.project === project)\n      ?.reduce((acc, group) => acc + group.totals[field], 0);\n\n    const crashedCount = this.getCrashCount(version, project, display);\n\n    return !defined(totalCount) || totalCount === 0\n      ? null\n      : getCrashFreePercent(100 - percent(crashedCount ?? 0, totalCount ?? 0));\n  };\n\n  get24hCountByRelease = (version: string, project: number, display: DisplayOption) => {\n    const {totalCountByReleaseIn24h} = this.state;\n    const field = this.displayToField(display);\n\n    return totalCountByReleaseIn24h?.groups\n      .filter(({by}) => by.release === version && by.project === project)\n      ?.reduce((acc, group) => acc + group.totals[field], 0);\n  };\n\n  get24hCountByProject = (project: number, display: DisplayOption) => {\n    const {totalCountByProjectIn24h} = this.state;\n    const field = this.displayToField(display);\n\n    return totalCountByProjectIn24h?.groups\n      .filter(({by}) => by.project === project)\n      ?.reduce((acc, group) => acc + group.totals[field], 0);\n  };\n\n  getTimeSeries = (version: string, project: number, display: DisplayOption) => {\n    const {healthStatsPeriod} = this.props;\n    if (healthStatsPeriod === HealthStatsPeriodOption.AUTO) {\n      return this.getPeriodTimeSeries(version, project, display);\n    }\n\n    return this.get24hTimeSeries(version, project, display);\n  };\n\n  get24hTimeSeries = (version: string, project: number, display: DisplayOption) => {\n    const {totalCountByReleaseIn24h, totalCountByProjectIn24h} = this.state;\n    const field = this.displayToField(display);\n\n    const intervals = totalCountByProjectIn24h?.intervals ?? [];\n\n    const projectData = totalCountByProjectIn24h?.groups.find(\n      ({by}) => by.project === project\n    )?.series[field];\n\n    const releaseData = totalCountByReleaseIn24h?.groups.find(\n      ({by}) => by.project === project && by.release === version\n    )?.series[field];\n\n    return [\n      {\n        seriesName: t('This Release'),\n        data: intervals?.map((interval, index) => ({\n          name: moment(interval).valueOf(),\n          value: releaseData?.[index] ?? 0,\n        })),\n      },\n      {\n        seriesName: t('Total Project'),\n        data: intervals?.map((interval, index) => ({\n          name: moment(interval).valueOf(),\n          value: projectData?.[index] ?? 0,\n        })),\n        z: 0,\n      },\n    ];\n  };\n\n  getPeriodTimeSeries = (version: string, project: number, display: DisplayOption) => {\n    const {statusCountByReleaseInPeriod, statusCountByProjectInPeriod} = this.state;\n    const field = this.displayToField(display);\n\n    const intervals = statusCountByProjectInPeriod?.intervals ?? [];\n\n    const projectData = statusCountByProjectInPeriod?.groups\n      .filter(({by}) => by.project === project)\n      ?.reduce((acc, group) => reduceTimeSeriesGroups(acc, group, field), [] as number[]);\n\n    const releaseData = statusCountByReleaseInPeriod?.groups\n      .filter(({by}) => by.project === project && by.release === version)\n      ?.reduce((acc, group) => reduceTimeSeriesGroups(acc, group, field), [] as number[]);\n\n    return [\n      {\n        seriesName: t('This Release'),\n        data: intervals?.map((interval, index) => ({\n          name: moment(interval).valueOf(),\n          value: releaseData?.[index] ?? 0,\n        })),\n      },\n      {\n        seriesName: t('Total Project'),\n        data: intervals?.map((interval, index) => ({\n          name: moment(interval).valueOf(),\n          value: projectData?.[index] ?? 0,\n        })),\n        z: 0,\n      },\n    ];\n  };\n\n  getAdoption = (version: string, project: number, display: DisplayOption) => {\n    const get24hCountByRelease = this.get24hCountByRelease(version, project, display);\n    const get24hCountByProject = this.get24hCountByProject(project, display);\n\n    return defined(get24hCountByRelease) && defined(get24hCountByProject)\n      ? percent(get24hCountByRelease, get24hCountByProject)\n      : undefined;\n  };\n\n  render() {\n    const {loading, errored} = this.state;\n    const {children} = this.props;\n\n    return children({\n      isHealthLoading: loading,\n      errored,\n      getHealthData: this.getHealthData(),\n    });\n  }\n}\n\nexport default withApi(ReleaseHealthRequest);\n"],"sourceRoot":""}