{"version":3,"sources":["webpack:///./app/actionCreators/teams.tsx","webpack:///./app/data/forms/teamSettingsFields.tsx","webpack:///./app/utils/slugify.tsx","webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/components/forms/formPanel.tsx","webpack:///./app/views/settings/components/forms/jsonForm.tsx","webpack:///./app/views/settings/organizationTeams/teamSettings/model.tsx","webpack:///./app/views/settings/organizationTeams/teamSettings/index.tsx"],"names":["doCallback","params","name","args","callIfFunction","fetchTeamDetails","api","options","TeamActions","teamId","request","orgId","success","data","error","updateTeamSuccess","updateTeam","endpoint","method","joinTeam","memberId","id","uniqueId","leaveTeam","createTeam","team","requestPromise","then","addSuccessMessage","tct","slug","organization","err","addErrorMessage","removeTeam","route","title","fields","type","required","label","t","placeholder","help","disabled","access","has","transformInput","slugify","saveOnBlur","saveMessageAlertType","saveMessage","str","toLowerCase","replace","AsyncView","this","getTitle","renderComponent","AsyncComponent","FormPanel","props","additionalFieldProps","renderFooter","renderHeader","otherProps","sanitizeQuerySelector","undefined","map","field","defaultValue","fieldWithoutDefaultValue","disabledReason","key","highlighted","React","JsonForm","getLocation","context","hash","scrollToHash","nextProps","setState","toHash","scrollToElement","decodeURIComponent","align","offset","Sentry","fieldsWithVisibleProp","filter","defined","visible","length","every","formPanelProps","shouldDisplayForm","forms","features","location","state","formGroup","i","renderForm","PropTypes","Promise","resolve","reject","FormModel","TeamSettings","TeamModel","resp","model","router","getValue","loading","Set","apiMethod","allowUndo","onSubmitSuccess","handleSubmitSuccess","onSubmitError","initialData","teamSettingsFields","onConfirm","handleRemoveTeam","priority","message","icon","SentryTypes"],"mappings":"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","file":"TeamSettings.89d82727d4b58f17b6ab.js","sourcesContent":["import {addErrorMessage, addSuccessMessage} from 'app/actionCreators/indicator';\nimport TeamActions from 'app/actions/teamActions';\nimport {Client} from 'app/api';\nimport {tct} from 'app/locale';\nimport {Team} from 'app/types';\nimport {callIfFunction} from 'app/utils/callIfFunction';\nimport {uniqueId} from 'app/utils/guid';\n\ntype CallbackOptions = {\n  success?: Function;\n  error?: Function;\n};\n\nconst doCallback = (\n  params: CallbackOptions = {},\n  name: keyof CallbackOptions,\n  ...args: any[]\n) => {\n  callIfFunction(params[name], ...args);\n};\n\n/**\n * Note these are both slugs\n */\ntype OrgSlug = {orgId: string};\ntype OrgAndTeamSlug = OrgSlug & {teamId: string};\n\ntype TeamData = {data: Team};\n\n/**\n * This is the actual internal id, not username or email\n */\ntype MemberId = {memberId: string};\n\n// Fetch teams for org\nexport function fetchTeams(api: Client, params: OrgSlug, options: CallbackOptions) {\n  TeamActions.fetchAll(params.orgId);\n  return api.request(`/teams/${params.orgId}/`, {\n    success: data => {\n      TeamActions.fetchAllSuccess(params.orgId, data);\n      doCallback(options, 'success', data);\n    },\n    error: error => {\n      TeamActions.fetchAllError(params.orgId, error);\n      doCallback(options, 'error', error);\n    },\n  });\n}\n\nexport function fetchTeamDetails(\n  api: Client,\n  params: OrgAndTeamSlug,\n  options?: CallbackOptions\n) {\n  TeamActions.fetchDetails(params.teamId);\n  return api.request(`/teams/${params.orgId}/${params.teamId}/`, {\n    success: data => {\n      TeamActions.fetchDetailsSuccess(params.teamId, data);\n      doCallback(options, 'success', data);\n    },\n    error: error => {\n      TeamActions.fetchDetailsError(params.teamId, error);\n      doCallback(options, 'error', error);\n    },\n  });\n}\n\nexport function updateTeamSuccess(teamId: OrgAndTeamSlug['teamId'], data: Team) {\n  TeamActions.updateSuccess(teamId, data);\n}\n\nexport function updateTeam(\n  api: Client,\n  params: OrgAndTeamSlug & TeamData,\n  options: CallbackOptions\n) {\n  const endpoint = `/teams/${params.orgId}/${params.teamId}/`;\n  TeamActions.update(params.teamId, params.data);\n\n  return api.request(endpoint, {\n    method: 'PUT',\n    data: params.data,\n    success: data => {\n      updateTeamSuccess(params.teamId, data);\n      doCallback(options, 'success', data);\n    },\n    error: error => {\n      TeamActions.updateError(params.teamId, error);\n      doCallback(options, 'error', error);\n    },\n  });\n}\n\nexport function joinTeam(\n  api: Client,\n  params: OrgAndTeamSlug & Partial<MemberId>,\n  options: CallbackOptions\n) {\n  const endpoint = `/organizations/${params.orgId}/members/${\n    params.memberId ?? 'me'\n  }/teams/${params.teamId}/`;\n  const id = uniqueId();\n\n  TeamActions.update(id, params.teamId);\n\n  return api.request(endpoint, {\n    method: 'POST',\n    success: data => {\n      TeamActions.updateSuccess(params.teamId, data);\n      doCallback(options, 'success', data);\n    },\n    error: error => {\n      TeamActions.updateError(id, params.teamId, error);\n      doCallback(options, 'error', error);\n    },\n  });\n}\n\nexport function leaveTeam(\n  api: Client,\n  params: OrgAndTeamSlug & Partial<MemberId>,\n  options: CallbackOptions\n) {\n  const endpoint = `/organizations/${params.orgId}/members/${\n    params.memberId || 'me'\n  }/teams/${params.teamId}/`;\n  const id = uniqueId();\n\n  TeamActions.update(id, params.teamId);\n\n  return api.request(endpoint, {\n    method: 'DELETE',\n    success: data => {\n      TeamActions.updateSuccess(params.teamId, data);\n      doCallback(options, 'success', data);\n    },\n    error: error => {\n      TeamActions.updateError(id, params.teamId, error);\n      doCallback(options, 'error', error);\n    },\n  });\n}\n\nexport function createTeam(api: Client, team: Pick<Team, 'slug'>, params: OrgSlug) {\n  TeamActions.createTeam(team);\n\n  return api\n    .requestPromise(`/organizations/${params.orgId}/teams/`, {\n      method: 'POST',\n      data: team,\n    })\n    .then(\n      data => {\n        TeamActions.createTeamSuccess(data);\n        addSuccessMessage(\n          tct('[team] has been added to the [organization] organization', {\n            team: `#${data.slug}`,\n            organization: params.orgId,\n          })\n        );\n        return data;\n      },\n      err => {\n        TeamActions.createTeamError(team.slug, err);\n        addErrorMessage(\n          tct('Unable to create [team] in the [organization] organization', {\n            team: `#${team.slug}`,\n            organization: params.orgId,\n          })\n        );\n        throw err;\n      }\n    );\n}\n\nexport function removeTeam(api: Client, params: OrgAndTeamSlug) {\n  TeamActions.removeTeam(params.teamId);\n\n  return api\n    .requestPromise(`/teams/${params.orgId}/${params.teamId}/`, {\n      method: 'DELETE',\n    })\n    .then(\n      data => {\n        TeamActions.removeTeamSuccess(params.teamId, data);\n        addSuccessMessage(\n          tct('[team] has been removed from the [organization] organization', {\n            team: `#${params.teamId}`,\n            organization: params.orgId,\n          })\n        );\n        return data;\n      },\n      err => {\n        TeamActions.removeTeamError(params.teamId, err);\n        addErrorMessage(\n          tct('Unable to remove [team] from the [organization] organization', {\n            team: `#${params.teamId}`,\n            organization: params.orgId,\n          })\n        );\n        throw err;\n      }\n    );\n}\n","import {t} from 'app/locale';\nimport slugify from 'app/utils/slugify';\nimport {JsonFormObject} from 'app/views/settings/components/forms/type';\n\n// Export route to make these forms searchable by label/help\nexport const route = '/settings/:orgId/teams/:teamId/settings/';\n\nconst formGroups: JsonFormObject[] = [\n  {\n    // Form \"section\"/\"panel\"\n    title: 'Team Settings',\n    fields: [\n      {\n        name: 'slug',\n        type: 'string',\n        required: true,\n        label: t('Name'),\n        placeholder: 'e.g. api-team',\n        help: t('A unique ID used to identify the team'),\n        disabled: ({access}) => !access.has('team:write'),\n        transformInput: slugify,\n\n        saveOnBlur: false,\n        saveMessageAlertType: 'info',\n        saveMessage: t('You will be redirected to the new team slug after saving'),\n      },\n    ],\n  },\n];\n\nexport default formGroups;\n","// XXX: This is NOT an exhaustive slugify function\n// Only forces lowercase and replaces spaces with hyphens\nexport default function slugify(str: any): string {\n  return typeof str === 'string' ? str.toLowerCase().replace(' ', '-') : '';\n}\n","import React from 'react';\nimport DocumentTitle from 'react-document-title';\n\nimport AsyncComponent from 'app/components/asyncComponent';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    const title = this.getTitle();\n    return (\n      <DocumentTitle title={`${title ? `${title} - ` : ''}Sentry`}>\n        {this.renderComponent() as React.ReactChild}\n      </DocumentTitle>\n    );\n  }\n}\n","import React from 'react';\n\nimport {Panel, PanelBody, PanelHeader} from 'app/components/panels';\nimport {Scope} from 'app/types';\nimport {sanitizeQuerySelector} from 'app/utils/sanitizeQuerySelector';\nimport FieldFromConfig from 'app/views/settings/components/forms/fieldFromConfig';\n\nimport {FieldObject, JsonFormObject} from './type';\n\ntype Props = {\n  /**\n   * Panel title\n   */\n  title?: React.ReactNode;\n\n  /**\n   * List of fields to render\n   */\n  fields: FieldObject[];\n\n  access?: Set<Scope>;\n  features?: Record<string, any>;\n\n  additionalFieldProps: {[key: string]: any};\n\n  /**\n   * The name of the field that should be highlighted\n   */\n  highlighted?: string;\n\n  /**\n   * Renders inside of PanelBody at the start\n   */\n  renderHeader?: (arg: JsonFormObject) => React.ReactNode;\n\n  /**\n   * Renders inside of PanelBody before PanelBody close\n   */\n  renderFooter?: (arg: JsonFormObject) => React.ReactNode;\n\n  /**\n   * Disables the entire form\n   */\n  disabled?: boolean;\n};\n\nexport default class FormPanel extends React.Component<Props> {\n  render() {\n    const {\n      title,\n      fields,\n      access,\n      disabled,\n      additionalFieldProps,\n      renderFooter,\n      renderHeader,\n      ...otherProps\n    } = this.props;\n\n    return (\n      <Panel id={typeof title === 'string' ? sanitizeQuerySelector(title) : undefined}>\n        {title && <PanelHeader>{title}</PanelHeader>}\n        <PanelBody>\n          {typeof renderHeader === 'function' && renderHeader({title, fields})}\n\n          {fields.map(field => {\n            if (typeof field === 'function') {\n              return field();\n            }\n\n            const {defaultValue: _, ...fieldWithoutDefaultValue} = field;\n\n            // Allow the form panel disabled prop to override the fields\n            // disabled prop, with fallback to the fields disabled state.\n            if (disabled === true) {\n              fieldWithoutDefaultValue.disabled = true;\n              fieldWithoutDefaultValue.disabledReason = undefined;\n            }\n\n            return (\n              <FieldFromConfig\n                access={access}\n                disabled={disabled}\n                key={field.name}\n                {...otherProps}\n                {...additionalFieldProps}\n                field={fieldWithoutDefaultValue}\n                highlighted={this.props.highlighted === `#${field.name}`}\n              />\n            );\n          })}\n          {typeof renderFooter === 'function' && renderFooter({title, fields})}\n        </PanelBody>\n      </Panel>\n    );\n  }\n}\n","import React from 'react';\nimport * as Sentry from '@sentry/react';\nimport {Location} from 'history';\nimport PropTypes from 'prop-types';\nimport {Box} from 'reflexbox'; // eslint-disable-line no-restricted-imports\nimport scrollToElement from 'scroll-to-element';\n\nimport {defined} from 'app/utils';\nimport {sanitizeQuerySelector} from 'app/utils/sanitizeQuerySelector';\n\nimport FormPanel from './formPanel';\nimport {Field, FieldObject, JsonFormObject} from './type';\n\ntype DefaultProps = {\n  additionalFieldProps: {[key: string]: any};\n};\n\ntype Props = {\n  /**\n   * Fields that are grouped by \"section\"\n   */\n  forms?: JsonFormObject[];\n\n  /**\n   * If `forms` is not defined, `title` + `fields` must be required.\n   * Allows more fine grain control of title/fields\n   */\n  fields?: FieldObject[];\n  location?: Location;\n} & DefaultProps &\n  Omit<\n    React.ComponentProps<typeof FormPanel>,\n    'highlighted' | 'fields' | 'additionalFieldProps'\n  >;\n\ntype Context = {\n  location?: Location;\n};\n\ntype State = {\n  // Field name that should be highlighted\n  highlighted?: string;\n};\n\nclass JsonForm extends React.Component<Props, State> {\n  static contextTypes = {\n    location: PropTypes.object,\n  };\n\n  static defaultProps: DefaultProps = {\n    additionalFieldProps: {},\n  };\n\n  state: State = {\n    highlighted: getLocation(this.props, this.context).hash,\n  };\n\n  componentDidMount() {\n    this.scrollToHash();\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps: Props) {\n    if (\n      getLocation(this.props, this.context).hash !==\n      getLocation(nextProps, this.context).hash\n    ) {\n      const hash = getLocation(nextProps, this.context).hash;\n      this.scrollToHash(hash);\n      this.setState({highlighted: hash});\n    }\n  }\n\n  scrollToHash(toHash?: string): void {\n    const hash = toHash || getLocation(this.props, this.context).hash;\n\n    if (!hash) {\n      return;\n    }\n\n    // Push onto callback queue so it runs after the DOM is updated,\n    // this is required when navigating from a different page so that\n    // the element is rendered on the page before trying to getElementById.\n    try {\n      scrollToElement(sanitizeQuerySelector(decodeURIComponent(hash)), {\n        align: 'middle',\n        offset: -100,\n      });\n    } catch (err) {\n      Sentry.captureException(err);\n    }\n  }\n\n  shouldDisplayForm(fields: FieldObject[]) {\n    const fieldsWithVisibleProp = fields.filter(\n      field => typeof field !== 'function' && defined(field?.visible)\n    ) as Array<Omit<Field, 'visible'> & Required<Pick<Field, 'visible'>>>;\n\n    if (fields.length === fieldsWithVisibleProp.length) {\n      const {additionalFieldProps, ...props} = this.props;\n\n      const areAllFieldsHidden = fieldsWithVisibleProp.every(field => {\n        if (typeof field.visible === 'function') {\n          return !field.visible({...props, ...additionalFieldProps});\n        }\n        return !field.visible;\n      });\n\n      return !areAllFieldsHidden;\n    }\n\n    return true;\n  }\n\n  renderForm({\n    fields,\n    formPanelProps,\n    title,\n  }: {\n    fields: FieldObject[];\n    formPanelProps: Pick<\n      Props,\n      | 'access'\n      | 'disabled'\n      | 'features'\n      | 'additionalFieldProps'\n      | 'renderFooter'\n      | 'renderHeader'\n    > &\n      Pick<State, 'highlighted'>;\n    title?: React.ReactNode;\n  }) {\n    const shouldDisplayForm = this.shouldDisplayForm(fields);\n\n    if (\n      !shouldDisplayForm &&\n      !formPanelProps?.renderFooter &&\n      !formPanelProps?.renderHeader\n    ) {\n      return null;\n    }\n\n    return <FormPanel title={title} fields={fields} {...formPanelProps} />;\n  }\n\n  render() {\n    const {\n      access,\n      fields,\n      title,\n      forms,\n      disabled,\n      features,\n      additionalFieldProps,\n      renderFooter,\n      renderHeader,\n      location: _location,\n      ...otherProps\n    } = this.props;\n\n    const formPanelProps = {\n      access,\n      disabled,\n      features,\n      additionalFieldProps,\n      renderFooter,\n      renderHeader,\n      highlighted: this.state.highlighted,\n    };\n\n    return (\n      <Box {...otherProps}>\n        {typeof forms !== 'undefined' &&\n          forms.map((formGroup, i) => (\n            <React.Fragment key={i}>\n              {this.renderForm({formPanelProps, ...formGroup})}\n            </React.Fragment>\n          ))}\n        {typeof forms === 'undefined' &&\n          typeof fields !== 'undefined' &&\n          this.renderForm({fields, formPanelProps, title})}\n      </Box>\n    );\n  }\n}\n\nexport default JsonForm;\n\nfunction getLocation(props: Props, context: Context): Location | {hash?: string} {\n  return props.location || context.location || {};\n}\n","import {updateTeam} from 'app/actionCreators/teams';\nimport FormModel from 'app/views/settings/components/forms/model';\n\nclass TeamFormModel extends FormModel {\n  public orgId: string;\n  public teamId: string;\n\n  constructor(orgId: string, teamId: string) {\n    super();\n    this.orgId = orgId;\n    this.teamId = teamId;\n  }\n\n  doApiRequest({data}) {\n    return new Promise((resolve, reject) =>\n      updateTeam(\n        this.api,\n        {\n          orgId: this.orgId,\n          teamId: this.teamId,\n          data,\n        },\n        {\n          success: resolve,\n          error: reject,\n        }\n      )\n    );\n  }\n}\n\nexport default TeamFormModel;\n","import React from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport PropTypes from 'prop-types';\n\nimport {addErrorMessage, addSuccessMessage} from 'app/actionCreators/indicator';\nimport {removeTeam, updateTeamSuccess} from 'app/actionCreators/teams';\nimport Button from 'app/components/button';\nimport Confirm from 'app/components/confirm';\nimport {Panel, PanelHeader} from 'app/components/panels';\nimport teamSettingsFields from 'app/data/forms/teamSettingsFields';\nimport {IconDelete} from 'app/icons';\nimport {t, tct} from 'app/locale';\nimport SentryTypes from 'app/sentryTypes';\nimport {Scope, Team} from 'app/types';\nimport AsyncView from 'app/views/asyncView';\nimport Field from 'app/views/settings/components/forms/field';\nimport Form from 'app/views/settings/components/forms/form';\nimport JsonForm from 'app/views/settings/components/forms/jsonForm';\nimport FormModel from 'app/views/settings/components/forms/model';\n\nimport TeamModel from './model';\n\ntype Props = {\n  team: Team;\n} & RouteComponentProps<{orgId: string; teamId: string}, {}>;\n\ntype State = AsyncView['state'];\n\nexport default class TeamSettings extends AsyncView<Props, State> {\n  static contextTypes = {\n    router: PropTypes.object,\n    location: PropTypes.object,\n    organization: SentryTypes.Organization,\n  };\n\n  model = new TeamModel(this.props.params.orgId, this.props.params.teamId);\n\n  getTitle() {\n    return 'Team Settings';\n  }\n\n  getEndpoints() {\n    return [];\n  }\n\n  handleSubmitSuccess = (resp: any, model: FormModel, id?: string) => {\n    updateTeamSuccess(resp.slug, resp);\n    if (id === 'slug') {\n      addSuccessMessage(t('Team name changed'));\n      this.props.router.replace(\n        `/settings/${this.props.params.orgId}/teams/${model.getValue(id)}/settings/`\n      );\n      this.setState({loading: true});\n    }\n  };\n\n  handleRemoveTeam = async () => {\n    await removeTeam(this.api, this.props.params);\n    this.props.router.replace(`/settings/${this.props.params.orgId}/teams/`);\n  };\n\n  renderBody() {\n    const {location, organization} = this.context;\n    const {team} = this.props;\n\n    const access = new Set<Scope>(organization.access);\n\n    return (\n      <React.Fragment>\n        <Form\n          model={this.model}\n          apiMethod=\"PUT\"\n          saveOnBlur\n          allowUndo\n          onSubmitSuccess={this.handleSubmitSuccess}\n          onSubmitError={() => addErrorMessage(t('Unable to save change'))}\n          initialData={{\n            name: team.name,\n            slug: team.slug,\n          }}\n        >\n          <JsonForm access={access} location={location} forms={teamSettingsFields} />\n        </Form>\n\n        <Panel>\n          <PanelHeader>{t('Remove Team')}</PanelHeader>\n          <Field\n            help={t(\n              \"This may affect team members' access to projects and associated alert delivery.\"\n            )}\n          >\n            <div>\n              <Confirm\n                disabled={!access.has('team:admin')}\n                onConfirm={this.handleRemoveTeam}\n                priority=\"danger\"\n                message={tct('Are you sure you want to remove the team [team]?', {\n                  team: `#${team.slug}`,\n                })}\n              >\n                <Button\n                  icon={<IconDelete />}\n                  priority=\"danger\"\n                  disabled={!access.has('team:admin')}\n                >\n                  {t('Remove Team')}\n                </Button>\n              </Confirm>\n            </div>\n          </Field>\n        </Panel>\n      </React.Fragment>\n    );\n  }\n}\n"],"sourceRoot":""}