{"version":3,"sources":["webpack:///./app/data/forms/accountNotificationSettings.tsx","webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/account/notifications/fields.tsx","webpack:///./app/views/settings/account/accountNotificationFineTuning.tsx","webpack:///./app/views/settings/components/forms/formPanel.tsx","webpack:///./app/views/settings/components/forms/jsonForm.tsx","webpack:///./app/views/settings/components/settingsPageHeader.tsx"],"names":["route","fields","subscribeByDefault","name","type","label","t","help","workflowNotifications","choices","weeklyReports","disabled","deployNotifications","personalActivityNotifications","selfAssignOnResolve","title","AsyncView","this","getTitle","renderComponent","AsyncComponent","ACCOUNT_NOTIFICATION_FIELDS","alerts","description","defaultValue","defaultFieldName","workflow","deploy","reports","email","PanelBodyLineItem","PanelBody","p","theme","innerBorder","isGroupedByProject","indexOf","AccountNotificationsByProject","projects","field","projectsByOrg","reduce","acc","project","orgSlug","organization","slug","hasOwnProperty","push","groupByOrganization","fieldConfig","data","Object","values","map","org","id","projectFields","key","f","AccountNotificationsByOrganization","organizations","AccountNotificationsByOrganizationContainer","withOrganizations","AccountNotificationFineTuning","fineTuneType","props","params","endpoints","state","emails","filter","isVerified","sort","a","b","isPrimary","notifications","fineTuneData","projectsPageLinks","isProject","getEndpoints","stateKey","url","hasProjects","length","emailChoices","saveOnBlur","apiMethod","apiEndpoint","initialData","hasButtons","Heading","renderSearchInput","placeholder","pageLinks","FormPanel","access","additionalFieldProps","renderFooter","renderHeader","otherProps","sanitizeQuerySelector","undefined","fieldWithoutDefaultValue","disabledReason","highlighted","React","JsonForm","getLocation","context","hash","scrollToHash","nextProps","setState","toHash","scrollToElement","decodeURIComponent","align","offset","err","Sentry","fieldsWithVisibleProp","defined","visible","every","formPanelProps","shouldDisplayForm","forms","features","location","formGroup","i","renderForm","PropTypes","UnstyledSettingsPageHeader","icon","subtitle","action","tabs","noTitleStyles","body","isNarrow","TitleAndActions","TitleWrapper","Icon","Title","styled","Subtitle","Action","BodyWrapper","TabsWrapper","space","gray400","fontSizeLarge","SettingsPageHeader"],"mappings":"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","file":"AccountNotificationsFineTuning.d5889e7c16cc2ea50da0.js","sourcesContent":["import {t} from 'app/locale';\nimport {Field, JsonFormObject} from 'app/views/settings/components/forms/type';\n\n// Export route to make these forms searchable by label/help\nexport const route = '/settings/account/notifications/';\n\nexport const fields: {[key: string]: Field} = {\n  subscribeByDefault: {\n    name: 'subscribeByDefault',\n    type: 'boolean',\n    label: t('Send Me Alerts'),\n    // TODO(billy): Make this a real link\n    help: t(\n      'Enable this to receive notifications for Alerts sent to your teams. You will always receive alerts configured to be sent directly to you.'\n    ),\n  },\n  workflowNotifications: {\n    name: 'workflowNotifications',\n    type: 'radio',\n    label: t('Send Me Workflow Notifications'),\n    choices: [\n      [0, t('Always')],\n      [1, t('Only On Issues I Subscribe To')],\n      [2, t('Never')],\n    ],\n    help: t('E.g. changes in issue assignment, resolution status, and comments.'),\n  },\n  weeklyReports: {\n    // Form is not visible because currently not implemented\n    name: 'weeklyReports',\n    type: 'boolean',\n    label: t('Send Me Weekly Reports'),\n    help: t(\"Reports contain a summary of what's happened within your organization.\"),\n    disabled: true,\n  },\n  deployNotifications: {\n    name: 'deployNotifications',\n    type: 'radio',\n    label: t('Send Me Deploy Notifications'),\n    choices: [\n      [2, t('Always')],\n      [3, t('Only On Deploys With My Commits')],\n      [4, t('Never')],\n    ],\n    help: t('Deploy emails include release, environment and commit overviews.'),\n  },\n  personalActivityNotifications: {\n    name: 'personalActivityNotifications',\n    type: 'boolean',\n    label: t('Notify Me About My Own Activity'),\n    help: t('Enable this to receive notifications about your own actions on Sentry.'),\n  },\n  selfAssignOnResolve: {\n    name: 'selfAssignOnResolve',\n    type: 'boolean',\n    label: t(\"Claim Unassigned Issues I've Resolved\"),\n    help: t(\"You'll receive notifications about any changes that happen afterwards.\"),\n  },\n};\n\nconst formGroups: JsonFormObject[] = [\n  {\n    title: t('Alerts'),\n    fields: [fields.subscribeByDefault],\n  },\n\n  {\n    title: t('Workflow Notifications'),\n    fields: [fields.workflowNotifications],\n  },\n\n  {\n    title: t('Email Routing'),\n    fields: [],\n  },\n\n  {\n    title: t('Weekly Reports'),\n    fields: [],\n  },\n\n  {\n    title: t('Deploy Notifications'),\n    fields: [fields.deployNotifications],\n  },\n\n  {\n    title: t('My Activity'),\n    fields: [fields.personalActivityNotifications, fields.selfAssignOnResolve],\n  },\n];\n\nexport default formGroups;\n","import React from 'react';\nimport DocumentTitle from 'react-document-title';\n\nimport AsyncComponent from 'app/components/asyncComponent';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    const title = this.getTitle();\n    return (\n      <DocumentTitle title={`${title ? `${title} - ` : ''}Sentry`}>\n        {this.renderComponent() as React.ReactChild}\n      </DocumentTitle>\n    );\n  }\n}\n","import {t} from 'app/locale';\n\nexport type FineTuneField = {\n  title: string;\n  description: string;\n  type: 'select';\n  choices?: string[][];\n  defaultValue?: string;\n  defaultFieldName?: string;\n};\n\nexport const ACCOUNT_NOTIFICATION_FIELDS: Record<string, FineTuneField> = {\n  alerts: {\n    title: 'Project Alerts',\n    description: t('Control alerts that you receive per project.'),\n    type: 'select',\n    choices: [\n      ['-1', t('Default')],\n      ['1', t('On')],\n      ['0', t('Off')],\n    ],\n    defaultValue: '-1',\n    defaultFieldName: 'subscribeByDefault',\n  },\n  workflow: {\n    title: 'Workflow Notifications',\n    description: t(\n      'Control workflow notifications, e.g. changes in issue assignment, resolution status, and comments.'\n    ),\n    type: 'select',\n    choices: [\n      ['-1', t('Default')],\n      ['0', t('Always')],\n      ['1', t('Only on issues I subscribe to')],\n      ['2', t('Never')],\n    ],\n    defaultValue: '-1',\n    defaultFieldName: 'workflowNotifications',\n  },\n  deploy: {\n    title: t('Deploy Notifications'),\n    description: t(\n      'Control deploy notifications that include release, environment, and commit overviews.'\n    ),\n    type: 'select',\n    choices: [\n      ['-1', t('Default')],\n      ['2', t('Always')],\n      ['3', t('Only on deploys with my commits')],\n      ['4', t('Never')],\n    ],\n    defaultValue: '-1',\n    defaultFieldName: 'deployNotifications',\n  },\n  reports: {\n    title: t('Weekly Reports'),\n    description: t(\n      \"Reports contain a summary of what's happened within the organization.\"\n    ),\n    type: 'select',\n    // API only saves organizations that have this disabled, so we should default to \"On\"\n    defaultValue: '1',\n    choices: [\n      ['1', t('On')],\n      ['0', t('Off')],\n    ],\n    defaultFieldName: 'weeklyReports',\n  },\n\n  email: {\n    title: t('Email Routing'),\n    description: t(\n      'On a per project basis, route emails to an alternative email address.'\n    ),\n    type: 'select',\n    // No choices here because it's going to have dynamic content\n    // Component will create choices\n  },\n};\n","import React from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport Pagination from 'app/components/pagination';\nimport {Panel, PanelBody, PanelHeader} from 'app/components/panels';\nimport {fields} from 'app/data/forms/accountNotificationSettings';\nimport {t} from 'app/locale';\nimport {Organization, Project, UserEmail} from 'app/types';\nimport withOrganizations from 'app/utils/withOrganizations';\nimport AsyncView from 'app/views/asyncView';\nimport {\n  ACCOUNT_NOTIFICATION_FIELDS,\n  FineTuneField,\n} from 'app/views/settings/account/notifications/fields';\nimport EmptyMessage from 'app/views/settings/components/emptyMessage';\nimport Form from 'app/views/settings/components/forms/form';\nimport JsonForm from 'app/views/settings/components/forms/jsonForm';\nimport SelectField from 'app/views/settings/components/forms/selectField';\nimport SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';\nimport TextBlock from 'app/views/settings/components/text/textBlock';\n\nconst PanelBodyLineItem = styled(PanelBody)`\n  font-size: 1.4rem;\n  &:not(:last-child) {\n    border-bottom: 1px solid ${p => p.theme.innerBorder};\n  }\n`;\n\n// Which fine tuning parts are grouped by project\nconst isGroupedByProject = (type: string) =>\n  ['alerts', 'workflow', 'email'].indexOf(type) > -1;\n\nfunction groupByOrganization(projects: Project[]) {\n  return projects.reduce<\n    Record<string, {organization: Organization; projects: Project[]}>\n  >((acc, project) => {\n    const orgSlug = project.organization.slug;\n    if (acc.hasOwnProperty(orgSlug)) {\n      acc[orgSlug].projects.push(project);\n    } else {\n      acc[orgSlug] = {\n        organization: project.organization,\n        projects: [project],\n      };\n    }\n    return acc;\n  }, {});\n}\n\ntype ANBPProps = {\n  projects: Project[];\n  field: FineTuneField;\n};\n\nconst AccountNotificationsByProject = ({projects, field}: ANBPProps) => {\n  const projectsByOrg = groupByOrganization(projects);\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const {title, description, ...fieldConfig} = field;\n\n  // Display as select box in this view regardless of the type specified in the config\n  const data = Object.values(projectsByOrg).map(org => ({\n    name: org.organization.name,\n    projects: org.projects.map(project => ({\n      ...fieldConfig,\n      // `name` key refers to field name\n      // we use project.id because slugs are not unique across orgs\n      name: project.id,\n      label: project.slug,\n    })),\n  }));\n\n  return (\n    <React.Fragment>\n      {data.map(({name, projects: projectFields}) => (\n        <div key={name}>\n          <PanelHeader>{name}</PanelHeader>\n          {projectFields.map(f => (\n            <PanelBodyLineItem key={f.name}>\n              <SelectField\n                defaultValue={f.defaultValue}\n                name={f.name}\n                choices={f.choices}\n                label={f.label}\n              />\n            </PanelBodyLineItem>\n          ))}\n        </div>\n      ))}\n    </React.Fragment>\n  );\n};\n\ntype ANBOProps = {\n  organizations: Organization[];\n  field: FineTuneField;\n};\n\nconst AccountNotificationsByOrganization = ({organizations, field}: ANBOProps) => {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const {title, description, ...fieldConfig} = field;\n\n  // Display as select box in this view regardless of the type specified in the config\n  const data = organizations.map(org => ({\n    ...fieldConfig,\n    // `name` key refers to field name\n    // we use org.id to remain consistent project.id use (which is required because slugs are not unique across orgs)\n    name: org.id,\n    label: org.slug,\n  }));\n\n  return (\n    <React.Fragment>\n      {data.map(f => (\n        <PanelBodyLineItem key={f.name}>\n          <SelectField\n            defaultValue={f.defaultValue}\n            name={f.name}\n            choices={f.choices}\n            label={f.label}\n          />\n        </PanelBodyLineItem>\n      ))}\n    </React.Fragment>\n  );\n};\n\nconst AccountNotificationsByOrganizationContainer = withOrganizations(\n  AccountNotificationsByOrganization\n);\n\ntype Props = AsyncView['props'] & RouteComponentProps<{fineTuneType: string}, {}>;\n\ntype State = AsyncView['state'] & {\n  emails: UserEmail[] | null;\n  projects: Project[] | null;\n  notifications: Record<string, any> | null;\n  fineTuneData: Record<string, any> | null;\n};\n\nexport default class AccountNotificationFineTuning extends AsyncView<Props, State> {\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    const {fineTuneType} = this.props.params;\n    const endpoints = [\n      ['notifications', '/users/me/notifications/'],\n      ['fineTuneData', `/users/me/notifications/${fineTuneType}/`],\n    ];\n\n    if (isGroupedByProject(fineTuneType)) {\n      endpoints.push(['projects', '/projects/']);\n    }\n\n    endpoints.push(['emails', '/users/me/emails/']);\n    if (fineTuneType === 'email') {\n      endpoints.push(['emails', '/users/me/emails/']);\n    }\n\n    return endpoints as ReturnType<AsyncView['getEndpoints']>;\n  }\n\n  // Return a sorted list of user's verified emails\n  get emailChoices() {\n    return (\n      this.state.emails\n        ?.filter(({isVerified}) => isVerified)\n        ?.sort((a, b) => {\n          // Sort by primary -> email\n          if (a.isPrimary) {\n            return -1;\n          } else if (b.isPrimary) {\n            return 1;\n          }\n\n          return a.email < b.email ? -1 : 1;\n        }) ?? []\n    );\n  }\n\n  renderBody() {\n    const {fineTuneType} = this.props.params;\n    const {notifications, projects, fineTuneData, projectsPageLinks} = this.state;\n\n    const isProject = isGroupedByProject(fineTuneType);\n    const field = ACCOUNT_NOTIFICATION_FIELDS[fineTuneType];\n    const {title, description} = field;\n\n    const [stateKey, url] = isProject ? this.getEndpoints()[2] : [];\n    const hasProjects = !!projects?.length;\n\n    if (fineTuneType === 'email') {\n      // Fetch verified email addresses\n      field.choices = this.emailChoices.map(({email}) => [email, email]);\n    }\n\n    if (!notifications || !fineTuneData) {\n      return null;\n    }\n\n    return (\n      <div>\n        <SettingsPageHeader title={title} />\n        {description && <TextBlock>{description}</TextBlock>}\n\n        {field &&\n          field.defaultFieldName &&\n          // not implemented yet\n          field.defaultFieldName !== 'weeklyReports' && (\n            <Form\n              saveOnBlur\n              apiMethod=\"PUT\"\n              apiEndpoint=\"/users/me/notifications/\"\n              initialData={notifications}\n            >\n              <JsonForm\n                title={`Default ${title}`}\n                fields={[fields[field.defaultFieldName]]}\n              />\n            </Form>\n          )}\n        <Panel>\n          <PanelBody>\n            <PanelHeader hasButtons={isProject}>\n              <Heading>{isProject ? t('Projects') : t('Organizations')}</Heading>\n              <div>\n                {isProject &&\n                  this.renderSearchInput({\n                    placeholder: t('Search Projects'),\n                    url,\n                    stateKey,\n                  })}\n              </div>\n            </PanelHeader>\n\n            <Form\n              saveOnBlur\n              apiMethod=\"PUT\"\n              apiEndpoint={`/users/me/notifications/${fineTuneType}/`}\n              initialData={fineTuneData}\n            >\n              {isProject && hasProjects && (\n                <AccountNotificationsByProject projects={projects!} field={field} />\n              )}\n\n              {isProject && !hasProjects && (\n                <EmptyMessage>{t('No projects found')}</EmptyMessage>\n              )}\n\n              {!isProject && (\n                <AccountNotificationsByOrganizationContainer field={field} />\n              )}\n            </Form>\n          </PanelBody>\n        </Panel>\n\n        {projects && <Pagination pageLinks={projectsPageLinks} {...this.props} />}\n      </div>\n    );\n  }\n}\n\nconst Heading = styled('div')`\n  flex: 1;\n`;\n","import React from 'react';\n\nimport {Panel, PanelBody, PanelHeader} from 'app/components/panels';\nimport {Scope} from 'app/types';\nimport {sanitizeQuerySelector} from 'app/utils/sanitizeQuerySelector';\nimport FieldFromConfig from 'app/views/settings/components/forms/fieldFromConfig';\n\nimport {FieldObject, JsonFormObject} from './type';\n\ntype Props = {\n  /**\n   * Panel title\n   */\n  title?: React.ReactNode;\n\n  /**\n   * List of fields to render\n   */\n  fields: FieldObject[];\n\n  access?: Set<Scope>;\n  features?: Record<string, any>;\n\n  additionalFieldProps: {[key: string]: any};\n\n  /**\n   * The name of the field that should be highlighted\n   */\n  highlighted?: string;\n\n  /**\n   * Renders inside of PanelBody at the start\n   */\n  renderHeader?: (arg: JsonFormObject) => React.ReactNode;\n\n  /**\n   * Renders inside of PanelBody before PanelBody close\n   */\n  renderFooter?: (arg: JsonFormObject) => React.ReactNode;\n\n  /**\n   * Disables the entire form\n   */\n  disabled?: boolean;\n};\n\nexport default class FormPanel extends React.Component<Props> {\n  render() {\n    const {\n      title,\n      fields,\n      access,\n      disabled,\n      additionalFieldProps,\n      renderFooter,\n      renderHeader,\n      ...otherProps\n    } = this.props;\n\n    return (\n      <Panel id={typeof title === 'string' ? sanitizeQuerySelector(title) : undefined}>\n        {title && <PanelHeader>{title}</PanelHeader>}\n        <PanelBody>\n          {typeof renderHeader === 'function' && renderHeader({title, fields})}\n\n          {fields.map(field => {\n            if (typeof field === 'function') {\n              return field();\n            }\n\n            const {defaultValue: _, ...fieldWithoutDefaultValue} = field;\n\n            // Allow the form panel disabled prop to override the fields\n            // disabled prop, with fallback to the fields disabled state.\n            if (disabled === true) {\n              fieldWithoutDefaultValue.disabled = true;\n              fieldWithoutDefaultValue.disabledReason = undefined;\n            }\n\n            return (\n              <FieldFromConfig\n                access={access}\n                disabled={disabled}\n                key={field.name}\n                {...otherProps}\n                {...additionalFieldProps}\n                field={fieldWithoutDefaultValue}\n                highlighted={this.props.highlighted === `#${field.name}`}\n              />\n            );\n          })}\n          {typeof renderFooter === 'function' && renderFooter({title, fields})}\n        </PanelBody>\n      </Panel>\n    );\n  }\n}\n","import React from 'react';\nimport * as Sentry from '@sentry/react';\nimport {Location} from 'history';\nimport PropTypes from 'prop-types';\nimport {Box} from 'reflexbox'; // eslint-disable-line no-restricted-imports\nimport scrollToElement from 'scroll-to-element';\n\nimport {defined} from 'app/utils';\nimport {sanitizeQuerySelector} from 'app/utils/sanitizeQuerySelector';\n\nimport FormPanel from './formPanel';\nimport {Field, FieldObject, JsonFormObject} from './type';\n\ntype DefaultProps = {\n  additionalFieldProps: {[key: string]: any};\n};\n\ntype Props = {\n  /**\n   * Fields that are grouped by \"section\"\n   */\n  forms?: JsonFormObject[];\n\n  /**\n   * If `forms` is not defined, `title` + `fields` must be required.\n   * Allows more fine grain control of title/fields\n   */\n  fields?: FieldObject[];\n  location?: Location;\n} & DefaultProps &\n  Omit<\n    React.ComponentProps<typeof FormPanel>,\n    'highlighted' | 'fields' | 'additionalFieldProps'\n  >;\n\ntype Context = {\n  location?: Location;\n};\n\ntype State = {\n  // Field name that should be highlighted\n  highlighted?: string;\n};\n\nclass JsonForm extends React.Component<Props, State> {\n  static contextTypes = {\n    location: PropTypes.object,\n  };\n\n  static defaultProps: DefaultProps = {\n    additionalFieldProps: {},\n  };\n\n  state: State = {\n    highlighted: getLocation(this.props, this.context).hash,\n  };\n\n  componentDidMount() {\n    this.scrollToHash();\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps: Props) {\n    if (\n      getLocation(this.props, this.context).hash !==\n      getLocation(nextProps, this.context).hash\n    ) {\n      const hash = getLocation(nextProps, this.context).hash;\n      this.scrollToHash(hash);\n      this.setState({highlighted: hash});\n    }\n  }\n\n  scrollToHash(toHash?: string): void {\n    const hash = toHash || getLocation(this.props, this.context).hash;\n\n    if (!hash) {\n      return;\n    }\n\n    // Push onto callback queue so it runs after the DOM is updated,\n    // this is required when navigating from a different page so that\n    // the element is rendered on the page before trying to getElementById.\n    try {\n      scrollToElement(sanitizeQuerySelector(decodeURIComponent(hash)), {\n        align: 'middle',\n        offset: -100,\n      });\n    } catch (err) {\n      Sentry.captureException(err);\n    }\n  }\n\n  shouldDisplayForm(fields: FieldObject[]) {\n    const fieldsWithVisibleProp = fields.filter(\n      field => typeof field !== 'function' && defined(field?.visible)\n    ) as Array<Omit<Field, 'visible'> & Required<Pick<Field, 'visible'>>>;\n\n    if (fields.length === fieldsWithVisibleProp.length) {\n      const {additionalFieldProps, ...props} = this.props;\n\n      const areAllFieldsHidden = fieldsWithVisibleProp.every(field => {\n        if (typeof field.visible === 'function') {\n          return !field.visible({...props, ...additionalFieldProps});\n        }\n        return !field.visible;\n      });\n\n      return !areAllFieldsHidden;\n    }\n\n    return true;\n  }\n\n  renderForm({\n    fields,\n    formPanelProps,\n    title,\n  }: {\n    fields: FieldObject[];\n    formPanelProps: Pick<\n      Props,\n      | 'access'\n      | 'disabled'\n      | 'features'\n      | 'additionalFieldProps'\n      | 'renderFooter'\n      | 'renderHeader'\n    > &\n      Pick<State, 'highlighted'>;\n    title?: React.ReactNode;\n  }) {\n    const shouldDisplayForm = this.shouldDisplayForm(fields);\n\n    if (\n      !shouldDisplayForm &&\n      !formPanelProps?.renderFooter &&\n      !formPanelProps?.renderHeader\n    ) {\n      return null;\n    }\n\n    return <FormPanel title={title} fields={fields} {...formPanelProps} />;\n  }\n\n  render() {\n    const {\n      access,\n      fields,\n      title,\n      forms,\n      disabled,\n      features,\n      additionalFieldProps,\n      renderFooter,\n      renderHeader,\n      location: _location,\n      ...otherProps\n    } = this.props;\n\n    const formPanelProps = {\n      access,\n      disabled,\n      features,\n      additionalFieldProps,\n      renderFooter,\n      renderHeader,\n      highlighted: this.state.highlighted,\n    };\n\n    return (\n      <Box {...otherProps}>\n        {typeof forms !== 'undefined' &&\n          forms.map((formGroup, i) => (\n            <React.Fragment key={i}>\n              {this.renderForm({formPanelProps, ...formGroup})}\n            </React.Fragment>\n          ))}\n        {typeof forms === 'undefined' &&\n          typeof fields !== 'undefined' &&\n          this.renderForm({fields, formPanelProps, title})}\n      </Box>\n    );\n  }\n}\n\nexport default JsonForm;\n\nfunction getLocation(props: Props, context: Context): Location | {hash?: string} {\n  return props.location || context.location || {};\n}\n","import React from 'react';\nimport styled from '@emotion/styled';\n\nimport {HeaderTitle} from 'app/styles/organization';\nimport space from 'app/styles/space';\n\ntype Props = {\n  // Icon left of title\n  icon?: React.ReactNode;\n\n  // The title\n  title: React.ReactNode;\n  subtitle?: React.ReactNode;\n\n  // Disables font styles in the title. Allows for more custom titles.\n  noTitleStyles?: boolean;\n  className?: string;\n\n  // CTA button\n  action?: React.ReactNode;\n\n  body?: React.ReactNode;\n\n  tabs?: React.ReactNode;\n};\n\nclass UnstyledSettingsPageHeader extends React.Component<Props> {\n  static defaultProps = {\n    noTitleStyles: false,\n  };\n\n  render() {\n    const {\n      icon,\n      title,\n      subtitle,\n      action,\n      tabs,\n      noTitleStyles,\n      body,\n      ...props\n    } = this.props;\n\n    // If Header is narrow, use align-items to center <Action>.\n    // Otherwise, use a fixed margin to prevent an odd alignment.\n    // This is needed as Actions could be a button or a dropdown.\n    const isNarrow = !subtitle;\n\n    return (\n      <div {...props}>\n        <TitleAndActions isNarrow={isNarrow}>\n          <TitleWrapper>\n            {icon && <Icon>{icon}</Icon>}\n            {title && (\n              <Title tabs={tabs} styled={noTitleStyles}>\n                <HeaderTitle>{title}</HeaderTitle>\n                {subtitle && <Subtitle>{subtitle}</Subtitle>}\n              </Title>\n            )}\n          </TitleWrapper>\n          {action && <Action isNarrow={isNarrow}>{action}</Action>}\n        </TitleAndActions>\n\n        {body && <BodyWrapper>{body}</BodyWrapper>}\n        {tabs && <TabsWrapper>{tabs}</TabsWrapper>}\n      </div>\n    );\n  }\n}\n\ntype TitleProps = {\n  styled?: boolean;\n  tabs?: React.ReactNode;\n};\n\nconst TitleAndActions = styled('div')<{isNarrow?: boolean}>`\n  display: flex;\n  align-items: ${p => (p.isNarrow ? 'center' : 'flex-start')};\n`;\nconst TitleWrapper = styled('div')`\n  flex: 1;\n`;\n\nconst Title = styled('div')<TitleProps & React.HTMLProps<HTMLDivElement>>`\n  ${p => !p.styled && `font-size: 20px; font-weight: 600;`};\n  margin: ${space(4)} ${space(2)} ${space(3)} 0;\n`;\nconst Subtitle = styled('div')`\n  color: ${p => p.theme.gray400};\n  font-weight: 400;\n  font-size: ${p => p.theme.fontSizeLarge};\n  padding: ${space(1.5)} 0 0;\n`;\n\nconst Icon = styled('div')`\n  margin-right: ${space(1)};\n`;\n\nconst Action = styled('div')<{isNarrow?: boolean}>`\n  margin-top: ${p => (p.isNarrow ? '0' : space(4))};\n`;\n\nconst SettingsPageHeader = styled(UnstyledSettingsPageHeader)<\n  Omit<React.HTMLProps<HTMLDivElement>, keyof Props> & Props\n>`\n  font-size: 14px;\n  margin-top: -${space(4)};\n`;\n\nconst BodyWrapper = styled('div')`\n  flex: 1;\n  margin: 0 0 ${space(3)};\n`;\nconst TabsWrapper = styled('div')`\n  flex: 1;\n  margin: 0; /* sentry/components/navTabs has added margin */\n`;\n\nexport default SettingsPageHeader;\n"],"sourceRoot":""}