{"version":3,"sources":["webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/components/settingsPageHeader.tsx","webpack:///./app/views/settings/project/projectServiceHooks.tsx"],"names":["AsyncView","title","this","getTitle","renderComponent","AsyncComponent","UnstyledSettingsPageHeader","props","icon","subtitle","action","tabs","noTitleStyles","body","isNarrow","TitleAndActions","TitleWrapper","Icon","Title","styled","Subtitle","Action","BodyWrapper","TabsWrapper","React","p","space","theme","gray400","fontSizeLarge","SettingsPageHeader","ServiceHookRow","orgId","projectId","hook","onToggleActive","label","Link","data-test-id","to","id","value","url","help","events","length","join","t","isActive","status","size","toggle","ProjectServiceHooks","params","hookList","state","addLoadingMessage","api","request","method","data","success","clearIndicators","setState","map","h","error","addErrorMessage","key","type","bind","renderResults","renderEmpty","access","Set","context","organization","has","priority","isCircled","router","PropTypes"],"mappings":"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","file":"ProjectServiceHooks.49e2566c0428a962ccf0.js","sourcesContent":["import React from 'react';\nimport DocumentTitle from 'react-document-title';\n\nimport AsyncComponent from 'app/components/asyncComponent';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    const title = this.getTitle();\n    return (\n      <DocumentTitle title={`${title ? `${title} - ` : ''}Sentry`}>\n        {this.renderComponent() as React.ReactChild}\n      </DocumentTitle>\n    );\n  }\n}\n","import React from 'react';\nimport styled from '@emotion/styled';\n\nimport {HeaderTitle} from 'app/styles/organization';\nimport space from 'app/styles/space';\n\ntype Props = {\n  // Icon left of title\n  icon?: React.ReactNode;\n\n  // The title\n  title: React.ReactNode;\n  subtitle?: React.ReactNode;\n\n  // Disables font styles in the title. Allows for more custom titles.\n  noTitleStyles?: boolean;\n  className?: string;\n\n  // CTA button\n  action?: React.ReactNode;\n\n  body?: React.ReactNode;\n\n  tabs?: React.ReactNode;\n};\n\nclass UnstyledSettingsPageHeader extends React.Component<Props> {\n  static defaultProps = {\n    noTitleStyles: false,\n  };\n\n  render() {\n    const {\n      icon,\n      title,\n      subtitle,\n      action,\n      tabs,\n      noTitleStyles,\n      body,\n      ...props\n    } = this.props;\n\n    // If Header is narrow, use align-items to center <Action>.\n    // Otherwise, use a fixed margin to prevent an odd alignment.\n    // This is needed as Actions could be a button or a dropdown.\n    const isNarrow = !subtitle;\n\n    return (\n      <div {...props}>\n        <TitleAndActions isNarrow={isNarrow}>\n          <TitleWrapper>\n            {icon && <Icon>{icon}</Icon>}\n            {title && (\n              <Title tabs={tabs} styled={noTitleStyles}>\n                <HeaderTitle>{title}</HeaderTitle>\n                {subtitle && <Subtitle>{subtitle}</Subtitle>}\n              </Title>\n            )}\n          </TitleWrapper>\n          {action && <Action isNarrow={isNarrow}>{action}</Action>}\n        </TitleAndActions>\n\n        {body && <BodyWrapper>{body}</BodyWrapper>}\n        {tabs && <TabsWrapper>{tabs}</TabsWrapper>}\n      </div>\n    );\n  }\n}\n\ntype TitleProps = {\n  styled?: boolean;\n  tabs?: React.ReactNode;\n};\n\nconst TitleAndActions = styled('div')<{isNarrow?: boolean}>`\n  display: flex;\n  align-items: ${p => (p.isNarrow ? 'center' : 'flex-start')};\n`;\nconst TitleWrapper = styled('div')`\n  flex: 1;\n`;\n\nconst Title = styled('div')<TitleProps & React.HTMLProps<HTMLDivElement>>`\n  ${p => !p.styled && `font-size: 20px; font-weight: 600;`};\n  margin: ${space(4)} ${space(2)} ${space(3)} 0;\n`;\nconst Subtitle = styled('div')`\n  color: ${p => p.theme.gray400};\n  font-weight: 400;\n  font-size: ${p => p.theme.fontSizeLarge};\n  padding: ${space(1.5)} 0 0;\n`;\n\nconst Icon = styled('div')`\n  margin-right: ${space(1)};\n`;\n\nconst Action = styled('div')<{isNarrow?: boolean}>`\n  margin-top: ${p => (p.isNarrow ? '0' : space(4))};\n`;\n\nconst SettingsPageHeader = styled(UnstyledSettingsPageHeader)<\n  Omit<React.HTMLProps<HTMLDivElement>, keyof Props> & Props\n>`\n  font-size: 14px;\n  margin-top: -${space(4)};\n`;\n\nconst BodyWrapper = styled('div')`\n  flex: 1;\n  margin: 0 0 ${space(3)};\n`;\nconst TabsWrapper = styled('div')`\n  flex: 1;\n  margin: 0; /* sentry/components/navTabs has added margin */\n`;\n\nexport default SettingsPageHeader;\n","import React from 'react';\nimport {Link, WithRouterProps} from 'react-router';\nimport PropTypes from 'prop-types';\n\nimport {\n  addErrorMessage,\n  addLoadingMessage,\n  clearIndicators,\n} from 'app/actionCreators/indicator';\nimport Button from 'app/components/button';\nimport {Panel, PanelAlert, PanelBody, PanelHeader} from 'app/components/panels';\nimport Switch from 'app/components/switchButton';\nimport Truncate from 'app/components/truncate';\nimport {IconAdd, IconFlag} from 'app/icons';\nimport {t} from 'app/locale';\nimport {ServiceHook} from 'app/types';\nimport AsyncView from 'app/views/asyncView';\nimport EmptyMessage from 'app/views/settings/components/emptyMessage';\nimport Field from 'app/views/settings/components/forms/field';\nimport SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';\n\ntype RowProps = {\n  orgId: string;\n  projectId: string;\n  hook: ServiceHook;\n  onToggleActive: () => void;\n};\n\nfunction ServiceHookRow({orgId, projectId, hook, onToggleActive}: RowProps) {\n  return (\n    <Field\n      label={\n        <Link\n          data-test-id=\"project-service-hook\"\n          to={`/settings/${orgId}/projects/${projectId}/hooks/${hook.id}/`}\n        >\n          <Truncate value={hook.url} />\n        </Link>\n      }\n      help={\n        <small>\n          {hook.events && hook.events.length !== 0 ? (\n            hook.events.join(', ')\n          ) : (\n            <em>{t('no events configured')}</em>\n          )}\n        </small>\n      }\n    >\n      <Switch isActive={hook.status === 'active'} size=\"lg\" toggle={onToggleActive} />\n    </Field>\n  );\n}\n\ntype Props = WithRouterProps<{orgId: string; projectId: string}, {}>;\n\ntype State = {\n  hookList: null | ServiceHook[];\n} & AsyncView['state'];\n\nexport default class ProjectServiceHooks extends AsyncView<Props, State> {\n  static contextTypes = {\n    router: PropTypes.object,\n    organization: PropTypes.object.isRequired,\n  };\n\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    const {orgId, projectId} = this.props.params;\n    return [['hookList', `/projects/${orgId}/${projectId}/hooks/`]];\n  }\n\n  onToggleActive = (hook: ServiceHook) => {\n    const {orgId, projectId} = this.props.params;\n    const {hookList} = this.state;\n    if (!hookList) {\n      return;\n    }\n\n    addLoadingMessage(t('Saving changes\\u2026'));\n\n    this.api.request(`/projects/${orgId}/${projectId}/hooks/${hook.id}/`, {\n      method: 'PUT',\n      data: {\n        isActive: hook.status !== 'active',\n      },\n      success: data => {\n        clearIndicators();\n        this.setState({\n          hookList: hookList.map(h => {\n            if (h.id === data.id) {\n              return {\n                ...h,\n                ...data,\n              };\n            }\n            return h;\n          }),\n        });\n      },\n      error: () => {\n        addErrorMessage(t('Unable to remove application. Please try again.'));\n      },\n    });\n  };\n\n  renderEmpty() {\n    return (\n      <EmptyMessage>\n        {t('There are no service hooks associated with this project.')}\n      </EmptyMessage>\n    );\n  }\n\n  renderResults() {\n    const {orgId, projectId} = this.props.params;\n\n    return (\n      <React.Fragment>\n        <PanelHeader key=\"header\">{t('Service Hook')}</PanelHeader>\n        <PanelBody key=\"body\">\n          <PanelAlert type=\"info\" icon={<IconFlag size=\"md\" />}>\n            {t(\n              'Service Hooks are an early adopter preview feature and will change in the future.'\n            )}\n          </PanelAlert>\n          {this.state.hookList?.map(hook => (\n            <ServiceHookRow\n              key={hook.id}\n              orgId={orgId}\n              projectId={projectId}\n              hook={hook}\n              onToggleActive={this.onToggleActive.bind(this, hook)}\n            />\n          ))}\n        </PanelBody>\n      </React.Fragment>\n    );\n  }\n\n  renderBody() {\n    const {hookList} = this.state;\n    const body =\n      hookList && hookList.length > 0 ? this.renderResults() : this.renderEmpty();\n\n    const {orgId, projectId} = this.props.params;\n    const access = new Set(this.context.organization.access);\n\n    return (\n      <React.Fragment>\n        <SettingsPageHeader\n          title={t('Service Hooks')}\n          action={\n            access.has('project:write') ? (\n              <Button\n                data-test-id=\"new-service-hook\"\n                to={`/settings/${orgId}/projects/${projectId}/hooks/new/`}\n                size=\"small\"\n                priority=\"primary\"\n                icon={<IconAdd size=\"xs\" isCircled />}\n              >\n                {t('Create New Hook')}\n              </Button>\n            ) : null\n          }\n        />\n        <Panel>{body}</Panel>\n      </React.Fragment>\n    );\n  }\n}\n"],"sourceRoot":""}