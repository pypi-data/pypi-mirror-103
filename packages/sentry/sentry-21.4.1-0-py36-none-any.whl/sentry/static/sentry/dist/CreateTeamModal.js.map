{"version":3,"sources":["webpack:///./app/actionCreators/teams.tsx","webpack:///./app/actions/teamActions.tsx","webpack:///./app/components/modals/createTeamModal.tsx","webpack:///./app/components/teams/createTeamForm.tsx","webpack:///./app/utils/slugify.tsx","webpack:///./app/utils/withApi.tsx","webpack:///./app/views/settings/components/forms/form.tsx","webpack:///./app/views/settings/components/forms/textField.tsx"],"names":["doCallback","params","name","args","callIfFunction","fetchTeamDetails","api","options","TeamActions","teamId","request","orgId","success","data","error","updateTeamSuccess","updateTeam","endpoint","method","joinTeam","memberId","id","uniqueId","leaveTeam","createTeam","team","requestPromise","then","addSuccessMessage","tct","slug","organization","err","addErrorMessage","removeTeam","Reflux","CreateTeamModal","onSuccess","onError","props","resp","handleSuccess","this","onClose","closeModal","Body","Header","closeButton","onHide","t","onSubmit","handleSubmit","React","withApi","CreateTeamForm","submitLabel","apiEndpoint","apiMethod","onSubmitSuccess","handleCreateTeamSuccess","requireChanges","data-test-id","formProps","label","placeholder","help","required","stacked","flexibleControlStateSize","inline","transformInput","slugify","str","toLowerCase","replace","WrappedComponent","persistInFlight","Client","clear","getDisplayName","Form","context","model","FormModel","e","skipPreventDefault","preventDefault","isSaving","onPreSubmit","getData","onSubmitError","saveForm","submitSuccess","submitError","saveOnBlur","resetOnError","onFieldChange","initialData","allowUndo","setInitialData","setFormOptions","form","reset","className","children","footerClass","footerStyle","submitDisabled","submitPriority","cancelLabel","onCancel","extraButton","hideFooter","shouldShowFooter","isRenderFunc","StyledFooter","style","DefaultButtons","type","disabled","onClick","marginLeft","priority","isError","formChanged","PropTypes","p","Panel","space","TextField"],"mappings":"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","file":"CreateTeamModal.793ffcaec91df897d12d.js","sourcesContent":["import {addErrorMessage, addSuccessMessage} from 'app/actionCreators/indicator';\nimport TeamActions from 'app/actions/teamActions';\nimport {Client} from 'app/api';\nimport {tct} from 'app/locale';\nimport {Team} from 'app/types';\nimport {callIfFunction} from 'app/utils/callIfFunction';\nimport {uniqueId} from 'app/utils/guid';\n\ntype CallbackOptions = {\n  success?: Function;\n  error?: Function;\n};\n\nconst doCallback = (\n  params: CallbackOptions = {},\n  name: keyof CallbackOptions,\n  ...args: any[]\n) => {\n  callIfFunction(params[name], ...args);\n};\n\n/**\n * Note these are both slugs\n */\ntype OrgSlug = {orgId: string};\ntype OrgAndTeamSlug = OrgSlug & {teamId: string};\n\ntype TeamData = {data: Team};\n\n/**\n * This is the actual internal id, not username or email\n */\ntype MemberId = {memberId: string};\n\n// Fetch teams for org\nexport function fetchTeams(api: Client, params: OrgSlug, options: CallbackOptions) {\n  TeamActions.fetchAll(params.orgId);\n  return api.request(`/teams/${params.orgId}/`, {\n    success: data => {\n      TeamActions.fetchAllSuccess(params.orgId, data);\n      doCallback(options, 'success', data);\n    },\n    error: error => {\n      TeamActions.fetchAllError(params.orgId, error);\n      doCallback(options, 'error', error);\n    },\n  });\n}\n\nexport function fetchTeamDetails(\n  api: Client,\n  params: OrgAndTeamSlug,\n  options?: CallbackOptions\n) {\n  TeamActions.fetchDetails(params.teamId);\n  return api.request(`/teams/${params.orgId}/${params.teamId}/`, {\n    success: data => {\n      TeamActions.fetchDetailsSuccess(params.teamId, data);\n      doCallback(options, 'success', data);\n    },\n    error: error => {\n      TeamActions.fetchDetailsError(params.teamId, error);\n      doCallback(options, 'error', error);\n    },\n  });\n}\n\nexport function updateTeamSuccess(teamId: OrgAndTeamSlug['teamId'], data: Team) {\n  TeamActions.updateSuccess(teamId, data);\n}\n\nexport function updateTeam(\n  api: Client,\n  params: OrgAndTeamSlug & TeamData,\n  options: CallbackOptions\n) {\n  const endpoint = `/teams/${params.orgId}/${params.teamId}/`;\n  TeamActions.update(params.teamId, params.data);\n\n  return api.request(endpoint, {\n    method: 'PUT',\n    data: params.data,\n    success: data => {\n      updateTeamSuccess(params.teamId, data);\n      doCallback(options, 'success', data);\n    },\n    error: error => {\n      TeamActions.updateError(params.teamId, error);\n      doCallback(options, 'error', error);\n    },\n  });\n}\n\nexport function joinTeam(\n  api: Client,\n  params: OrgAndTeamSlug & Partial<MemberId>,\n  options: CallbackOptions\n) {\n  const endpoint = `/organizations/${params.orgId}/members/${\n    params.memberId ?? 'me'\n  }/teams/${params.teamId}/`;\n  const id = uniqueId();\n\n  TeamActions.update(id, params.teamId);\n\n  return api.request(endpoint, {\n    method: 'POST',\n    success: data => {\n      TeamActions.updateSuccess(params.teamId, data);\n      doCallback(options, 'success', data);\n    },\n    error: error => {\n      TeamActions.updateError(id, params.teamId, error);\n      doCallback(options, 'error', error);\n    },\n  });\n}\n\nexport function leaveTeam(\n  api: Client,\n  params: OrgAndTeamSlug & Partial<MemberId>,\n  options: CallbackOptions\n) {\n  const endpoint = `/organizations/${params.orgId}/members/${\n    params.memberId || 'me'\n  }/teams/${params.teamId}/`;\n  const id = uniqueId();\n\n  TeamActions.update(id, params.teamId);\n\n  return api.request(endpoint, {\n    method: 'DELETE',\n    success: data => {\n      TeamActions.updateSuccess(params.teamId, data);\n      doCallback(options, 'success', data);\n    },\n    error: error => {\n      TeamActions.updateError(id, params.teamId, error);\n      doCallback(options, 'error', error);\n    },\n  });\n}\n\nexport function createTeam(api: Client, team: Pick<Team, 'slug'>, params: OrgSlug) {\n  TeamActions.createTeam(team);\n\n  return api\n    .requestPromise(`/organizations/${params.orgId}/teams/`, {\n      method: 'POST',\n      data: team,\n    })\n    .then(\n      data => {\n        TeamActions.createTeamSuccess(data);\n        addSuccessMessage(\n          tct('[team] has been added to the [organization] organization', {\n            team: `#${data.slug}`,\n            organization: params.orgId,\n          })\n        );\n        return data;\n      },\n      err => {\n        TeamActions.createTeamError(team.slug, err);\n        addErrorMessage(\n          tct('Unable to create [team] in the [organization] organization', {\n            team: `#${team.slug}`,\n            organization: params.orgId,\n          })\n        );\n        throw err;\n      }\n    );\n}\n\nexport function removeTeam(api: Client, params: OrgAndTeamSlug) {\n  TeamActions.removeTeam(params.teamId);\n\n  return api\n    .requestPromise(`/teams/${params.orgId}/${params.teamId}/`, {\n      method: 'DELETE',\n    })\n    .then(\n      data => {\n        TeamActions.removeTeamSuccess(params.teamId, data);\n        addSuccessMessage(\n          tct('[team] has been removed from the [organization] organization', {\n            team: `#${params.teamId}`,\n            organization: params.orgId,\n          })\n        );\n        return data;\n      },\n      err => {\n        TeamActions.removeTeamError(params.teamId, err);\n        addErrorMessage(\n          tct('Unable to remove [team] from the [organization] organization', {\n            team: `#${params.teamId}`,\n            organization: params.orgId,\n          })\n        );\n        throw err;\n      }\n    );\n}\n","import Reflux from 'reflux';\n\nconst TeamActions = Reflux.createActions([\n  'createTeam',\n  'createTeamError',\n  'createTeamSuccess',\n  'fetchAll',\n  'fetchAllError',\n  'fetchAllSuccess',\n  'fetchDetails',\n  'fetchDetailsError',\n  'fetchDetailsSuccess',\n  'loadTeams',\n  'removeTeam',\n  'removeTeamError',\n  'removeTeamSuccess',\n  'update',\n  'updateError',\n  'updateSuccess',\n]);\n\nexport default TeamActions;\n","import React from 'react';\n\nimport {ModalRenderProps} from 'app/actionCreators/modal';\nimport {createTeam} from 'app/actionCreators/teams';\nimport {Client} from 'app/api';\nimport CreateTeamForm from 'app/components/teams/createTeamForm';\nimport {t} from 'app/locale';\nimport {Organization, Team} from 'app/types';\nimport withApi from 'app/utils/withApi';\n\ntype Props = {\n  api: Client;\n  organization: Organization;\n  onClose?: (team: Team) => void;\n} & ModalRenderProps;\n\nclass CreateTeamModal extends React.Component<Props> {\n  handleSubmit = (data: {slug: string}, onSuccess: Function, onError: Function) => {\n    const {organization, api} = this.props;\n    createTeam(api, data, {orgId: organization.slug})\n      .then((resp: Team) => {\n        this.handleSuccess(resp);\n        onSuccess(resp);\n      })\n      .catch((err: Error) => {\n        onError(err);\n      });\n  };\n\n  handleSuccess(team: Team) {\n    if (this.props.onClose) {\n      this.props.onClose(team);\n    }\n\n    this.props.closeModal();\n  }\n\n  render() {\n    const {Body, Header, closeModal, ...props} = this.props;\n\n    return (\n      <React.Fragment>\n        <Header closeButton onHide={closeModal}>\n          {t('Create Team')}\n        </Header>\n        <Body>\n          <CreateTeamForm {...props} onSubmit={this.handleSubmit} />\n        </Body>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default withApi(CreateTeamModal);\n","import React from 'react';\n\nimport {t} from 'app/locale';\nimport {Organization} from 'app/types';\nimport {callIfFunction} from 'app/utils/callIfFunction';\nimport slugify from 'app/utils/slugify';\nimport Form from 'app/views/settings/components/forms/form';\nimport TextField from 'app/views/settings/components/forms/textField';\n\ntype Payload = {\n  slug: string;\n};\n\ntype Props = {\n  organization: Organization;\n  onSubmit?: (data: Payload, onSuccess: Function, onError: Function) => void;\n  onSuccess?: (data: Payload) => void;\n  formProps?: Partial<typeof Form>;\n};\n\nexport default class CreateTeamForm extends React.Component<Props> {\n  handleSubmit = (data: Record<string, any>, onSuccess: Function, onError: Function) => {\n    callIfFunction(this.props.onSubmit, data as Payload, onSuccess, onError);\n  };\n\n  handleCreateTeamSuccess = (data: Payload) => {\n    callIfFunction(this.props.onSuccess, data);\n  };\n\n  render() {\n    const {organization} = this.props;\n\n    return (\n      <React.Fragment>\n        <p>\n          {t(\n            'Members of a team have access to specific areas, such as a new release or a new application feature.'\n          )}\n        </p>\n\n        <Form\n          submitLabel={t('Create Team')}\n          apiEndpoint={`/organizations/${organization.slug}/teams/`}\n          apiMethod=\"POST\"\n          onSubmit={this.handleSubmit}\n          onSubmitSuccess={this.handleCreateTeamSuccess}\n          requireChanges\n          data-test-id=\"create-team-form\"\n          {...this.props.formProps}\n        >\n          <TextField\n            name=\"slug\"\n            label={t('Team Name')}\n            placeholder={t('e.g. operations, web-frontend, desktop')}\n            help={t('May contain lowercase letters, numbers, dashes and underscores.')}\n            required\n            stacked\n            flexibleControlStateSize\n            inline={false}\n            transformInput={slugify}\n          />\n        </Form>\n      </React.Fragment>\n    );\n  }\n}\n","// XXX: This is NOT an exhaustive slugify function\n// Only forces lowercase and replaces spaces with hyphens\nexport default function slugify(str: any): string {\n  return typeof str === 'string' ? str.toLowerCase().replace(' ', '-') : '';\n}\n","import React from 'react';\n\nimport {Client} from 'app/api';\nimport getDisplayName from 'app/utils/getDisplayName';\n\ntype InjectedApiProps = {\n  api: Client;\n};\n\ntype WrappedProps<P> = Omit<P, keyof InjectedApiProps> & Partial<InjectedApiProps>;\n\ntype OptionProps = {\n  /**\n   * Enabling this option will disable clearing in-flight requests when the\n   * component is unmounted.\n   *\n   * This may be useful in situations where your component needs to finish up\n   * some where the client was passed into some type of action creator and the\n   * component is unmounted.\n   */\n  persistInFlight?: boolean;\n};\n\n/**\n * React Higher-Order Component (HoC) that provides \"api\" client when mounted,\n * and clears API requests when component is unmounted.\n */\nconst withApi = <P extends InjectedApiProps>(\n  WrappedComponent: React.ComponentType<P>,\n  {persistInFlight}: OptionProps = {}\n) =>\n  class extends React.Component<WrappedProps<P>> {\n    static displayName = `withApi(${getDisplayName(WrappedComponent)})`;\n\n    constructor(props: WrappedProps<P>) {\n      super(props);\n      this.api = new Client();\n    }\n\n    componentWillUnmount() {\n      if (!persistInFlight) {\n        this.api.clear();\n      }\n    }\n\n    private api: Client;\n\n    render() {\n      const {api, ...props} = this.props;\n      return <WrappedComponent {...({api: api ?? this.api, ...props} as P)} />;\n    }\n  };\n\nexport default withApi;\n","import React from 'react';\nimport styled from '@emotion/styled';\nimport {Observer} from 'mobx-react';\nimport PropTypes from 'prop-types';\n\nimport {APIRequestMethod} from 'app/api';\nimport Button from 'app/components/button';\nimport Panel from 'app/components/panels/panel';\nimport {t} from 'app/locale';\nimport space from 'app/styles/space';\nimport {isRenderFunc} from 'app/utils/isRenderFunc';\nimport FormModel, {FormOptions} from 'app/views/settings/components/forms/model';\n\ntype Data = Record<string, any>;\n\ntype RenderProps = {\n  model: FormModel;\n};\n\ntype RenderFunc = (props: RenderProps) => React.ReactNode;\n\ntype Props = {\n  apiMethod?: APIRequestMethod;\n  apiEndpoint?: string;\n  children?: React.ReactNode | RenderFunc;\n  className?: string;\n  cancelLabel?: string;\n  submitDisabled?: boolean;\n  submitLabel?: string;\n  submitPriority?: React.ComponentProps<typeof Button>['priority'];\n  footerClass?: string;\n  footerStyle?: React.CSSProperties;\n  extraButton?: React.ReactNode;\n  initialData?: Data;\n  // Require changes before able to submit form\n  requireChanges?: boolean;\n  // Reset form when there are errors; after submit\n  resetOnError?: boolean;\n  hideFooter?: boolean;\n  allowUndo?: boolean;\n  // Save field on control blur\n  saveOnBlur?: boolean;\n  model?: FormModel;\n  // if set to true, preventDefault is not called\n  skipPreventDefault?: boolean;\n  additionalFieldProps?: {[key: string]: any};\n  'data-test-id'?: string;\n\n  onCancel?: (e: React.MouseEvent) => void;\n  onSubmit?: (\n    data: Data,\n    onSubmitSuccess: (data: Data) => void,\n    onSubmitError: (error: any) => void,\n    e: React.FormEvent,\n    model: FormModel\n  ) => void;\n  onPreSubmit?: () => void;\n} & Pick<FormOptions, 'onSubmitSuccess' | 'onSubmitError' | 'onFieldChange'>;\n\ntype Context = {\n  saveOnBlur: boolean;\n  form: FormModel;\n};\n\nexport default class Form extends React.Component<Props> {\n  static childContextTypes = {\n    saveOnBlur: PropTypes.bool,\n    form: PropTypes.object,\n  };\n\n  constructor(props: Props, context: Context) {\n    super(props, context);\n    const {\n      saveOnBlur,\n      apiEndpoint,\n      apiMethod,\n      resetOnError,\n      onSubmitSuccess,\n      onSubmitError,\n      onFieldChange,\n      initialData,\n      allowUndo,\n    } = props;\n\n    this.model.setInitialData(initialData);\n    this.model.setFormOptions({\n      resetOnError,\n      allowUndo,\n      onFieldChange,\n      onSubmitSuccess,\n      onSubmitError,\n      saveOnBlur,\n      apiEndpoint,\n      apiMethod,\n    });\n  }\n\n  getChildContext() {\n    return {\n      saveOnBlur: this.props.saveOnBlur,\n      form: this.model,\n    };\n  }\n\n  componentWillUnmount() {\n    this.model.reset();\n  }\n\n  model: FormModel = this.props.model || new FormModel();\n\n  onSubmit = e => {\n    !this.props.skipPreventDefault && e.preventDefault();\n    if (this.model.isSaving) {\n      return;\n    }\n\n    this.props.onPreSubmit?.();\n\n    if (this.props.onSubmit) {\n      this.props.onSubmit(\n        this.model.getData(),\n        this.onSubmitSuccess,\n        this.onSubmitError,\n        e,\n        this.model\n      );\n    } else {\n      this.model.saveForm();\n    }\n  };\n\n  onSubmitSuccess = data => {\n    const {onSubmitSuccess} = this.props;\n    this.model.submitSuccess(data);\n\n    if (onSubmitSuccess) {\n      onSubmitSuccess(data, this.model);\n    }\n  };\n\n  onSubmitError = error => {\n    const {onSubmitError} = this.props;\n    this.model.submitError(error);\n\n    if (onSubmitError) {\n      onSubmitError(error, this.model);\n    }\n  };\n\n  render() {\n    const {\n      className,\n      children,\n      footerClass,\n      footerStyle,\n      submitDisabled,\n      submitLabel,\n      submitPriority,\n      cancelLabel,\n      onCancel,\n      extraButton,\n      requireChanges,\n      saveOnBlur,\n      hideFooter,\n    } = this.props;\n    const shouldShowFooter =\n      typeof hideFooter !== 'undefined' ? !hideFooter : !saveOnBlur;\n\n    return (\n      <form\n        onSubmit={this.onSubmit}\n        className={className ?? 'form-stacked'}\n        data-test-id={this.props['data-test-id']}\n      >\n        <div>\n          {isRenderFunc<RenderFunc>(children) ? children({model: this.model}) : children}\n        </div>\n\n        {shouldShowFooter && (\n          <StyledFooter\n            className={footerClass}\n            style={footerStyle}\n            saveOnBlur={saveOnBlur}\n          >\n            {extraButton}\n            <DefaultButtons>\n              {onCancel && (\n                <Observer>\n                  {() => (\n                    <Button\n                      type=\"button\"\n                      disabled={this.model.isSaving}\n                      onClick={onCancel}\n                      style={{marginLeft: 5}}\n                    >\n                      {cancelLabel ?? t('Cancel')}\n                    </Button>\n                  )}\n                </Observer>\n              )}\n\n              <Observer>\n                {() => (\n                  <Button\n                    data-test-id=\"form-submit\"\n                    priority={submitPriority ?? 'primary'}\n                    disabled={\n                      this.model.isError ||\n                      this.model.isSaving ||\n                      submitDisabled ||\n                      (requireChanges ? !this.model.formChanged : false)\n                    }\n                    type=\"submit\"\n                  >\n                    {submitLabel ?? t('Save Changes')}\n                  </Button>\n                )}\n              </Observer>\n            </DefaultButtons>\n          </StyledFooter>\n        )}\n      </form>\n    );\n  }\n}\n\nconst StyledFooter = styled('div')<{saveOnBlur?: boolean}>`\n  display: flex;\n  justify-content: flex-end;\n  margin-top: 25px;\n  border-top: 1px solid #e9ebec;\n  background: none;\n  padding: 16px 0 0;\n  margin-bottom: 16px;\n\n  ${p =>\n    !p.saveOnBlur &&\n    `\n  ${Panel} & {\n    margin-top: 0;\n    padding-right: 36px;\n  }\n\n  /* Better padding with form inside of a modal */\n  .modal-content & {\n    padding-right: 30px;\n    margin-left: -30px;\n    margin-right: -30px;\n    margin-bottom: -30px;\n    margin-top: 16px;\n    padding-bottom: 16px;\n  }\n  `};\n`;\n\nconst DefaultButtons = styled('div')`\n  display: grid;\n  grid-gap: ${space(1)};\n  grid-auto-flow: column;\n  justify-content: flex-end;\n  flex: 1;\n`;\n","import React from 'react';\n\nimport InputField from 'app/views/settings/components/forms/inputField';\n\ntype Props = InputField['props'];\n\nexport default function TextField(props: Omit<Props, 'type'>) {\n  return <InputField {...props} type=\"text\" />;\n}\n"],"sourceRoot":""}