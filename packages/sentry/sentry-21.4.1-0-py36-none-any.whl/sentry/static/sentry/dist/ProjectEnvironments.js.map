{"version":3,"sources":["webpack:///./app/components/sentryDocumentTitle.tsx","webpack:///./app/utils/environment.tsx","webpack:///./app/utils/recreateRoute.tsx","webpack:///./app/views/settings/components/settingsPageHeader.tsx","webpack:///./app/views/settings/project/permissionAlert.tsx","webpack:///./app/views/settings/project/projectEnvironments.tsx"],"names":["SentryDocumentTitle","title","orgSlug","projectSlug","children","docTitle","getUrlRoutingName","env","name","encodeURIComponent","displayName","getDisplayName","recreateRoute","to","options","lastRootIndex","routeIndex","routes","params","location","stepBack","paths","map","path","indexOf","findLastIndex","slice","baseRoute","search","hash","fullRoute","join","replaceRouterParams","UnstyledSettingsPageHeader","this","props","icon","subtitle","action","tabs","noTitleStyles","body","isNarrow","TitleAndActions","TitleWrapper","Icon","Title","styled","Subtitle","Action","BodyWrapper","TabsWrapper","React","p","space","theme","gray400","fontSizeLarge","SettingsPageHeader","PermissionAlert","access","hasAccess","type","size","t","ProjectEnvironments","project","environments","isLoading","shouldHide","orgId","projectId","api","request","method","data","isHidden","success","addSuccessMessage","tct","environment","error","addErrorMessage","complete","fetchData","bind","prevProps","pathname","endsWith","state","setState","query","visibility","message","EnvironmentRow","ALL_ENVIRONMENTS_KEY","id","isSystemRow","envs","buttonText","renderAllEnvironmentsSystemRow","key","onHide","toggleEnv","actionText","shouldShowAction","length","renderEnvironmentList","renderEmpty","baseUrl","underlined","index","isActive","renderBody","EnvironmentItem","Name","EnvironmentButton","disabled","onClick","PanelItem","Button","withApi"],"mappings":"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","file":"ProjectEnvironments.0d7269afdb7e0c948fd0.js","sourcesContent":["import React from 'react';\nimport DocumentTitle from 'react-document-title';\n\ntype Props = {\n  // Main page title\n  title: string;\n  orgSlug?: string;\n  projectSlug?: string;\n  children?: React.ReactNode;\n};\n\nfunction SentryDocumentTitle({title, orgSlug, projectSlug, children}: Props) {\n  function getDocTitle() {\n    if (!orgSlug && !projectSlug) {\n      return title;\n    }\n\n    if (orgSlug && projectSlug) {\n      return `${title} - ${orgSlug} - ${projectSlug}`;\n    }\n\n    if (orgSlug) {\n      return `${title} - ${orgSlug}`;\n    }\n\n    return `${title} - ${projectSlug}`;\n  }\n\n  const docTitle = getDocTitle();\n\n  return (\n    <DocumentTitle title={`${docTitle} - Sentry`}>\n      {children as React.ReactChild}\n    </DocumentTitle>\n  );\n}\n\nexport default SentryDocumentTitle;\n","import {Environment} from 'app/types';\n\nconst DEFAULT_EMPTY_ROUTING_NAME = 'none';\nconst DEFAULT_EMPTY_ENV_NAME = '(No Environment)';\n\nexport function getUrlRoutingName(env: Partial<Environment>) {\n  if (env.name) {\n    return encodeURIComponent(env.name);\n  }\n\n  if (env.displayName) {\n    return encodeURIComponent(env.displayName);\n  }\n  return DEFAULT_EMPTY_ROUTING_NAME;\n}\n\nexport function getDisplayName(env: Partial<Environment>) {\n  return env.name || env.displayName || DEFAULT_EMPTY_ENV_NAME;\n}\n","import {Location} from 'history';\nimport findLastIndex from 'lodash/findLastIndex';\n\nimport replaceRouterParams from 'app/utils/replaceRouterParams';\nimport {RouteWithName} from 'app/views/settings/components/settingsBreadcrumb/types';\n\ntype Options = {\n  routes: RouteWithName[];\n\n  // parameters to replace any route string parameters (e.g. if route is `:orgId`,\n  // params should have `{orgId: slug}`\n  params: {[key: string]: string | undefined};\n\n  /**\n   * The number of routes to to pop off of `routes\n   * Must be < 0\n   *\n   * There's no ts type for negative numbers so we are arbitrarily specifying -1-9\n   */\n  stepBack?: -1 | -2 | -3 | -4 | -5 | -6 | -7 | -8 | -9;\n  location?: Location;\n};\n\n/**\n * Given a route object or a string and a list of routes + params from router, this will attempt to recreate a location string while replacing url params.\n * Can additionally specify the number of routes to move back\n *\n * See tests for examples\n */\nexport default function recreateRoute(\n  to: string | RouteWithName,\n  options: Options\n): string {\n  const {routes, params, location, stepBack} = options;\n  const paths = routes.map(({path}) => path || '');\n  let lastRootIndex: number;\n  let routeIndex: number | undefined;\n\n  // TODO(ts): typescript things\n  if (typeof to !== 'string') {\n    routeIndex = routes.indexOf(to) + 1;\n    lastRootIndex = findLastIndex(paths.slice(0, routeIndex), path => path[0] === '/');\n  } else {\n    lastRootIndex = findLastIndex(paths, path => path[0] === '/');\n  }\n\n  let baseRoute = paths.slice(lastRootIndex, routeIndex);\n\n  if (typeof stepBack !== 'undefined') {\n    baseRoute = baseRoute.slice(0, stepBack);\n  }\n\n  const search = location?.search ?? '';\n  const hash = location?.hash ?? '';\n\n  const fullRoute = `${baseRoute.join('')}${\n    typeof to !== 'string' ? '' : to\n  }${search}${hash}`;\n\n  return replaceRouterParams(fullRoute, params);\n}\n","import React from 'react';\nimport styled from '@emotion/styled';\n\nimport {HeaderTitle} from 'app/styles/organization';\nimport space from 'app/styles/space';\n\ntype Props = {\n  // Icon left of title\n  icon?: React.ReactNode;\n\n  // The title\n  title: React.ReactNode;\n  subtitle?: React.ReactNode;\n\n  // Disables font styles in the title. Allows for more custom titles.\n  noTitleStyles?: boolean;\n  className?: string;\n\n  // CTA button\n  action?: React.ReactNode;\n\n  body?: React.ReactNode;\n\n  tabs?: React.ReactNode;\n};\n\nclass UnstyledSettingsPageHeader extends React.Component<Props> {\n  static defaultProps = {\n    noTitleStyles: false,\n  };\n\n  render() {\n    const {\n      icon,\n      title,\n      subtitle,\n      action,\n      tabs,\n      noTitleStyles,\n      body,\n      ...props\n    } = this.props;\n\n    // If Header is narrow, use align-items to center <Action>.\n    // Otherwise, use a fixed margin to prevent an odd alignment.\n    // This is needed as Actions could be a button or a dropdown.\n    const isNarrow = !subtitle;\n\n    return (\n      <div {...props}>\n        <TitleAndActions isNarrow={isNarrow}>\n          <TitleWrapper>\n            {icon && <Icon>{icon}</Icon>}\n            {title && (\n              <Title tabs={tabs} styled={noTitleStyles}>\n                <HeaderTitle>{title}</HeaderTitle>\n                {subtitle && <Subtitle>{subtitle}</Subtitle>}\n              </Title>\n            )}\n          </TitleWrapper>\n          {action && <Action isNarrow={isNarrow}>{action}</Action>}\n        </TitleAndActions>\n\n        {body && <BodyWrapper>{body}</BodyWrapper>}\n        {tabs && <TabsWrapper>{tabs}</TabsWrapper>}\n      </div>\n    );\n  }\n}\n\ntype TitleProps = {\n  styled?: boolean;\n  tabs?: React.ReactNode;\n};\n\nconst TitleAndActions = styled('div')<{isNarrow?: boolean}>`\n  display: flex;\n  align-items: ${p => (p.isNarrow ? 'center' : 'flex-start')};\n`;\nconst TitleWrapper = styled('div')`\n  flex: 1;\n`;\n\nconst Title = styled('div')<TitleProps & React.HTMLProps<HTMLDivElement>>`\n  ${p => !p.styled && `font-size: 20px; font-weight: 600;`};\n  margin: ${space(4)} ${space(2)} ${space(3)} 0;\n`;\nconst Subtitle = styled('div')`\n  color: ${p => p.theme.gray400};\n  font-weight: 400;\n  font-size: ${p => p.theme.fontSizeLarge};\n  padding: ${space(1.5)} 0 0;\n`;\n\nconst Icon = styled('div')`\n  margin-right: ${space(1)};\n`;\n\nconst Action = styled('div')<{isNarrow?: boolean}>`\n  margin-top: ${p => (p.isNarrow ? '0' : space(4))};\n`;\n\nconst SettingsPageHeader = styled(UnstyledSettingsPageHeader)<\n  Omit<React.HTMLProps<HTMLDivElement>, keyof Props> & Props\n>`\n  font-size: 14px;\n  margin-top: -${space(4)};\n`;\n\nconst BodyWrapper = styled('div')`\n  flex: 1;\n  margin: 0 0 ${space(3)};\n`;\nconst TabsWrapper = styled('div')`\n  flex: 1;\n  margin: 0; /* sentry/components/navTabs has added margin */\n`;\n\nexport default SettingsPageHeader;\n","import React from 'react';\n\nimport Access from 'app/components/acl/access';\nimport Alert from 'app/components/alert';\nimport {IconWarning} from 'app/icons';\nimport {t} from 'app/locale';\n\ntype Props = React.ComponentPropsWithoutRef<typeof Alert> &\n  Pick<React.ComponentProps<typeof Access>, 'access'>;\n\nconst PermissionAlert = ({access = ['project:write'], ...props}: Props) => (\n  <Access access={access}>\n    {({hasAccess}) =>\n      !hasAccess && (\n        <Alert type=\"warning\" icon={<IconWarning size=\"xs\" />} {...props}>\n          {t(\n            'These settings can only be edited by users with the organization owner, manager, or admin role.'\n          )}\n        </Alert>\n      )\n    }\n  </Access>\n);\n\nexport default PermissionAlert;\n","import React from 'react';\nimport {WithRouterProps} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport {addErrorMessage, addSuccessMessage} from 'app/actionCreators/indicator';\nimport {Client} from 'app/api';\nimport Access from 'app/components/acl/access';\nimport Button from 'app/components/button';\nimport ListLink from 'app/components/links/listLink';\nimport LoadingIndicator from 'app/components/loadingIndicator';\nimport NavTabs from 'app/components/navTabs';\nimport {Panel, PanelBody, PanelHeader, PanelItem} from 'app/components/panels';\nimport SentryDocumentTitle from 'app/components/sentryDocumentTitle';\nimport {ALL_ENVIRONMENTS_KEY} from 'app/constants';\nimport {t, tct} from 'app/locale';\nimport space from 'app/styles/space';\nimport {Environment, Project} from 'app/types';\nimport {getDisplayName, getUrlRoutingName} from 'app/utils/environment';\nimport recreateRoute from 'app/utils/recreateRoute';\nimport withApi from 'app/utils/withApi';\nimport EmptyMessage from 'app/views/settings/components/emptyMessage';\nimport SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';\nimport PermissionAlert from 'app/views/settings/project/permissionAlert';\n\ntype Props = {\n  api: Client;\n} & WithRouterProps<{orgId: string; projectId: string}, {}>;\n\ntype State = {\n  isLoading: boolean;\n  project: null | Project;\n  environments: null | Environment[];\n};\n\nclass ProjectEnvironments extends React.Component<Props, State> {\n  state: State = {\n    project: null,\n    environments: null,\n    isLoading: true,\n  };\n\n  componentDidMount() {\n    this.fetchData();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (\n      this.props.location.pathname.endsWith('hidden/') !==\n      prevProps.location.pathname.endsWith('hidden/')\n    ) {\n      this.fetchData();\n    }\n  }\n\n  fetchData() {\n    const isHidden = this.props.location.pathname.endsWith('hidden/');\n\n    if (!this.state.isLoading) {\n      this.setState({isLoading: true});\n    }\n\n    const {orgId, projectId} = this.props.params;\n    this.props.api.request(`/projects/${orgId}/${projectId}/environments/`, {\n      query: {\n        visibility: isHidden ? 'hidden' : 'visible',\n      },\n      success: environments => {\n        this.setState({environments, isLoading: false});\n      },\n    });\n  }\n\n  fetchProjectDetails() {\n    const {orgId, projectId} = this.props.params;\n    this.props.api.request(`/projects/${orgId}/${projectId}/`, {\n      success: project => {\n        this.setState({project});\n      },\n    });\n  }\n\n  // Toggle visibility of environment\n  toggleEnv = (env: Environment, shouldHide: boolean) => {\n    const {orgId, projectId} = this.props.params;\n\n    this.props.api.request(\n      `/projects/${orgId}/${projectId}/environments/${getUrlRoutingName(env)}/`,\n      {\n        method: 'PUT',\n        data: {\n          name: env.name,\n          isHidden: shouldHide,\n        },\n        success: () => {\n          addSuccessMessage(\n            tct('Updated [environment]', {\n              environment: getDisplayName(env),\n            })\n          );\n        },\n        error: () => {\n          addErrorMessage(\n            tct('Unable to update [environment]', {\n              environment: getDisplayName(env),\n            })\n          );\n        },\n        complete: this.fetchData.bind(this),\n      }\n    );\n  };\n\n  renderEmpty() {\n    const isHidden = this.props.location.pathname.endsWith('hidden/');\n    const message = isHidden\n      ? t(\"You don't have any hidden environments.\")\n      : t(\"You don't have any environments yet.\");\n    return <EmptyMessage>{message}</EmptyMessage>;\n  }\n\n  /**\n   * Renders rows for \"system\" environments:\n   * - \"All Environments\"\n   * - \"No Environment\"\n   *\n   */\n  renderAllEnvironmentsSystemRow() {\n    // Not available in \"Hidden\" tab\n    const isHidden = this.props.location.pathname.endsWith('hidden/');\n    if (isHidden) {\n      return null;\n    }\n    return (\n      <EnvironmentRow\n        name={ALL_ENVIRONMENTS_KEY}\n        environment={{\n          id: ALL_ENVIRONMENTS_KEY,\n          name: ALL_ENVIRONMENTS_KEY,\n          displayName: ALL_ENVIRONMENTS_KEY,\n        }}\n        isSystemRow\n      />\n    );\n  }\n\n  renderEnvironmentList(envs: Environment[]) {\n    const isHidden = this.props.location.pathname.endsWith('hidden/');\n    const buttonText = isHidden ? t('Show') : t('Hide');\n\n    return (\n      <React.Fragment>\n        {this.renderAllEnvironmentsSystemRow()}\n        {envs.map(env => (\n          <EnvironmentRow\n            key={env.id}\n            name={env.name}\n            environment={env}\n            isHidden={isHidden}\n            onHide={this.toggleEnv}\n            actionText={buttonText}\n            shouldShowAction\n          />\n        ))}\n      </React.Fragment>\n    );\n  }\n\n  renderBody() {\n    const {environments, isLoading} = this.state;\n\n    if (isLoading) {\n      return <LoadingIndicator />;\n    }\n\n    return (\n      <PanelBody>\n        {environments?.length\n          ? this.renderEnvironmentList(environments)\n          : this.renderEmpty()}\n      </PanelBody>\n    );\n  }\n\n  render() {\n    const {routes, params, location} = this.props;\n    const isHidden = location.pathname.endsWith('hidden/');\n\n    const baseUrl = recreateRoute('', {routes, params, stepBack: -1});\n    return (\n      <div>\n        <SentryDocumentTitle title={t('Environments')} projectSlug={params.projectId} />\n        <SettingsPageHeader\n          title={t('Manage Environments')}\n          tabs={\n            <NavTabs underlined>\n              <ListLink to={baseUrl} index isActive={() => !isHidden}>\n                {t('Environments')}\n              </ListLink>\n              <ListLink to={`${baseUrl}hidden/`} index isActive={() => isHidden}>\n                {t('Hidden')}\n              </ListLink>\n            </NavTabs>\n          }\n        />\n        <PermissionAlert />\n\n        <Panel>\n          <PanelHeader>{isHidden ? t('Hidden') : t('Active Environments')}</PanelHeader>\n          {this.renderBody()}\n        </Panel>\n      </div>\n    );\n  }\n}\n\ntype RowProps = {\n  environment: Environment;\n  name: string;\n  onHide?: (env: Environment, isHidden: boolean) => void;\n  isHidden?: boolean;\n  actionText?: string;\n  isSystemRow?: boolean;\n  shouldShowAction?: boolean;\n};\n\nfunction EnvironmentRow({\n  environment,\n  name,\n  onHide,\n  shouldShowAction = false,\n  isSystemRow = false,\n  isHidden = false,\n  actionText = '',\n}: RowProps) {\n  return (\n    <EnvironmentItem>\n      <Name>{isSystemRow ? t('All Environments') : name}</Name>\n      <Access access={['project:write']}>\n        {({hasAccess}) => (\n          <React.Fragment>\n            {shouldShowAction && onHide && (\n              <EnvironmentButton\n                size=\"xsmall\"\n                disabled={!hasAccess}\n                onClick={() => onHide(environment, !isHidden)}\n              >\n                {actionText}\n              </EnvironmentButton>\n            )}\n          </React.Fragment>\n        )}\n      </Access>\n    </EnvironmentItem>\n  );\n}\n\nconst EnvironmentItem = styled(PanelItem)`\n  align-items: center;\n  justify-content: space-between;\n`;\n\nconst Name = styled('div')`\n  display: flex;\n  align-items: center;\n`;\n\nconst EnvironmentButton = styled(Button)`\n  margin-left: ${space(0.5)};\n`;\n\nexport {ProjectEnvironments};\nexport default withApi(ProjectEnvironments);\n"],"sourceRoot":""}