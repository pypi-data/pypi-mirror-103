{"version":3,"sources":["webpack:///./app/components/breadcrumbs.tsx","webpack:///./app/components/radio.tsx","webpack:///./app/components/sentryDocumentTitle.tsx","webpack:///./app/utils/performance/vitals/constants.tsx","webpack:///./app/views/alerts/builder/builderBreadCrumbs.tsx","webpack:///./app/views/alerts/wizard/radioPanelGroup.tsx","webpack:///./app/views/alerts/wizard/index.tsx","webpack:///./app/views/alerts/wizard/options.tsx","webpack:///./app/views/performance/transactionSummary/utils.tsx","webpack:///./images/spot/alerts-wizard-apdex.svg","webpack:///./images/spot/alerts-wizard-cls.svg","webpack:///./images/spot/alerts-wizard-custom.svg","webpack:///./images/spot/alerts-wizard-errors.svg","webpack:///./images/spot/alerts-wizard-failure-rate.svg","webpack:///./images/spot/alerts-wizard-fid.svg","webpack:///./images/spot/alerts-wizard-issues.svg","webpack:///./images/spot/alerts-wizard-lcp.svg","webpack:///./images/spot/alerts-wizard-throughput.svg","webpack:///./images/spot/alerts-wizard-transaction-duration.svg","webpack:///./images/spot/alerts-wizard-users-experiencing-errors.svg"],"names":["Breadcrumbs","crumbs","linkLastItem","props","length","to","BreadcrumbList","map","index","label","preserveGlobalSelection","key","labelKey","mapKey","BreadcrumbLink","BreadcrumbItem","BreadcrumbDividerIcon","size","direction","getBreadcrumbListItemStyles","p","theme","gray300","overflowEllipsis","textColor","space","subText","IconChevron","checkedCss","css","radioSize","active","growIn","disabled","Radio","border","defaultProps","type","SentryDocumentTitle","title","orgSlug","projectSlug","children","docTitle","WEB_VITAL_DETAILS","WebVital","slug","name","t","acronym","description","poorThreshold","measurementType","BuilderBreadCrumbs","hasMetricAlerts","alertName","push","StyledBreadcrumbs","RadioPanelGroup","value","choices","onChange","Container","role","aria-labelledby","id","extraContent","RadioPanel","RadioLineItem","aria-checked","aria-label","checked","e","AlertWizard","alertOption","setState","this","organization","project","location","state","metricRuleTemplate","AlertWizardRuleTemplates","features","includes","dataset","Dataset","pathname","query","createFromWizard","referrer","priority","hideIcon","projectId","params","panelContent","AlertWizardPanelContent","StyledLayoutBody","fullWidth","WizardBody","WizardOptions","Styledh2","AlertWizardOptions","i","categoryHeading","options","OptionsWrapper","alertType","AlertWizardAlertNames","handleChangeAlertOption","WizardPanel","visible","WizardPanelBody","withPadding","PanelDescription","docsLink","href","WizardImage","src","illustration","ExampleHeader","ExampleList","symbol","examples","example","ExampleItem","WizardButton","renderCreateAlertButton","React","Layout","fontSizeLarge","Panel","List","PanelBody","ListItem","fontSizeMedium","Set","issues","num_errors","users_experiencing_errors","throughput","trans_duration","apdex","failure_rate","lcp","fid","cls","fcp","custom","diagramIssues","diagramErrors","diagramUsers","diagramThroughput","diagramTransactionDuration","diagramApdex","diagramFailureRate","diagramLCP","diagramFID","diagramCLS","diagramCustom","aggregate","eventTypes","EventTypes","TransactionFilterOptions","transactionSummaryRouteWithQuery","transaction","projectID","unselectedSeries","display","trendFunction","trendColumn","showTransactions","environment","statsPeriod","start","end","SidebarSpacer","module","exports"],"mappings":"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","file":"ProjectAlertsWizard.bf147c81a668052c18e9.js","sourcesContent":["import React from 'react';\nimport styled from '@emotion/styled';\nimport {LocationDescriptor} from 'history';\n\nimport GlobalSelectionLink from 'app/components/globalSelectionLink';\nimport Link from 'app/components/links/link';\nimport {IconChevron} from 'app/icons';\nimport overflowEllipsis from 'app/styles/overflowEllipsis';\nimport space from 'app/styles/space';\nimport {Theme} from 'app/utils/theme';\n\nexport type Crumb = {\n  /**\n   * Label of the crumb\n   */\n  label: React.ReactNode;\n\n  /**\n   * Link of the crumb\n   */\n  to?: React.ComponentProps<typeof Link>['to'] | null;\n\n  /**\n   * It will keep the global selection values (projects, environments, time) in the\n   * querystring when navigating (GlobalSelectionLink)\n   */\n  preserveGlobalSelection?: boolean;\n\n  /**\n   * Component will try to come up with unique key, but you can provide your own\n   * (used when mapping over crumbs)\n   */\n  key?: string;\n};\n\ntype Props = React.HTMLAttributes<HTMLDivElement> & {\n  /**\n   * Array of crumbs that will be rendered\n   */\n  crumbs: Crumb[];\n\n  /**\n   * As a general rule of thumb we don't want the last item to be link as it most likely\n   * points to the same page we are currently on. This is by default false, so that\n   * people don't have to check if crumb is last in the array and then manually\n   * assign `to: null/undefined` when passing props to this component.\n   */\n  linkLastItem?: boolean;\n};\n\n/**\n * Page breadcrumbs used for navigation, not to be confused with sentry's event breadcrumbs\n */\nconst Breadcrumbs = ({crumbs, linkLastItem = false, ...props}: Props) => {\n  if (crumbs.length === 0) {\n    return null;\n  }\n\n  if (!linkLastItem) {\n    crumbs[crumbs.length - 1].to = null;\n  }\n\n  return (\n    <BreadcrumbList {...props}>\n      {crumbs.map(({label, to, preserveGlobalSelection, key}, index) => {\n        const labelKey = typeof label === 'string' ? label : '';\n        const mapKey =\n          key ?? typeof to === 'string' ? `${labelKey}${to}` : `${labelKey}${index}`;\n\n        return (\n          <React.Fragment key={mapKey}>\n            {to ? (\n              <BreadcrumbLink to={to} preserveGlobalSelection={preserveGlobalSelection}>\n                {label}\n              </BreadcrumbLink>\n            ) : (\n              <BreadcrumbItem>{label}</BreadcrumbItem>\n            )}\n\n            {index < crumbs.length - 1 && (\n              <BreadcrumbDividerIcon size=\"xs\" direction=\"right\" />\n            )}\n          </React.Fragment>\n        );\n      })}\n    </BreadcrumbList>\n  );\n};\n\nconst getBreadcrumbListItemStyles = (p: {theme: Theme}) => `\n  color: ${p.theme.gray300};\n  ${overflowEllipsis};\n  width: auto;\n\n  &:last-child {\n    color: ${p.theme.textColor};\n  }\n`;\n\nconst BreadcrumbList = styled('div')`\n  display: flex;\n  align-items: center;\n  padding: ${space(1)} 0;\n`;\n\ntype BreadcrumbLinkProps = {\n  to: React.ComponentProps<typeof Link>['to'];\n  preserveGlobalSelection?: boolean;\n  children?: React.ReactNode;\n};\n\nconst BreadcrumbLink = styled(\n  ({preserveGlobalSelection, to, ...props}: BreadcrumbLinkProps) =>\n    preserveGlobalSelection ? (\n      <GlobalSelectionLink to={to as LocationDescriptor} {...props} />\n    ) : (\n      <Link to={to} {...props} />\n    )\n)`\n  ${getBreadcrumbListItemStyles}\n\n  &:hover,\n  &:active {\n    color: ${p => p.theme.subText};\n  }\n`;\n\nconst BreadcrumbItem = styled('span')`\n  ${getBreadcrumbListItemStyles}\n`;\n\nconst BreadcrumbDividerIcon = styled(IconChevron)`\n  color: ${p => p.theme.gray300};\n  margin: 0 ${space(1)};\n  flex-shrink: 0;\n`;\n\nexport default Breadcrumbs;\n","import React from 'react';\nimport {css} from '@emotion/core';\nimport styled from '@emotion/styled';\n\nimport {growIn} from 'app/styles/animations';\nimport {Theme} from 'app/utils/theme';\n\ntype Props = {radioSize?: 'small'};\n\ntype CheckedProps = React.HTMLProps<HTMLInputElement> & {\n  theme: Theme;\n} & Props;\n\nconst checkedCss = (p: CheckedProps) => css`\n  display: block;\n  width: ${p.radioSize === 'small' ? '8px' : '1rem'};\n  height: ${p.radioSize === 'small' ? '8px' : '1rem'};\n  border-radius: 50%;\n  background-color: ${p.theme.active};\n  animation: 0.2s ${growIn} ease;\n  opacity: ${p.disabled ? 0.4 : null};\n`;\n\nconst Radio = styled('input')<{radioSize?: 'small'}>`\n  display: flex;\n  padding: 0;\n  width: ${p => (p.radioSize === 'small' ? '16px' : '1.5em')};\n  height: ${p => (p.radioSize === 'small' ? '16px' : '1.5em')};\n  position: relative;\n  border-radius: 50%;\n  align-items: center;\n  justify-content: center;\n  border: 1px solid ${p => p.theme.border};\n  box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.04);\n  background: none;\n  appearance: none;\n\n  /* TODO(bootstrap): Our bootstrap CSS adds this, we can remove when we remove that */\n  margin: 0 !important;\n\n  &:focus,\n  &.focus-visible {\n    outline: none !important;\n    border: 1px solid ${p => p.theme.border};\n    box-shadow: rgba(209, 202, 216, 0.5) 0 0 0 3px;\n  }\n\n  &:checked:after {\n    content: '';\n    ${checkedCss}\n  }\n`;\n\nRadio.defaultProps = {\n  type: 'radio',\n};\n\nexport default Radio;\n","import React from 'react';\nimport DocumentTitle from 'react-document-title';\n\ntype Props = {\n  // Main page title\n  title: string;\n  orgSlug?: string;\n  projectSlug?: string;\n  children?: React.ReactNode;\n};\n\nfunction SentryDocumentTitle({title, orgSlug, projectSlug, children}: Props) {\n  function getDocTitle() {\n    if (!orgSlug && !projectSlug) {\n      return title;\n    }\n\n    if (orgSlug && projectSlug) {\n      return `${title} - ${orgSlug} - ${projectSlug}`;\n    }\n\n    if (orgSlug) {\n      return `${title} - ${orgSlug}`;\n    }\n\n    return `${title} - ${projectSlug}`;\n  }\n\n  const docTitle = getDocTitle();\n\n  return (\n    <DocumentTitle title={`${docTitle} - Sentry`}>\n      {children as React.ReactChild}\n    </DocumentTitle>\n  );\n}\n\nexport default SentryDocumentTitle;\n","import {t} from 'app/locale';\nimport {measurementType, WebVital} from 'app/utils/discover/fields';\nimport {Vital} from 'app/utils/performance/vitals/types';\n\nexport const WEB_VITAL_DETAILS: Record<WebVital, Vital> = {\n  [WebVital.FP]: {\n    slug: 'fp',\n    name: t('First Paint'),\n    acronym: 'FP',\n    description: t(\n      'Render time of the first pixel loaded in the viewport (may overlap with FCP).'\n    ),\n    poorThreshold: 3000,\n    type: measurementType(WebVital.FP),\n  },\n  [WebVital.FCP]: {\n    slug: 'fcp',\n    name: t('First Contentful Paint'),\n    acronym: 'FCP',\n    description: t(\n      'Render time of the first image, text or other DOM node in the viewport.'\n    ),\n    poorThreshold: 3000,\n    type: measurementType(WebVital.FCP),\n  },\n  [WebVital.LCP]: {\n    slug: 'lcp',\n    name: t('Largest Contentful Paint'),\n    acronym: 'LCP',\n    description: t(\n      'Render time of the largest image, text or other DOM node in the viewport.'\n    ),\n    poorThreshold: 4000,\n    type: measurementType(WebVital.LCP),\n  },\n  [WebVital.FID]: {\n    slug: 'fid',\n    name: t('First Input Delay'),\n    acronym: 'FID',\n    description: t(\n      'Response time of the browser to a user interaction (clicking, tapping, etc).'\n    ),\n    poorThreshold: 300,\n    type: measurementType(WebVital.FID),\n  },\n  [WebVital.CLS]: {\n    slug: 'cls',\n    name: t('Cumulative Layout Shift'),\n    acronym: 'CLS',\n    description: t(\n      'Sum of layout shift scores that measure the visual stability of the page.'\n    ),\n    poorThreshold: 0.25,\n    type: measurementType(WebVital.CLS),\n  },\n  [WebVital.TTFB]: {\n    slug: 'ttfb',\n    name: t('Time to First Byte'),\n    acronym: 'TTFB',\n    description: t(\n      \"The time that it takes for a user's browser to receive the first byte of page content.\"\n    ),\n    poorThreshold: 600,\n    type: measurementType(WebVital.TTFB),\n  },\n  [WebVital.RequestTime]: {\n    slug: 'ttfb.requesttime',\n    name: t('Request Time'),\n    acronym: 'RT',\n    description: t(\n      'Captures the time spent making the request and receiving the first byte of the response.'\n    ),\n    poorThreshold: 600,\n    type: measurementType(WebVital.RequestTime),\n  },\n};\n","import React from 'react';\nimport styled from '@emotion/styled';\n\nimport Breadcrumbs, {Crumb} from 'app/components/breadcrumbs';\nimport {t} from 'app/locale';\nimport space from 'app/styles/space';\n\ntype Props = {\n  hasMetricAlerts: boolean;\n  orgSlug: string;\n  title: string;\n  projectSlug: string;\n  alertName?: string;\n};\n\nfunction BuilderBreadCrumbs(props: Props) {\n  const {hasMetricAlerts, orgSlug, title, alertName, projectSlug} = props;\n  const crumbs: Crumb[] = [\n    {\n      to: hasMetricAlerts\n        ? `/organizations/${orgSlug}/alerts/`\n        : `/organizations/${orgSlug}/alerts/rules/`,\n      label: t('Alerts'),\n      preserveGlobalSelection: true,\n    },\n    {\n      label: title,\n      ...(alertName\n        ? {\n            to: `/organizations/${orgSlug}/alerts/${projectSlug}/wizard`,\n            preserveGlobalSelection: true,\n          }\n        : {}),\n    },\n  ];\n  if (alertName) {\n    crumbs.push({label: alertName});\n  }\n\n  return <StyledBreadcrumbs crumbs={crumbs} />;\n}\n\nconst StyledBreadcrumbs = styled(Breadcrumbs)`\n  font-size: 18px;\n  margin-bottom: ${space(3)};\n`;\n\nexport default BuilderBreadCrumbs;\n","import React from 'react';\nimport styled from '@emotion/styled';\n\nimport Radio from 'app/components/radio';\nimport space from 'app/styles/space';\n\ntype RadioPanelGroupProps<C extends string> = {\n  label: string;\n  /**\n   * An array of [id, name]\n   */\n  choices: [C, React.ReactNode, React.ReactNode?][];\n  value: string | null;\n  onChange: (id: C, e: React.FormEvent<HTMLInputElement>) => void;\n};\n\ntype Props<C extends string> = RadioPanelGroupProps<C> &\n  Omit<React.HTMLAttributes<HTMLDivElement>, keyof RadioPanelGroupProps<C>>;\n\nconst RadioPanelGroup = <C extends string>({\n  value,\n  choices,\n  label,\n  onChange,\n  ...props\n}: Props<C>) => (\n  <Container {...props} role=\"radiogroup\" aria-labelledby={label}>\n    {(choices || []).map(([id, name, extraContent], index) => (\n      <RadioPanel key={index}>\n        <RadioLineItem role=\"radio\" index={index} aria-checked={value === id}>\n          <Radio\n            radioSize=\"small\"\n            aria-label={id}\n            checked={value === id}\n            onChange={(e: React.FormEvent<HTMLInputElement>) => onChange(id, e)}\n          />\n          <div>{name}</div>\n          {extraContent}\n        </RadioLineItem>\n      </RadioPanel>\n    ))}\n  </Container>\n);\n\nexport default RadioPanelGroup;\n\nconst Container = styled('div')`\n  display: grid;\n  grid-gap: ${space(1)};\n  grid-auto-flow: row;\n  grid-auto-rows: max-content;\n  grid-auto-columns: auto;\n`;\n\nexport const RadioLineItem = styled('label')<{\n  index: number;\n}>`\n  display: grid;\n  grid-gap: ${space(0.25)} ${space(1)};\n  grid-template-columns: max-content auto max-content;\n  align-items: center;\n  cursor: pointer;\n  outline: none;\n  font-weight: normal;\n  margin: 0;\n  color: ${p => p.theme.subText};\n  transition: color 0.3s ease-in;\n  padding: 0;\n  position: relative;\n\n  &:hover,\n  &:focus {\n    color: ${p => p.theme.textColor};\n  }\n\n  svg {\n    display: none;\n    opacity: 0;\n  }\n\n  &[aria-checked='true'] {\n    color: ${p => p.theme.textColor};\n  }\n`;\n\nconst RadioPanel = styled('div')`\n  margin: 0;\n`;\n","import React from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport Feature from 'app/components/acl/feature';\nimport CreateAlertButton from 'app/components/createAlertButton';\nimport * as Layout from 'app/components/layouts/thirds';\nimport ExternalLink from 'app/components/links/externalLink';\nimport List from 'app/components/list';\nimport ListItem from 'app/components/list/listItem';\nimport {Panel, PanelBody, PanelHeader} from 'app/components/panels';\nimport SentryDocumentTitle from 'app/components/sentryDocumentTitle';\nimport {t} from 'app/locale';\nimport space from 'app/styles/space';\nimport {Organization, Project} from 'app/types';\nimport BuilderBreadCrumbs from 'app/views/alerts/builder/builderBreadCrumbs';\nimport {Dataset} from 'app/views/settings/incidentRules/types';\n\nimport {\n  AlertType,\n  AlertWizardAlertNames,\n  AlertWizardOptions,\n  AlertWizardPanelContent,\n  AlertWizardRuleTemplates,\n} from './options';\nimport RadioPanelGroup from './radioPanelGroup';\n\ntype RouteParams = {\n  orgId: string;\n  projectId: string;\n};\n\ntype Props = RouteComponentProps<RouteParams, {}> & {\n  organization: Organization;\n  project: Project;\n  hasMetricAlerts: boolean;\n};\n\ntype State = {\n  alertOption: AlertType | null;\n};\nclass AlertWizard extends React.Component<Props, State> {\n  state: State = {\n    alertOption: null,\n  };\n\n  handleChangeAlertOption = (alertOption: AlertType) => {\n    this.setState({alertOption});\n  };\n\n  renderCreateAlertButton() {\n    const {organization, project, location} = this.props;\n    const {alertOption} = this.state;\n    const metricRuleTemplate = alertOption && AlertWizardRuleTemplates[alertOption];\n    const disabled =\n      !organization.features.includes('performance-view') &&\n      metricRuleTemplate?.dataset === Dataset.TRANSACTIONS;\n\n    const to = {\n      pathname: `/organizations/${organization.slug}/alerts/${project.slug}/new/`,\n      query: {\n        ...(metricRuleTemplate && metricRuleTemplate),\n        createFromWizard: true,\n        referrer: location?.query?.referrer,\n      },\n    };\n    return (\n      <CreateAlertButton\n        organization={organization}\n        projectSlug={project.slug}\n        priority=\"primary\"\n        to={to}\n        disabled={disabled}\n        hideIcon\n      >\n        {t('Set Conditions')}\n      </CreateAlertButton>\n    );\n  }\n\n  render() {\n    const {\n      hasMetricAlerts,\n      organization,\n      params: {projectId},\n    } = this.props;\n    const {alertOption} = this.state;\n    const title = t('Alert Creation Wizard');\n    const panelContent = alertOption && AlertWizardPanelContent[alertOption];\n    return (\n      <React.Fragment>\n        <SentryDocumentTitle title={title} projectSlug={projectId} />\n\n        <Feature features={['organizations:alert-wizard']}>\n          <Layout.Header>\n            <Layout.HeaderContent>\n              <BuilderBreadCrumbs\n                hasMetricAlerts={hasMetricAlerts}\n                orgSlug={organization.slug}\n                projectSlug={projectId}\n                title={t('Create Alert Rule')}\n              />\n              <Layout.Title>{t('What should we alert you about?')}</Layout.Title>\n            </Layout.HeaderContent>\n          </Layout.Header>\n          <StyledLayoutBody>\n            <Layout.Main fullWidth>\n              <WizardBody>\n                <WizardOptions>\n                  <Styledh2>{t('Errors')}</Styledh2>\n                  {AlertWizardOptions.map(({categoryHeading, options}, i) => (\n                    <OptionsWrapper key={categoryHeading}>\n                      {i > 0 && <Styledh2>{categoryHeading}</Styledh2>}\n                      <RadioPanelGroup\n                        choices={options.map(alertType => {\n                          return [alertType, AlertWizardAlertNames[alertType]];\n                        })}\n                        onChange={this.handleChangeAlertOption}\n                        value={alertOption}\n                        label=\"alert-option\"\n                      />\n                    </OptionsWrapper>\n                  ))}\n                </WizardOptions>\n                <WizardPanel visible={!!panelContent && !!alertOption}>\n                  <WizardPanelBody>\n                    {panelContent && alertOption && (\n                      <div>\n                        <PanelHeader>{AlertWizardAlertNames[alertOption]}</PanelHeader>\n                        <PanelBody withPadding>\n                          <PanelDescription>\n                            {panelContent.description}{' '}\n                            {panelContent.docsLink && (\n                              <ExternalLink href={panelContent.docsLink}>\n                                {t('Learn more')}\n                              </ExternalLink>\n                            )}\n                          </PanelDescription>\n                          <WizardImage src={panelContent.illustration} />\n                          <ExampleHeader>{t('Examples')}</ExampleHeader>\n                          <ExampleList symbol=\"bullet\">\n                            {panelContent.examples.map((example, i) => (\n                              <ExampleItem key={i}>{example}</ExampleItem>\n                            ))}\n                          </ExampleList>\n                        </PanelBody>\n                      </div>\n                    )}\n                    <WizardButton>{this.renderCreateAlertButton()}</WizardButton>\n                  </WizardPanelBody>\n                </WizardPanel>\n              </WizardBody>\n            </Layout.Main>\n          </StyledLayoutBody>\n        </Feature>\n      </React.Fragment>\n    );\n  }\n}\n\nconst StyledLayoutBody = styled(Layout.Body)`\n  margin-bottom: -${space(3)};\n`;\n\nconst Styledh2 = styled('h2')`\n  font-weight: normal;\n  font-size: ${p => p.theme.fontSizeLarge};\n  margin-bottom: ${space(1)} !important;\n`;\n\nconst WizardBody = styled('div')`\n  display: flex;\n  padding-top: ${space(1)};\n`;\n\nconst WizardOptions = styled('div')`\n  flex: 3;\n  margin-right: ${space(3)};\n  padding-right: ${space(3)};\n  max-width: 300px;\n`;\n\nconst WizardImage = styled('img')`\n  max-height: 300px;\n`;\n\nconst WizardPanel = styled(Panel)<{visible?: boolean}>`\n  max-width: 700px;\n  position: sticky;\n  top: 20px;\n  flex: 5;\n  display: flex;\n  ${p => !p.visible && 'visibility: hidden'};\n  flex-direction: column;\n  align-items: start;\n  align-self: flex-start;\n  ${p => p.visible && 'animation: 0.6s pop ease forwards'};\n\n  @keyframes pop {\n    0% {\n      transform: translateY(30px);\n      opacity: 0;\n    }\n    100% {\n      transform: translateY(0);\n      opacity: 1;\n    }\n  }\n`;\n\nconst ExampleList = styled(List)`\n  margin-bottom: ${space(2)} !important;\n`;\n\nconst WizardPanelBody = styled(PanelBody)`\n  flex: 1;\n  min-width: 100%;\n`;\n\nconst PanelDescription = styled('p')`\n  margin-bottom: ${space(2)};\n`;\n\nconst ExampleHeader = styled('div')`\n  margin: 0 0 ${space(1)} 0;\n  font-size: ${p => p.theme.fontSizeLarge};\n`;\n\nconst ExampleItem = styled(ListItem)`\n  font-size: ${p => p.theme.fontSizeMedium};\n`;\n\nconst OptionsWrapper = styled('div')`\n  margin-bottom: ${space(4)};\n\n  &:last-child {\n    margin-bottom: 0;\n  }\n`;\n\nconst WizardButton = styled('div')`\n  border-top: 1px solid ${p => p.theme.border};\n  padding: ${space(1.5)} ${space(1.5)} ${space(1.5)} ${space(1.5)};\n`;\n\nexport default AlertWizard;\n","import diagramApdex from 'sentry-images/spot/alerts-wizard-apdex.svg';\nimport diagramCLS from 'sentry-images/spot/alerts-wizard-cls.svg';\nimport diagramCustom from 'sentry-images/spot/alerts-wizard-custom.svg';\nimport diagramErrors from 'sentry-images/spot/alerts-wizard-errors.svg';\nimport diagramFailureRate from 'sentry-images/spot/alerts-wizard-failure-rate.svg';\nimport diagramFID from 'sentry-images/spot/alerts-wizard-fid.svg';\nimport diagramIssues from 'sentry-images/spot/alerts-wizard-issues.svg';\nimport diagramLCP from 'sentry-images/spot/alerts-wizard-lcp.svg';\nimport diagramThroughput from 'sentry-images/spot/alerts-wizard-throughput.svg';\nimport diagramTransactionDuration from 'sentry-images/spot/alerts-wizard-transaction-duration.svg';\nimport diagramUsers from 'sentry-images/spot/alerts-wizard-users-experiencing-errors.svg';\n\nimport {t} from 'app/locale';\nimport {Dataset, EventTypes} from 'app/views/settings/incidentRules/types';\n\nexport type AlertType =\n  | 'issues'\n  | 'num_errors'\n  | 'users_experiencing_errors'\n  | 'throughput'\n  | 'trans_duration'\n  | 'apdex'\n  | 'failure_rate'\n  | 'lcp'\n  | 'fid'\n  | 'cls'\n  | 'fcp'\n  | 'custom';\n\nexport const WebVitalAlertTypes = new Set(['lcp', 'fid', 'cls', 'fcp']);\n\nexport const AlertWizardAlertNames: Record<AlertType, string> = {\n  issues: t('Issues'),\n  num_errors: t('Number of Errors'),\n  users_experiencing_errors: t('Users Experiencing Errors'),\n  throughput: t('Throughput'),\n  trans_duration: t('Transaction Duration'),\n  apdex: t('Apdex'),\n  failure_rate: t('Failure Rate'),\n  lcp: t('Largest Contentful Paint'),\n  fid: t('First Input Delay'),\n  cls: t('Cumulative Layout Shift'),\n  fcp: t('First Contentful Paint'),\n  custom: t('Custom Metric'),\n};\n\nexport const AlertWizardOptions: {\n  categoryHeading: string;\n  options: AlertType[];\n}[] = [\n  {\n    categoryHeading: t('Errors'),\n    options: ['issues', 'num_errors', 'users_experiencing_errors'],\n  },\n  {\n    categoryHeading: t('Performance'),\n    options: [\n      'throughput',\n      'trans_duration',\n      'apdex',\n      'failure_rate',\n      'lcp',\n      'fid',\n      'cls',\n      'fcp',\n    ],\n  },\n  {\n    categoryHeading: t('Other'),\n    options: ['custom'],\n  },\n];\n\ntype PanelContent = {\n  description: string;\n  docsLink?: string;\n  examples: string[];\n  illustration?: string;\n};\n\nexport const AlertWizardPanelContent: Record<AlertType, PanelContent> = {\n  issues: {\n    description: t(\n      'Issues are groups of errors that have a similar stacktrace. Set an alert for new issues, when an issue changes state, frequency of errors, or users affected by an issue.'\n    ),\n    examples: [\n      t(\"When the triggering event's level is fatal.\"),\n      t('When an issue was seen 100 times in the last 2 days.'),\n      t(\n        'Create a JIRA ticket when an issue changes state from resolved to unresolved and is unassigned.'\n      ),\n    ],\n    illustration: diagramIssues,\n  },\n  num_errors: {\n    description: t(\n      'Alert when the number of errors in a project matching your filters crosses a threshold. This is useful for monitoring the overall level or errors in your project or errors occurring in specific parts of your app.'\n    ),\n    examples: [\n      t('When the signup page has more than 10k errors in 5 minutes.'),\n      t('When there are more than 500k errors in 10 minutes from a specific file.'),\n    ],\n    illustration: diagramErrors,\n  },\n  users_experiencing_errors: {\n    description: t(\n      'Alert when the number of users affected by errors in your project crosses a threshold.'\n    ),\n    examples: [\n      t('When 100k users experience an error in 1 hour.'),\n      t('When 100 users experience a problem on the Checkout page.'),\n    ],\n    illustration: diagramUsers,\n  },\n  throughput: {\n    description: t(\n      'Throughput is the total number of transactions in a project and you can alert when it reaches a threshold within a period of time.'\n    ),\n    examples: [\n      t('When number of transactions on a key page exceeds 100k per minute.'),\n      t('When number of transactions drops below a threshold.'),\n    ],\n    illustration: diagramThroughput,\n  },\n  trans_duration: {\n    description: t(\n      'Monitor how long it takes for transactions to complete. Use flexible aggregates like percentiles, averages, and min/max.'\n    ),\n    examples: [\n      t('When any transaction is slower than 3 seconds.'),\n      t('When the 75th percentile response time is higher than 250 milliseconds.'),\n    ],\n    illustration: diagramTransactionDuration,\n  },\n  apdex: {\n    description: t(\n      'Apdex is a metric used to track and measure user satisfaction based on your application response times. The Apdex score provides the ratio of satisfactory, tolerable, and frustrated requests in a specific transaction or endpoint.'\n    ),\n    examples: [t('When apdex is below 300.')],\n    docsLink: 'https://docs.sentry.io/product/performance/metrics/#apdex',\n    illustration: diagramApdex,\n  },\n  failure_rate: {\n    description: t(\n      'Failure rate is the percentage of unsuccessful transactions. Sentry treats transactions with a status other than “ok,” “canceled,” and “unknown” as failures.'\n    ),\n    examples: [t('When the failure rate for an important endpoint reaches 10%.')],\n    docsLink: 'https://docs.sentry.io/product/performance/metrics/#failure-rate',\n    illustration: diagramFailureRate,\n  },\n  lcp: {\n    description: t(\n      'Largest Contentful Paint (LCP) measures loading performance. It marks the point when the largest image or text block is visible within the viewport. A fast LCP helps reassure the user that the page is useful, and so we recommend an LCP of less than 2.5 seconds.'\n    ),\n    examples: [\n      t('When the 75th percentile LCP of your homepage is longer than 2.5 seconds.'),\n    ],\n    docsLink: 'https://docs.sentry.io/product/performance/web-vitals',\n    illustration: diagramLCP,\n  },\n  fid: {\n    description: t(\n      'First Input Delay (FID) measures interactivity as the response time when the user tries to interact with the viewport. A low FID helps ensure that a page is useful, and we recommend a FID of less than 100 milliseconds.'\n    ),\n    examples: [t('When the average FID of a page is longer than 4 seconds.')],\n    docsLink: 'https://docs.sentry.io/product/performance/web-vitals',\n    illustration: diagramFID,\n  },\n  cls: {\n    description: t(\n      'Cumulative Layout Shift (CLS) measures visual stability by quantifying unexpected layout shifts that occur during the entire lifespan of the page. A CLS of less than 0.1 is a good user experience, while anything greater than 0.25 is poor.'\n    ),\n    examples: [t('When the CLS of a page is more than 0.5.')],\n    docsLink: 'https://docs.sentry.io/product/performance/web-vitals',\n    illustration: diagramCLS,\n  },\n  fcp: {\n    description: t(\n      'First Contentful Paint (FCP), like Largest Contentful Paint (LCP), measures loading performance. It marks the point when content such as text and images can first be seen on a page.'\n    ),\n    examples: [t('When the average FCP of a page is longer than 0.25 seconds.')],\n    docsLink: 'https://docs.sentry.io/product/performance/web-vitals',\n  },\n  custom: {\n    description: t(\n      'Alert on metrics which are not listed above, such as first paint (FP) and time to first byte (TTFB).'\n    ),\n    examples: [\n      t('When the 95th percentile FP of a page is longer than 250 milliseconds.'),\n      t('When the average TTFB of a page is longer than 600 millliseconds.'),\n    ],\n    illustration: diagramCustom,\n  },\n};\n\nexport type WizardRuleTemplate = {\n  aggregate: string;\n  dataset: Dataset;\n  eventTypes: EventTypes;\n};\n\nexport const AlertWizardRuleTemplates: Record<\n  Exclude<AlertType, 'issues'>,\n  WizardRuleTemplate\n> = {\n  num_errors: {\n    aggregate: 'count()',\n    dataset: Dataset.ERRORS,\n    eventTypes: EventTypes.ERROR,\n  },\n  users_experiencing_errors: {\n    aggregate: 'count_unique(tags[sentry:user])',\n    dataset: Dataset.ERRORS,\n    eventTypes: EventTypes.ERROR,\n  },\n  throughput: {\n    aggregate: 'count()',\n    dataset: Dataset.TRANSACTIONS,\n    eventTypes: EventTypes.TRANSACTION,\n  },\n  trans_duration: {\n    aggregate: 'p95(transaction.duration)',\n    dataset: Dataset.TRANSACTIONS,\n    eventTypes: EventTypes.TRANSACTION,\n  },\n  apdex: {\n    aggregate: 'apdex(300)',\n    dataset: Dataset.TRANSACTIONS,\n    eventTypes: EventTypes.TRANSACTION,\n  },\n  failure_rate: {\n    aggregate: 'failure_rate()',\n    dataset: Dataset.TRANSACTIONS,\n    eventTypes: EventTypes.TRANSACTION,\n  },\n  lcp: {\n    aggregate: 'p95(measurements.lcp)',\n    dataset: Dataset.TRANSACTIONS,\n    eventTypes: EventTypes.TRANSACTION,\n  },\n  fid: {\n    aggregate: 'p95(measurements.fid)',\n    dataset: Dataset.TRANSACTIONS,\n    eventTypes: EventTypes.TRANSACTION,\n  },\n  cls: {\n    aggregate: 'p95(measurements.cls)',\n    dataset: Dataset.TRANSACTIONS,\n    eventTypes: EventTypes.TRANSACTION,\n  },\n  fcp: {\n    aggregate: 'p95(measurements.fcp)',\n    dataset: Dataset.TRANSACTIONS,\n    eventTypes: EventTypes.TRANSACTION,\n  },\n  custom: {\n    aggregate: 'p95(measurements.fp)',\n    dataset: Dataset.TRANSACTIONS,\n    eventTypes: EventTypes.TRANSACTION,\n  },\n};\n","import styled from '@emotion/styled';\nimport {Query} from 'history';\n\nimport space from 'app/styles/space';\n\nimport {DisplayModes} from './charts';\n\nexport enum TransactionFilterOptions {\n  FASTEST = 'fastest',\n  SLOW = 'slow',\n  OUTLIER = 'outlier',\n  RECENT = 'recent',\n}\n\nexport function generateTransactionSummaryRoute({orgSlug}: {orgSlug: String}): string {\n  return `/organizations/${orgSlug}/performance/summary/`;\n}\n\nexport function transactionSummaryRouteWithQuery({\n  orgSlug,\n  transaction,\n  projectID,\n  query,\n  unselectedSeries = 'p100()',\n  display,\n  trendFunction,\n  trendColumn,\n  showTransactions,\n}: {\n  orgSlug: string;\n  transaction: string;\n  query: Query;\n  display?: DisplayModes;\n  trendFunction?: string;\n  trendColumn?: string;\n  unselectedSeries?: string | string[];\n  projectID?: string | string[];\n  showTransactions?: TransactionFilterOptions;\n}) {\n  const pathname = generateTransactionSummaryRoute({\n    orgSlug,\n  });\n\n  return {\n    pathname,\n    query: {\n      transaction,\n      project: projectID,\n      environment: query.environment,\n      statsPeriod: query.statsPeriod,\n      start: query.start,\n      end: query.end,\n      query: query.query,\n      unselectedSeries,\n      showTransactions,\n      display,\n      trendFunction,\n      trendColumn,\n    },\n  };\n}\n\nexport const SidebarSpacer = styled('div')`\n  margin-top: ${space(3)};\n`;\n","module.exports = __webpack_public_path__ + \"spot/alerts-wizard-apdex.4f8e06.svg\";","module.exports = __webpack_public_path__ + \"spot/alerts-wizard-cls.a2d5a0.svg\";","module.exports = __webpack_public_path__ + \"spot/alerts-wizard-custom.c66586.svg\";","module.exports = __webpack_public_path__ + \"spot/alerts-wizard-errors.8bf06c.svg\";","module.exports = __webpack_public_path__ + \"spot/alerts-wizard-failure-rate.2e677f.svg\";","module.exports = __webpack_public_path__ + \"spot/alerts-wizard-fid.213b0c.svg\";","module.exports = __webpack_public_path__ + \"spot/alerts-wizard-issues.9ce842.svg\";","module.exports = __webpack_public_path__ + \"spot/alerts-wizard-lcp.5cfb11.svg\";","module.exports = __webpack_public_path__ + \"spot/alerts-wizard-throughput.0260a3.svg\";","module.exports = __webpack_public_path__ + \"spot/alerts-wizard-transaction-duration.1be23d.svg\";","module.exports = __webpack_public_path__ + \"spot/alerts-wizard-users-experiencing-errors.e73724.svg\";"],"sourceRoot":""}