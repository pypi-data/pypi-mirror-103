{"version":3,"sources":["webpack:///./app/views/admin/adminMail.tsx","webpack:///./app/views/asyncView.tsx"],"names":["AdminMail","testMailEmail","state","data","api","requestPromise","method","addSuccessMessage","t","addErrorMessage","responseJSON","error","this","mailHost","mailPassword","mailUsername","mailPort","mailUseTls","mailUseSsl","mailFrom","mailListNamespace","className","onClick","sendTestEmail","AsyncView","title","getTitle","renderComponent","AsyncComponent"],"mappings":"u/BAqBqBA,E,kpBAKH,2FACRC,EAAgB,EAAKC,MAAMC,KAAKF,cADxB,kBAIN,EAAKG,IAAIC,eAAe,kBAAmB,CAACC,OAAQ,SAJ9C,QAKZC,SAAkBC,OAAE,mCAAoCP,IAL5C,iDAOZQ,QACE,KAAMC,aACF,KAAMA,aAAaC,OACnBH,OAAE,sDAVI,0D,6CAJhB,WACE,MAAO,CAAC,CAAC,OAAQ,sB,wBAkBnB,WAAa,IACJL,EAAQS,KAAKV,MAAbC,KAELU,EASEV,EATFU,SACAC,EAQEX,EARFW,aACAC,EAOEZ,EAPFY,aACAC,EAMEb,EANFa,SACAC,EAKEd,EALFc,WACAC,EAIEf,EAJFe,WACAC,EAGEhB,EAHFgB,SACAC,EAEEjB,EAFFiB,kBACAnB,EACEE,EADFF,cAGF,OACE,oBACE,mBAAKO,OAAE,mBAEP,cAAIa,UAAU,SACZ,mBAAKb,OAAE,kBACP,mBACE,eAAKa,UAAU,OAAOF,KAGxB,mBAAKX,OAAE,UACP,mBACE,eAAKa,UAAU,OACZR,EADH,IACcG,KAIhB,mBAAKR,OAAE,cACP,mBACE,eAAKa,UAAU,OAAON,IAAgB,mBAAKP,OAAE,eAG/C,mBAAKA,OAAE,cACP,mBACE,eAAKa,UAAU,OACZP,EAAe,YAAa,mBAAKN,OAAE,eAIxC,mBAAKA,OAAE,eACP,mBACE,eAAKa,UAAU,OAAOJ,GAAaT,OAAE,QAASA,OAAE,SAGlD,mBAAKA,OAAE,UACP,mBACE,eAAKa,UAAU,OAAOH,GAAaV,OAAE,QAASA,OAAE,SAGlD,mBAAKA,OAAE,4BACP,mBACE,eAAKa,UAAU,OAAOD,MAI1B,mBAAKZ,OAAE,mBAEP,kBACGA,OACC,uGAIJ,QAAC,KAAD,CAAQc,QAASV,KAAKW,gBACnBf,OAAE,0BAA2BP,S,GAxFDuB,M,+mBCblBA,E,0iBAInB,WACE,MAAO,K,oBAGT,WACE,IAAMC,EAAQb,KAAKc,WACnB,OACE,QAAC,IAAD,CAAeD,MAAK,UAAKA,EAAQ,GAAH,OAAMA,EAAN,OAAmB,GAA7B,WACjBb,KAAKe,uB,GATJC,KAHWJ,E","file":"AdminMail.a7f7a0ca71e8c9dd9df3.js","sourcesContent":["import React from 'react';\n\nimport {addErrorMessage, addSuccessMessage} from 'app/actionCreators/indicator';\nimport Button from 'app/components/button';\nimport {t} from 'app/locale';\nimport AsyncView from 'app/views/asyncView';\n\ntype Data = {\n  mailHost: string;\n  mailPassword: string;\n  mailUsername: string;\n  mailPort: string;\n  mailUseTls: string;\n  mailUseSsl: string;\n  mailFrom: string;\n  mailListNamespace: string;\n  testMailEmail: string;\n};\n\ntype State = AsyncView['state'] & {data: Data};\n\nexport default class AdminMail extends AsyncView<{}, State> {\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    return [['data', '/internal/mail/']];\n  }\n\n  sendTestEmail = async () => {\n    const testMailEmail = this.state.data.testMailEmail;\n\n    try {\n      await this.api.requestPromise('/internal/mail/', {method: 'POST'});\n      addSuccessMessage(t('A test email has been sent to %s', testMailEmail));\n    } catch (error) {\n      addErrorMessage(\n        error.responseJSON\n          ? error.responseJSON.error\n          : t('Unable to send test email. Check your server logs')\n      );\n    }\n  };\n\n  renderBody() {\n    const {data} = this.state;\n    const {\n      mailHost,\n      mailPassword,\n      mailUsername,\n      mailPort,\n      mailUseTls,\n      mailUseSsl,\n      mailFrom,\n      mailListNamespace,\n      testMailEmail,\n    } = data;\n\n    return (\n      <div>\n        <h3>{t('SMTP Settings')}</h3>\n\n        <dl className=\"vars\">\n          <dt>{t('From Address')}</dt>\n          <dd>\n            <pre className=\"val\">{mailFrom}</pre>\n          </dd>\n\n          <dt>{t('Host')}</dt>\n          <dd>\n            <pre className=\"val\">\n              {mailHost}:{mailPort}\n            </pre>\n          </dd>\n\n          <dt>{t('Username')}</dt>\n          <dd>\n            <pre className=\"val\">{mailUsername || <em>{t('not set')}</em>}</pre>\n          </dd>\n\n          <dt>{t('Password')}</dt>\n          <dd>\n            <pre className=\"val\">\n              {mailPassword ? '********' : <em>{t('not set')}</em>}\n            </pre>\n          </dd>\n\n          <dt>{t('STARTTLS?')}</dt>\n          <dd>\n            <pre className=\"val\">{mailUseTls ? t('Yes') : t('No')}</pre>\n          </dd>\n\n          <dt>{t('SSL?')}</dt>\n          <dd>\n            <pre className=\"val\">{mailUseSsl ? t('Yes') : t('No')}</pre>\n          </dd>\n\n          <dt>{t('Mailing List Namespace')}</dt>\n          <dd>\n            <pre className=\"val\">{mailListNamespace}</pre>\n          </dd>\n        </dl>\n\n        <h3>{t('Test Settings')}</h3>\n\n        <p>\n          {t(\n            \"Send an email to your account's email address to confirm that everything is configured correctly.\"\n          )}\n        </p>\n\n        <Button onClick={this.sendTestEmail}>\n          {t('Send a test email to %s', testMailEmail)}\n        </Button>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport DocumentTitle from 'react-document-title';\n\nimport AsyncComponent from 'app/components/asyncComponent';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    const title = this.getTitle();\n    return (\n      <DocumentTitle title={`${title ? `${title} - ` : ''}Sentry`}>\n        {this.renderComponent() as React.ReactChild}\n      </DocumentTitle>\n    );\n  }\n}\n"],"sourceRoot":""}