{"version":3,"sources":["webpack:///./app/data/forms/accountPassword.tsx","webpack:///./app/utils/recreateRoute.tsx","webpack:///./app/views/settings/account/accountSecurity/components/twoFactorRequired.tsx","webpack:///./app/views/settings/account/passwordForm.tsx","webpack:///./app/views/settings/account/accountSecurity/index.tsx"],"names":["getUserIsNotManaged","user","isManaged","route","title","fields","name","type","autoComplete","label","placeholder","help","visible","required","validate","id","form","passwordVerify","passwordNew","recreateRoute","to","options","lastRootIndex","routeIndex","routes","params","location","stepBack","paths","map","path","indexOf","findLastIndex","slice","baseRoute","search","hash","fullRoute","join","replaceRouterParams","StyledAlert","Alert","space","getPendingInvite","data-test-id","icon","size","tct","link","href","PasswordForm","ConfigStore","apiMethod","apiEndpoint","initialData","onSubmitSuccess","_change","model","resetForm","addSuccessMessage","onSubmitError","addErrorMessage","hideFooter","forms","accountPasswordFields","additionalFieldProps","renderFooter","justifyContent","priority","t","renderHeader","AccountSecurity","api","requestPromise","method","data","all","window","assign","slugs","props","orgsRequire2fa","slug","length","this","authenticators","countEnrolled","deleteDisabled","onDisable","isEmpty","tabs","underlined","index","alignRight","flexibleControlStateSize","onClick","handleSessionClose","auth","authId","description","isBackupInterface","isEnrolled","configureButton","AuthenticatorPanelItem","key","AuthenticatorHeader","AuthenticatorTitle","AuthenticatorStatus","enabled","AuthenticatorName","Actions","className","formatOrgSlugs","disabled","onConfirm","Description","AsyncView","PanelItem","CircleIndicator","TextBlock"],"mappings":"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","file":"AccountSecurity.e5cad38c98c3d15a0a30.js","sourcesContent":["import {JsonFormObject} from 'app/views/settings/components/forms/type';\n\nconst getUserIsNotManaged = ({user}) => !user.isManaged;\n\nconst formGroups: JsonFormObject[] = [\n  {\n    // Form \"section\"/\"panel\"\n    title: 'Password',\n    fields: [\n      {\n        name: 'password',\n        type: 'secret',\n        autoComplete: 'current-password',\n        label: 'Current Password',\n        placeholder: '',\n        help: 'Your current password',\n        visible: getUserIsNotManaged,\n        required: true,\n      },\n      {\n        name: 'passwordNew',\n        type: 'secret',\n        autoComplete: 'new-password',\n        label: 'New Password',\n        placeholder: '',\n        help: '',\n        required: true,\n        visible: getUserIsNotManaged,\n        validate: ({id, form}) => (form[id] !== form.passwordVerify ? [[id, '']] : []),\n      },\n      {\n        name: 'passwordVerify',\n        type: 'secret',\n        autoComplete: 'new-password',\n        label: 'Verify New Password',\n        placeholder: '',\n        help: 'Verify your new password',\n        required: true,\n        visible: getUserIsNotManaged,\n        validate: ({id, form}) => {\n          // If password is set, and passwords don't match, then return an error\n          if (form.passwordNew && form.passwordNew !== form[id]) {\n            return [[id, 'Passwords do not match']];\n          }\n\n          return [];\n        },\n      },\n    ],\n  },\n];\n\nexport const route = '/settings/account/security/';\nexport default formGroups;\n","import {Location} from 'history';\nimport findLastIndex from 'lodash/findLastIndex';\n\nimport replaceRouterParams from 'app/utils/replaceRouterParams';\nimport {RouteWithName} from 'app/views/settings/components/settingsBreadcrumb/types';\n\ntype Options = {\n  routes: RouteWithName[];\n\n  // parameters to replace any route string parameters (e.g. if route is `:orgId`,\n  // params should have `{orgId: slug}`\n  params: {[key: string]: string | undefined};\n\n  /**\n   * The number of routes to to pop off of `routes\n   * Must be < 0\n   *\n   * There's no ts type for negative numbers so we are arbitrarily specifying -1-9\n   */\n  stepBack?: -1 | -2 | -3 | -4 | -5 | -6 | -7 | -8 | -9;\n  location?: Location;\n};\n\n/**\n * Given a route object or a string and a list of routes + params from router, this will attempt to recreate a location string while replacing url params.\n * Can additionally specify the number of routes to move back\n *\n * See tests for examples\n */\nexport default function recreateRoute(\n  to: string | RouteWithName,\n  options: Options\n): string {\n  const {routes, params, location, stepBack} = options;\n  const paths = routes.map(({path}) => path || '');\n  let lastRootIndex: number;\n  let routeIndex: number | undefined;\n\n  // TODO(ts): typescript things\n  if (typeof to !== 'string') {\n    routeIndex = routes.indexOf(to) + 1;\n    lastRootIndex = findLastIndex(paths.slice(0, routeIndex), path => path[0] === '/');\n  } else {\n    lastRootIndex = findLastIndex(paths, path => path[0] === '/');\n  }\n\n  let baseRoute = paths.slice(lastRootIndex, routeIndex);\n\n  if (typeof stepBack !== 'undefined') {\n    baseRoute = baseRoute.slice(0, stepBack);\n  }\n\n  const search = location?.search ?? '';\n  const hash = location?.hash ?? '';\n\n  const fullRoute = `${baseRoute.join('')}${\n    typeof to !== 'string' ? '' : to\n  }${search}${hash}`;\n\n  return replaceRouterParams(fullRoute, params);\n}\n","import React from 'react';\nimport styled from '@emotion/styled';\n\nimport Alert from 'app/components/alert';\nimport ExternalLink from 'app/components/links/externalLink';\nimport {IconFlag} from 'app/icons';\nimport {tct} from 'app/locale';\nimport space from 'app/styles/space';\nimport getPendingInvite from 'app/utils/getPendingInvite';\n\nconst TwoFactorRequired = () =>\n  !getPendingInvite() ? null : (\n    <StyledAlert data-test-id=\"require-2fa\" type=\"error\" icon={<IconFlag size=\"md\" />}>\n      {tct(\n        'You have been invited to an organization that requires [link:two-factor authentication].' +\n          ' Setup two-factor authentication below to join your organization.',\n        {\n          link: <ExternalLink href=\"https://docs.sentry.io/accounts/require-2fa/\" />,\n        }\n      )}\n    </StyledAlert>\n  );\n\nconst StyledAlert = styled(Alert)`\n  margin: ${space(3)} 0;\n`;\n\nexport default TwoFactorRequired;\n","import React from 'react';\n\nimport {addErrorMessage, addSuccessMessage} from 'app/actionCreators/indicator';\nimport Button from 'app/components/button';\nimport {PanelAlert, PanelItem} from 'app/components/panels';\nimport accountPasswordFields from 'app/data/forms/accountPassword';\nimport {t} from 'app/locale';\nimport ConfigStore from 'app/stores/configStore';\nimport Form from 'app/views/settings/components/forms/form';\nimport JsonForm from 'app/views/settings/components/forms/jsonForm';\n\ntype OnSubmitSuccess = Parameters<NonNullable<Form['props']['onSubmitSuccess']>>;\n\nfunction PasswordForm() {\n  function handleSubmitSuccess(_change: OnSubmitSuccess[0], model: OnSubmitSuccess[1]) {\n    // Reset form on success\n    model.resetForm();\n    addSuccessMessage('Password has been changed');\n  }\n\n  function handleSubmitError() {\n    addErrorMessage('Error changing password');\n  }\n\n  const user = ConfigStore.get('user');\n\n  return (\n    <Form\n      apiMethod=\"PUT\"\n      apiEndpoint=\"/users/me/password/\"\n      initialData={{}}\n      onSubmitSuccess={handleSubmitSuccess}\n      onSubmitError={handleSubmitError}\n      hideFooter\n    >\n      <JsonForm\n        forms={accountPasswordFields}\n        additionalFieldProps={{user}}\n        renderFooter={() => (\n          <PanelItem justifyContent=\"flex-end\">\n            <Button type=\"submit\" priority=\"primary\">\n              {t('Change password')}\n            </Button>\n          </PanelItem>\n        )}\n        renderHeader={() => (\n          <PanelAlert type=\"info\">\n            {t('Changing your password will invalidate all logged in sessions.')}\n          </PanelAlert>\n        )}\n      />\n    </Form>\n  );\n}\n\nexport default PasswordForm;\n","import React from 'react';\nimport * as ReactRouter from 'react-router';\nimport styled from '@emotion/styled';\n\nimport {addErrorMessage} from 'app/actionCreators/indicator';\nimport Button from 'app/components/button';\nimport CircleIndicator from 'app/components/circleIndicator';\nimport ListLink from 'app/components/links/listLink';\nimport NavTabs from 'app/components/navTabs';\nimport {Panel, PanelBody, PanelHeader, PanelItem} from 'app/components/panels';\nimport Tooltip from 'app/components/tooltip';\nimport {IconDelete} from 'app/icons';\nimport {t} from 'app/locale';\nimport space from 'app/styles/space';\nimport {Authenticator, OrganizationSummary} from 'app/types';\nimport recreateRoute from 'app/utils/recreateRoute';\nimport AsyncView from 'app/views/asyncView';\nimport RemoveConfirm from 'app/views/settings/account/accountSecurity/components/removeConfirm';\nimport TwoFactorRequired from 'app/views/settings/account/accountSecurity/components/twoFactorRequired';\nimport PasswordForm from 'app/views/settings/account/passwordForm';\nimport EmptyMessage from 'app/views/settings/components/emptyMessage';\nimport Field from 'app/views/settings/components/forms/field';\nimport SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';\nimport TextBlock from 'app/views/settings/components/text/textBlock';\n\ntype Props = {\n  authenticators: Authenticator[] | null;\n  orgsRequire2fa: OrganizationSummary[];\n  countEnrolled: number;\n  deleteDisabled: boolean;\n  onDisable: (auth: Authenticator) => void;\n} & AsyncView['props'] &\n  ReactRouter.WithRouterProps;\n\n/**\n * Lists 2fa devices + password change form\n */\nclass AccountSecurity extends AsyncView<Props> {\n  getTitle() {\n    return t('Security');\n  }\n\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    return [];\n  }\n\n  handleSessionClose = async () => {\n    try {\n      await this.api.requestPromise('/auth/', {\n        method: 'DELETE',\n        data: {all: true},\n      });\n      window.location.assign('/auth/login/');\n    } catch (err) {\n      addErrorMessage(t('There was a problem closing all sessions'));\n      throw err;\n    }\n  };\n\n  formatOrgSlugs = () => {\n    const {orgsRequire2fa} = this.props;\n    const slugs = orgsRequire2fa.map(({slug}) => slug);\n\n    return [slugs.slice(0, -1).join(', '), slugs.slice(-1)[0]].join(\n      slugs.length > 1 ? ' and ' : ''\n    );\n  };\n\n  renderBody() {\n    const {authenticators, countEnrolled, deleteDisabled, onDisable} = this.props;\n    const isEmpty = !authenticators?.length;\n\n    return (\n      <div>\n        <SettingsPageHeader\n          title={t('Security')}\n          tabs={\n            <NavTabs underlined>\n              <ListLink to={recreateRoute('', this.props)} index>\n                {t('Settings')}\n              </ListLink>\n              <ListLink to={recreateRoute('session-history/', this.props)}>\n                {t('Session History')}\n              </ListLink>\n            </NavTabs>\n          }\n        />\n\n        {!isEmpty && countEnrolled === 0 && <TwoFactorRequired />}\n\n        <PasswordForm />\n\n        <Panel>\n          <PanelHeader>{t('Sessions')}</PanelHeader>\n          <PanelBody>\n            <Field\n              alignRight\n              flexibleControlStateSize\n              label={t('Sign out of all devices')}\n              help={t(\n                'Signing out of all devices will sign you out of this device as well.'\n              )}\n            >\n              <Button data-test-id=\"signoutAll\" onClick={this.handleSessionClose}>\n                {t('Sign out of all devices')}\n              </Button>\n            </Field>\n          </PanelBody>\n        </Panel>\n\n        <Panel>\n          <PanelHeader>{t('Two-Factor Authentication')}</PanelHeader>\n\n          {isEmpty && (\n            <EmptyMessage>{t('No available authenticators to add')}</EmptyMessage>\n          )}\n\n          <PanelBody>\n            {!isEmpty &&\n              authenticators?.map(auth => {\n                const {\n                  id,\n                  authId,\n                  description,\n                  isBackupInterface,\n                  isEnrolled,\n                  configureButton,\n                  name,\n                } = auth;\n                return (\n                  <AuthenticatorPanelItem key={id}>\n                    <AuthenticatorHeader>\n                      <AuthenticatorTitle>\n                        <AuthenticatorStatus enabled={isEnrolled} />\n                        <AuthenticatorName>{name}</AuthenticatorName>\n                      </AuthenticatorTitle>\n\n                      <Actions>\n                        {!isBackupInterface && !isEnrolled && (\n                          <Button\n                            to={`/settings/account/security/mfa/${id}/enroll/`}\n                            size=\"small\"\n                            priority=\"primary\"\n                            className=\"enroll-button\"\n                          >\n                            {t('Add')}\n                          </Button>\n                        )}\n\n                        {isEnrolled && authId && (\n                          <Button\n                            to={`/settings/account/security/mfa/${authId}/`}\n                            size=\"small\"\n                            className=\"details-button\"\n                          >\n                            {configureButton}\n                          </Button>\n                        )}\n\n                        {!isBackupInterface && isEnrolled && (\n                          <Tooltip\n                            title={t(\n                              `Two-factor authentication is required for organization(s): ${this.formatOrgSlugs()}.`\n                            )}\n                            disabled={!deleteDisabled}\n                          >\n                            <RemoveConfirm\n                              onConfirm={() => onDisable(auth)}\n                              disabled={deleteDisabled}\n                            >\n                              <Button\n                                size=\"small\"\n                                label={t('delete')}\n                                icon={<IconDelete />}\n                              />\n                            </RemoveConfirm>\n                          </Tooltip>\n                        )}\n                      </Actions>\n\n                      {isBackupInterface && !isEnrolled ? t('requires 2FA') : null}\n                    </AuthenticatorHeader>\n\n                    <Description>{description}</Description>\n                  </AuthenticatorPanelItem>\n                );\n              })}\n          </PanelBody>\n        </Panel>\n      </div>\n    );\n  }\n}\n\nconst AuthenticatorName = styled('span')`\n  font-size: 1.2em;\n`;\n\nconst AuthenticatorPanelItem = styled(PanelItem)`\n  flex-direction: column;\n`;\n\nconst AuthenticatorHeader = styled('div')`\n  display: flex;\n  flex: 1;\n  align-items: center;\n`;\n\nconst AuthenticatorTitle = styled('div')`\n  flex: 1;\n`;\n\nconst Actions = styled('div')`\n  display: grid;\n  grid-auto-flow: column;\n  grid-gap: ${space(1)};\n`;\n\nconst AuthenticatorStatus = styled(CircleIndicator)`\n  margin-right: ${space(1)};\n`;\n\nconst Description = styled(TextBlock)`\n  margin-top: ${space(2)};\n  margin-bottom: 0;\n`;\n\nexport default AccountSecurity;\n"],"sourceRoot":""}