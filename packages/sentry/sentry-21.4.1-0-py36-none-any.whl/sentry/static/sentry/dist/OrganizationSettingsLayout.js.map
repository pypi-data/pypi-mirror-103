{"version":3,"sources":["webpack:///./app/views/settings/components/settingsNavItem.tsx","webpack:///./app/views/settings/components/settingsNavigationGroup.tsx","webpack:///./app/views/settings/components/settingsNavigation.tsx","webpack:///./app/views/settings/organization/organizationSettingsNavigation.tsx","webpack:///./app/views/settings/organization/organizationSettingsLayout.tsx"],"names":["SettingsNavItem","badge","label","index","id","props","LabelHook","HookOrDefault","hookName","defaultComponent","children","renderedBadge","type","text","StyledNavItem","onlyActiveOnIndex","activeClassName","Link","p","theme","gray300","textColor","active","backgroundSecondary","SettingsNavigationGroup","organization","project","name","items","NavSection","data-test-id","SettingsHeading","map","path","title","show","recordAnalytics","badgeResult","to","replaceRouterParams","orgId","slug","projectId","key","onClick","window","location","pathname","trackAnalyticsEvent","organization_id","project_id","eventName","eventKey","sidebar_item_id","dest","subText","SettingsNavigation","error","errorInfo","Sentry","scope","Object","keys","forEach","setExtra","href","this","navigationObjects","hooks","hookConfigs","stickyTop","otherProps","navWithHooks","concat","PositionStickyWrapper","config","Hook","i","React","space","breakpoints","OrganizationSettingsNavigation","createReactClass","displayName","mixins","Reflux","HookStore","getInitialState","getHooks","componentDidMount","setState","cb","handleHooks","org","render","state","access","Set","features","navigationConfiguration","withOrganization","OrganizationSettingsLayout","renderNavigation"],"mappings":"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","file":"OrganizationSettingsLayout.98804e0d155d93d9a1c4.js","sourcesContent":["import React from 'react';\nimport {Link} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport Badge from 'app/components/badge';\nimport FeatureBadge from 'app/components/featureBadge';\nimport HookOrDefault from 'app/components/hookOrDefault';\n\ntype Props = {\n  to: React.ComponentProps<Link>['to'];\n  label: React.ReactNode;\n  badge?: string | number | null;\n  index?: boolean;\n  id?: string;\n  onClick?: (e: React.MouseEvent) => void;\n};\n\nconst SettingsNavItem = ({badge, label, index, id, ...props}: Props) => {\n  const LabelHook = HookOrDefault({\n    hookName: 'sidebar:item-label',\n    defaultComponent: ({children}) => <React.Fragment>{children}</React.Fragment>,\n  });\n\n  const renderedBadge =\n    badge === 'new' ? <FeatureBadge type=\"new\" /> : <Badge text={badge} />;\n\n  return (\n    <StyledNavItem onlyActiveOnIndex={index} activeClassName=\"active\" {...props}>\n      <LabelHook id={id}>{label}</LabelHook>\n\n      {badge ? renderedBadge : null}\n    </StyledNavItem>\n  );\n};\n\nconst StyledNavItem = styled(Link)`\n  display: block;\n  color: ${p => p.theme.gray300};\n  font-size: 14px;\n  line-height: 30px;\n  position: relative;\n\n  &.active {\n    color: ${p => p.theme.textColor};\n\n    &:before {\n      background: ${p => p.theme.active};\n    }\n  }\n\n  &:hover,\n  &:focus,\n  &:active {\n    color: ${p => p.theme.textColor};\n    outline: none;\n  }\n\n  &.focus-visible {\n    outline: none;\n    background: ${p => p.theme.backgroundSecondary};\n    padding-left: 15px;\n    margin-left: -15px;\n    border-radius: 3px;\n\n    &:before {\n      left: -15px;\n    }\n  }\n\n  &:before {\n    position: absolute;\n    content: '';\n    display: block;\n    top: 4px;\n    left: -30px;\n    height: 20px;\n    width: 4px;\n    background: transparent;\n    border-radius: 0 2px 2px 0;\n  }\n`;\n\nexport default SettingsNavItem;\n","import React from 'react';\nimport styled from '@emotion/styled';\n\nimport {trackAnalyticsEvent} from 'app/utils/analytics';\nimport replaceRouterParams from 'app/utils/replaceRouterParams';\nimport SettingsNavItem from 'app/views/settings/components/settingsNavItem';\nimport {NavigationGroupProps} from 'app/views/settings/types';\n\nconst SettingsNavigationGroup = (props: NavigationGroupProps) => {\n  const {organization, project, name, items} = props;\n\n  return (\n    <NavSection data-test-id={name}>\n      <SettingsHeading>{name}</SettingsHeading>\n      {items.map(({path, title, index, show, badge, id, recordAnalytics}) => {\n        if (typeof show === 'function' && !show(props)) {\n          return null;\n        }\n        if (typeof show !== 'undefined' && !show) {\n          return null;\n        }\n        const badgeResult = typeof badge === 'function' ? badge(props) : null;\n        const to = replaceRouterParams(path, {\n          ...(organization ? {orgId: organization.slug} : {}),\n          ...(project ? {projectId: project.slug} : {}),\n        });\n\n        const handleClick = () => {\n          //only call the analytics event if the URL is changing\n          if (recordAnalytics && to !== window.location.pathname) {\n            trackAnalyticsEvent({\n              organization_id: organization && organization.id,\n              project_id: project && project.id,\n              eventName: 'Sidebar Item Clicked',\n              eventKey: 'sidebar.item_clicked',\n              sidebar_item_id: id,\n              dest: path,\n            });\n          }\n        };\n\n        return (\n          <SettingsNavItem\n            key={title}\n            to={to}\n            label={title}\n            index={index}\n            badge={badgeResult}\n            id={id}\n            onClick={handleClick}\n          />\n        );\n      })}\n    </NavSection>\n  );\n};\n\nconst NavSection = styled('div')`\n  margin-bottom: 20px;\n`;\n\nconst SettingsHeading = styled('div')`\n  color: ${p => p.theme.subText};\n  font-size: 12px;\n  font-weight: 600;\n  text-transform: uppercase;\n  margin-bottom: 20px;\n`;\n\nexport default SettingsNavigationGroup;\n","import React from 'react';\nimport styled from '@emotion/styled';\nimport * as Sentry from '@sentry/react';\n\nimport space from 'app/styles/space';\nimport SettingsNavigationGroup from 'app/views/settings/components/settingsNavigationGroup';\nimport {NavigationProps, NavigationSection} from 'app/views/settings/types';\n\ntype DefaultProps = {\n  /**\n   * Additional navigation configuration driven by hooks\n   */\n  hookConfigs: NavigationSection[];\n  /**\n   * Additional navigation elements driven from hooks\n   */\n  hooks: React.ReactElement[];\n  /**\n   * How far from the top of the page should the navigation be when stickied.\n   */\n  stickyTop: string;\n};\n\ntype Props = DefaultProps &\n  NavigationProps & {\n    /**\n     * The configuration for this navigation panel\n     */\n    navigationObjects: NavigationSection[];\n  };\n\nclass SettingsNavigation extends React.Component<Props> {\n  static defaultProps: DefaultProps = {\n    hooks: [],\n    hookConfigs: [],\n    stickyTop: '69px',\n  };\n\n  componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {\n    Sentry.withScope(scope => {\n      Object.keys(errorInfo).forEach(key => {\n        scope.setExtra(key, errorInfo[key]);\n      });\n      scope.setExtra('url', window.location.href);\n      Sentry.captureException(error);\n    });\n  }\n\n  render() {\n    const {navigationObjects, hooks, hookConfigs, stickyTop, ...otherProps} = this.props;\n    const navWithHooks = navigationObjects.concat(hookConfigs);\n\n    return (\n      <PositionStickyWrapper stickyTop={stickyTop}>\n        {navWithHooks.map(config => (\n          <SettingsNavigationGroup key={config.name} {...otherProps} {...config} />\n        ))}\n        {hooks.map((Hook, i) => React.cloneElement(Hook, {key: `hook-${i}`}))}\n      </PositionStickyWrapper>\n    );\n  }\n}\n\nconst PositionStickyWrapper = styled('div')<{stickyTop: string}>`\n  padding: ${space(4)};\n  padding-right: ${space(2)};\n\n  @media (min-width: ${p => p.theme.breakpoints[0]}) {\n    position: sticky;\n    top: ${p => p.stickyTop};\n    overflow: scroll;\n    -ms-overflow-style: none;\n    scrollbar-width: none;\n\n    &::-webkit-scrollbar {\n      display: none;\n    }\n  }\n`;\n\nexport default SettingsNavigation;\n","import React from 'react';\nimport createReactClass from 'create-react-class';\nimport Reflux from 'reflux';\n\nimport HookStore from 'app/stores/hookStore';\nimport {Organization} from 'app/types';\nimport {HookName, Hooks} from 'app/types/hooks';\nimport withOrganization from 'app/utils/withOrganization';\nimport SettingsNavigation from 'app/views/settings/components/settingsNavigation';\nimport navigationConfiguration from 'app/views/settings/organization/navigationConfiguration';\nimport {NavigationSection} from 'app/views/settings/types';\n\ntype Props = {\n  organization: Organization;\n};\n\ntype State = {\n  hookConfigs: NavigationSection[];\n  hooks: React.ReactElement[];\n};\n\nconst OrganizationSettingsNavigation = createReactClass<Props, State>({\n  displayName: 'OrganizationSettingsNavigation',\n\n  /**\n   * TODO(epurkhiser): Becase the settings organization navigation hooks\n   * do not conform to a normal component style hook, and take a single\n   * parameter 'organization', we cannot use the `Hook` component here,\n   * and must resort to using the mixin style HookStore to retrieve hook data.\n   *\n   * We should update the hook interface for the two hooks used here\n   */\n  mixins: [Reflux.listenTo(HookStore, 'handleHooks') as any],\n\n  getInitialState() {\n    return this.getHooks();\n  },\n\n  componentDidMount() {\n    // eslint-disable-next-line react/no-did-mount-set-state\n    this.setState(this.getHooks());\n  },\n\n  getHooks() {\n    // Allow injection via getsentry et all\n    const {organization} = this.props as Props;\n\n    return {\n      hookConfigs: HookStore.get('settings:organization-navigation-config').map(cb =>\n        cb(organization)\n      ),\n      hooks: HookStore.get('settings:organization-navigation').map(cb =>\n        cb(organization)\n      ),\n    };\n  },\n\n  handleHooks(name: HookName, hooks: Hooks['settings:organization-navigation-config'][]) {\n    const org = this.props.organization;\n    if (name !== 'settings:organization-navigation-config') {\n      return;\n    }\n    this.setState({hookConfigs: hooks.map(cb => cb(org))});\n  },\n\n  render() {\n    const {hooks, hookConfigs} = this.state as State;\n    const {organization} = this.props as Props;\n    const access = new Set(organization.access);\n    const features = new Set(organization.features);\n\n    return (\n      <SettingsNavigation\n        navigationObjects={navigationConfiguration}\n        access={access}\n        features={features}\n        organization={organization}\n        hooks={hooks}\n        hookConfigs={hookConfigs}\n      />\n    );\n  },\n});\n\nexport default withOrganization(OrganizationSettingsNavigation);\n","import React from 'react';\nimport {RouteComponentProps} from 'react-router';\n\nimport SettingsLayout from 'app/views/settings/components/settingsLayout';\nimport OrganizationSettingsNavigation from 'app/views/settings/organization/organizationSettingsNavigation';\n\ntype Props = RouteComponentProps<{orgId: string}, {}> & {\n  children: React.ReactNode;\n};\n\nfunction OrganizationSettingsLayout(props: Props) {\n  return (\n    <SettingsLayout\n      {...props}\n      renderNavigation={() => <OrganizationSettingsNavigation />}\n    />\n  );\n}\n\nexport default OrganizationSettingsLayout;\n"],"sourceRoot":""}