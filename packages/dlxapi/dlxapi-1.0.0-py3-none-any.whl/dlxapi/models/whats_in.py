# coding: utf-8

"""
    Decision Lens API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from dlxapi.configuration import Configuration


class WhatsIn(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'project_summaries': 'list[ProjectSummary]',
        'portfolio_plans_with_projects': 'list[PortfolioPlansWithProjects]',
        'max_size': 'int',
        'max_limit': 'int',
        'offset': 'int',
        'href': 'str'
    }

    attribute_map = {
        'project_summaries': 'projectSummaries',
        'portfolio_plans_with_projects': 'portfolioPlansWithProjects',
        'max_size': 'maxSize',
        'max_limit': 'maxLimit',
        'offset': 'offset',
        'href': 'href'
    }

    def __init__(self, project_summaries=None, portfolio_plans_with_projects=None, max_size=None, max_limit=None, offset=None, href=None, _configuration=None):  # noqa: E501
        """WhatsIn - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._project_summaries = None
        self._portfolio_plans_with_projects = None
        self._max_size = None
        self._max_limit = None
        self._offset = None
        self._href = None
        self.discriminator = None

        if project_summaries is not None:
            self.project_summaries = project_summaries
        if portfolio_plans_with_projects is not None:
            self.portfolio_plans_with_projects = portfolio_plans_with_projects
        if max_size is not None:
            self.max_size = max_size
        if max_limit is not None:
            self.max_limit = max_limit
        if offset is not None:
            self.offset = offset
        if href is not None:
            self.href = href

    @property
    def project_summaries(self):
        """Gets the project_summaries of this WhatsIn.  # noqa: E501


        :return: The project_summaries of this WhatsIn.  # noqa: E501
        :rtype: list[ProjectSummary]
        """
        return self._project_summaries

    @project_summaries.setter
    def project_summaries(self, project_summaries):
        """Sets the project_summaries of this WhatsIn.


        :param project_summaries: The project_summaries of this WhatsIn.  # noqa: E501
        :type: list[ProjectSummary]
        """

        self._project_summaries = project_summaries

    @property
    def portfolio_plans_with_projects(self):
        """Gets the portfolio_plans_with_projects of this WhatsIn.  # noqa: E501


        :return: The portfolio_plans_with_projects of this WhatsIn.  # noqa: E501
        :rtype: list[PortfolioPlansWithProjects]
        """
        return self._portfolio_plans_with_projects

    @portfolio_plans_with_projects.setter
    def portfolio_plans_with_projects(self, portfolio_plans_with_projects):
        """Sets the portfolio_plans_with_projects of this WhatsIn.


        :param portfolio_plans_with_projects: The portfolio_plans_with_projects of this WhatsIn.  # noqa: E501
        :type: list[PortfolioPlansWithProjects]
        """

        self._portfolio_plans_with_projects = portfolio_plans_with_projects

    @property
    def max_size(self):
        """Gets the max_size of this WhatsIn.  # noqa: E501


        :return: The max_size of this WhatsIn.  # noqa: E501
        :rtype: int
        """
        return self._max_size

    @max_size.setter
    def max_size(self, max_size):
        """Sets the max_size of this WhatsIn.


        :param max_size: The max_size of this WhatsIn.  # noqa: E501
        :type: int
        """

        self._max_size = max_size

    @property
    def max_limit(self):
        """Gets the max_limit of this WhatsIn.  # noqa: E501


        :return: The max_limit of this WhatsIn.  # noqa: E501
        :rtype: int
        """
        return self._max_limit

    @max_limit.setter
    def max_limit(self, max_limit):
        """Sets the max_limit of this WhatsIn.


        :param max_limit: The max_limit of this WhatsIn.  # noqa: E501
        :type: int
        """

        self._max_limit = max_limit

    @property
    def offset(self):
        """Gets the offset of this WhatsIn.  # noqa: E501


        :return: The offset of this WhatsIn.  # noqa: E501
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this WhatsIn.


        :param offset: The offset of this WhatsIn.  # noqa: E501
        :type: int
        """

        self._offset = offset

    @property
    def href(self):
        """Gets the href of this WhatsIn.  # noqa: E501


        :return: The href of this WhatsIn.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this WhatsIn.


        :param href: The href of this WhatsIn.  # noqa: E501
        :type: str
        """

        self._href = href

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WhatsIn, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WhatsIn):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, WhatsIn):
            return True

        return self.to_dict() != other.to_dict()
