# coding: utf-8

"""
    Decision Lens API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from dlxapi.configuration import Configuration


class Recommendation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'RecommendationType',
        'field_values': 'FieldValues',
        'portfolio_plan_grades': 'PortfolioPlanGrades',
        'project': 'Project'
    }

    attribute_map = {
        'type': 'type',
        'field_values': 'fieldValues',
        'portfolio_plan_grades': 'portfolioPlanGrades',
        'project': 'project'
    }

    def __init__(self, type=None, field_values=None, portfolio_plan_grades=None, project=None, _configuration=None):  # noqa: E501
        """Recommendation - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._type = None
        self._field_values = None
        self._portfolio_plan_grades = None
        self._project = None
        self.discriminator = None

        if type is not None:
            self.type = type
        if field_values is not None:
            self.field_values = field_values
        if portfolio_plan_grades is not None:
            self.portfolio_plan_grades = portfolio_plan_grades
        if project is not None:
            self.project = project

    @property
    def type(self):
        """Gets the type of this Recommendation.  # noqa: E501


        :return: The type of this Recommendation.  # noqa: E501
        :rtype: RecommendationType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Recommendation.


        :param type: The type of this Recommendation.  # noqa: E501
        :type: RecommendationType
        """

        self._type = type

    @property
    def field_values(self):
        """Gets the field_values of this Recommendation.  # noqa: E501


        :return: The field_values of this Recommendation.  # noqa: E501
        :rtype: FieldValues
        """
        return self._field_values

    @field_values.setter
    def field_values(self, field_values):
        """Sets the field_values of this Recommendation.


        :param field_values: The field_values of this Recommendation.  # noqa: E501
        :type: FieldValues
        """

        self._field_values = field_values

    @property
    def portfolio_plan_grades(self):
        """Gets the portfolio_plan_grades of this Recommendation.  # noqa: E501


        :return: The portfolio_plan_grades of this Recommendation.  # noqa: E501
        :rtype: PortfolioPlanGrades
        """
        return self._portfolio_plan_grades

    @portfolio_plan_grades.setter
    def portfolio_plan_grades(self, portfolio_plan_grades):
        """Sets the portfolio_plan_grades of this Recommendation.


        :param portfolio_plan_grades: The portfolio_plan_grades of this Recommendation.  # noqa: E501
        :type: PortfolioPlanGrades
        """

        self._portfolio_plan_grades = portfolio_plan_grades

    @property
    def project(self):
        """Gets the project of this Recommendation.  # noqa: E501


        :return: The project of this Recommendation.  # noqa: E501
        :rtype: Project
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this Recommendation.


        :param project: The project of this Recommendation.  # noqa: E501
        :type: Project
        """

        self._project = project

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Recommendation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Recommendation):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Recommendation):
            return True

        return self.to_dict() != other.to_dict()
