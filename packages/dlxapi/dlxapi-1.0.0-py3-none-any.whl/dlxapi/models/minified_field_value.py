# coding: utf-8

"""
    Decision Lens API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from dlxapi.configuration import Configuration


class MinifiedFieldValue(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'v': 'str',
        'nv': 'float',
        'bv': 'bool',
        'yrs': 'dict(str, MinifiedYearlyFieldValue)',
        'mns': 'dict(str, float)',
        'vs': 'list[str]',
        'nvs': 'list[float]'
    }

    attribute_map = {
        'v': 'v',
        'nv': 'nv',
        'bv': 'bv',
        'yrs': 'yrs',
        'mns': 'mns',
        'vs': 'vs',
        'nvs': 'nvs'
    }

    def __init__(self, v=None, nv=None, bv=None, yrs=None, mns=None, vs=None, nvs=None, _configuration=None):  # noqa: E501
        """MinifiedFieldValue - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._v = None
        self._nv = None
        self._bv = None
        self._yrs = None
        self._mns = None
        self._vs = None
        self._nvs = None
        self.discriminator = None

        if v is not None:
            self.v = v
        if nv is not None:
            self.nv = nv
        if bv is not None:
            self.bv = bv
        if yrs is not None:
            self.yrs = yrs
        if mns is not None:
            self.mns = mns
        if vs is not None:
            self.vs = vs
        if nvs is not None:
            self.nvs = nvs

    @property
    def v(self):
        """Gets the v of this MinifiedFieldValue.  # noqa: E501

        Text value  # noqa: E501

        :return: The v of this MinifiedFieldValue.  # noqa: E501
        :rtype: str
        """
        return self._v

    @v.setter
    def v(self, v):
        """Sets the v of this MinifiedFieldValue.

        Text value  # noqa: E501

        :param v: The v of this MinifiedFieldValue.  # noqa: E501
        :type: str
        """

        self._v = v

    @property
    def nv(self):
        """Gets the nv of this MinifiedFieldValue.  # noqa: E501

        Numeric Value  # noqa: E501

        :return: The nv of this MinifiedFieldValue.  # noqa: E501
        :rtype: float
        """
        return self._nv

    @nv.setter
    def nv(self, nv):
        """Sets the nv of this MinifiedFieldValue.

        Numeric Value  # noqa: E501

        :param nv: The nv of this MinifiedFieldValue.  # noqa: E501
        :type: float
        """

        self._nv = nv

    @property
    def bv(self):
        """Gets the bv of this MinifiedFieldValue.  # noqa: E501

        Boolean Value  # noqa: E501

        :return: The bv of this MinifiedFieldValue.  # noqa: E501
        :rtype: bool
        """
        return self._bv

    @bv.setter
    def bv(self, bv):
        """Sets the bv of this MinifiedFieldValue.

        Boolean Value  # noqa: E501

        :param bv: The bv of this MinifiedFieldValue.  # noqa: E501
        :type: bool
        """

        self._bv = bv

    @property
    def yrs(self):
        """Gets the yrs of this MinifiedFieldValue.  # noqa: E501

        Yearly cost/allocate data  # noqa: E501

        :return: The yrs of this MinifiedFieldValue.  # noqa: E501
        :rtype: dict(str, MinifiedYearlyFieldValue)
        """
        return self._yrs

    @yrs.setter
    def yrs(self, yrs):
        """Sets the yrs of this MinifiedFieldValue.

        Yearly cost/allocate data  # noqa: E501

        :param yrs: The yrs of this MinifiedFieldValue.  # noqa: E501
        :type: dict(str, MinifiedYearlyFieldValue)
        """

        self._yrs = yrs

    @property
    def mns(self):
        """Gets the mns of this MinifiedFieldValue.  # noqa: E501

        Monthly cost/allocate data  # noqa: E501

        :return: The mns of this MinifiedFieldValue.  # noqa: E501
        :rtype: dict(str, float)
        """
        return self._mns

    @mns.setter
    def mns(self, mns):
        """Sets the mns of this MinifiedFieldValue.

        Monthly cost/allocate data  # noqa: E501

        :param mns: The mns of this MinifiedFieldValue.  # noqa: E501
        :type: dict(str, float)
        """

        self._mns = mns

    @property
    def vs(self):
        """Gets the vs of this MinifiedFieldValue.  # noqa: E501


        :return: The vs of this MinifiedFieldValue.  # noqa: E501
        :rtype: list[str]
        """
        return self._vs

    @vs.setter
    def vs(self, vs):
        """Sets the vs of this MinifiedFieldValue.


        :param vs: The vs of this MinifiedFieldValue.  # noqa: E501
        :type: list[str]
        """

        self._vs = vs

    @property
    def nvs(self):
        """Gets the nvs of this MinifiedFieldValue.  # noqa: E501


        :return: The nvs of this MinifiedFieldValue.  # noqa: E501
        :rtype: list[float]
        """
        return self._nvs

    @nvs.setter
    def nvs(self, nvs):
        """Sets the nvs of this MinifiedFieldValue.


        :param nvs: The nvs of this MinifiedFieldValue.  # noqa: E501
        :type: list[float]
        """

        self._nvs = nvs

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MinifiedFieldValue, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MinifiedFieldValue):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MinifiedFieldValue):
            return True

        return self.to_dict() != other.to_dict()
