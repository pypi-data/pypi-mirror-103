# coding: utf-8

"""
    Decision Lens API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from dlxapi.configuration import Configuration


class ExpandComponent(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'path': 'str',
        'match': 'str',
        'all_possible': 'bool',
        'unique': 'bool',
        'limit': 'int',
        'offset': 'int',
        'order_by': 'str'
    }

    attribute_map = {
        'path': 'path',
        'match': 'match',
        'all_possible': 'allPossible',
        'unique': 'unique',
        'limit': 'limit',
        'offset': 'offset',
        'order_by': 'orderBy'
    }

    def __init__(self, path=None, match=None, all_possible=None, unique=None, limit=None, offset=None, order_by=None, _configuration=None):  # noqa: E501
        """ExpandComponent - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._path = None
        self._match = None
        self._all_possible = None
        self._unique = None
        self._limit = None
        self._offset = None
        self._order_by = None
        self.discriminator = None

        if path is not None:
            self.path = path
        if match is not None:
            self.match = match
        if all_possible is not None:
            self.all_possible = all_possible
        if unique is not None:
            self.unique = unique
        if limit is not None:
            self.limit = limit
        if offset is not None:
            self.offset = offset
        if order_by is not None:
            self.order_by = order_by

    @property
    def path(self):
        """Gets the path of this ExpandComponent.  # noqa: E501

        path to the collection. example - items.fieldValues  # noqa: E501

        :return: The path of this ExpandComponent.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this ExpandComponent.

        path to the collection. example - items.fieldValues  # noqa: E501

        :param path: The path of this ExpandComponent.  # noqa: E501
        :type: str
        """

        self._path = path

    @property
    def match(self):
        """Gets the match of this ExpandComponent.  # noqa: E501

        filter the collection. example - \"field.id:123-12321-321312-e3e21w\"  # noqa: E501

        :return: The match of this ExpandComponent.  # noqa: E501
        :rtype: str
        """
        return self._match

    @match.setter
    def match(self, match):
        """Sets the match of this ExpandComponent.

        filter the collection. example - \"field.id:123-12321-321312-e3e21w\"  # noqa: E501

        :param match: The match of this ExpandComponent.  # noqa: E501
        :type: str
        """

        self._match = match

    @property
    def all_possible(self):
        """Gets the all_possible of this ExpandComponent.  # noqa: E501

        return all possible values in the collection even if they are not assigned to projects currently like all STATUS values.  # noqa: E501

        :return: The all_possible of this ExpandComponent.  # noqa: E501
        :rtype: bool
        """
        return self._all_possible

    @all_possible.setter
    def all_possible(self, all_possible):
        """Sets the all_possible of this ExpandComponent.

        return all possible values in the collection even if they are not assigned to projects currently like all STATUS values.  # noqa: E501

        :param all_possible: The all_possible of this ExpandComponent.  # noqa: E501
        :type: bool
        """

        self._all_possible = all_possible

    @property
    def unique(self):
        """Gets the unique of this ExpandComponent.  # noqa: E501

        return only unique values in the collection  # noqa: E501

        :return: The unique of this ExpandComponent.  # noqa: E501
        :rtype: bool
        """
        return self._unique

    @unique.setter
    def unique(self, unique):
        """Sets the unique of this ExpandComponent.

        return only unique values in the collection  # noqa: E501

        :param unique: The unique of this ExpandComponent.  # noqa: E501
        :type: bool
        """

        self._unique = unique

    @property
    def limit(self):
        """Gets the limit of this ExpandComponent.  # noqa: E501

        pagination - limit  # noqa: E501

        :return: The limit of this ExpandComponent.  # noqa: E501
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this ExpandComponent.

        pagination - limit  # noqa: E501

        :param limit: The limit of this ExpandComponent.  # noqa: E501
        :type: int
        """

        self._limit = limit

    @property
    def offset(self):
        """Gets the offset of this ExpandComponent.  # noqa: E501

        pagination - offset  # noqa: E501

        :return: The offset of this ExpandComponent.  # noqa: E501
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this ExpandComponent.

        pagination - offset  # noqa: E501

        :param offset: The offset of this ExpandComponent.  # noqa: E501
        :type: int
        """

        self._offset = offset

    @property
    def order_by(self):
        """Gets the order_by of this ExpandComponent.  # noqa: E501

        order the values returned in the collection  # noqa: E501

        :return: The order_by of this ExpandComponent.  # noqa: E501
        :rtype: str
        """
        return self._order_by

    @order_by.setter
    def order_by(self, order_by):
        """Sets the order_by of this ExpandComponent.

        order the values returned in the collection  # noqa: E501

        :param order_by: The order_by of this ExpandComponent.  # noqa: E501
        :type: str
        """

        self._order_by = order_by

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ExpandComponent, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExpandComponent):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ExpandComponent):
            return True

        return self.to_dict() != other.to_dict()
