# coding: utf-8

"""
    Decision Lens API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from dlxapi.configuration import Configuration


class BudgetAllocations(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'portfolio_plan': 'PortfolioPlan',
        'time_period_type': 'TimePeriodType',
        'yearly_start_time': 'int',
        'monthly_start_time': 'int',
        'items': 'list[BudgetAllocation]'
    }

    attribute_map = {
        'portfolio_plan': 'portfolioPlan',
        'time_period_type': 'timePeriodType',
        'yearly_start_time': 'yearlyStartTime',
        'monthly_start_time': 'monthlyStartTime',
        'items': 'items'
    }

    def __init__(self, portfolio_plan=None, time_period_type=None, yearly_start_time=None, monthly_start_time=None, items=None, _configuration=None):  # noqa: E501
        """BudgetAllocations - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._portfolio_plan = None
        self._time_period_type = None
        self._yearly_start_time = None
        self._monthly_start_time = None
        self._items = None
        self.discriminator = None

        if portfolio_plan is not None:
            self.portfolio_plan = portfolio_plan
        if time_period_type is not None:
            self.time_period_type = time_period_type
        if yearly_start_time is not None:
            self.yearly_start_time = yearly_start_time
        if monthly_start_time is not None:
            self.monthly_start_time = monthly_start_time
        if items is not None:
            self.items = items

    @property
    def portfolio_plan(self):
        """Gets the portfolio_plan of this BudgetAllocations.  # noqa: E501


        :return: The portfolio_plan of this BudgetAllocations.  # noqa: E501
        :rtype: PortfolioPlan
        """
        return self._portfolio_plan

    @portfolio_plan.setter
    def portfolio_plan(self, portfolio_plan):
        """Sets the portfolio_plan of this BudgetAllocations.


        :param portfolio_plan: The portfolio_plan of this BudgetAllocations.  # noqa: E501
        :type: PortfolioPlan
        """

        self._portfolio_plan = portfolio_plan

    @property
    def time_period_type(self):
        """Gets the time_period_type of this BudgetAllocations.  # noqa: E501


        :return: The time_period_type of this BudgetAllocations.  # noqa: E501
        :rtype: TimePeriodType
        """
        return self._time_period_type

    @time_period_type.setter
    def time_period_type(self, time_period_type):
        """Sets the time_period_type of this BudgetAllocations.


        :param time_period_type: The time_period_type of this BudgetAllocations.  # noqa: E501
        :type: TimePeriodType
        """

        self._time_period_type = time_period_type

    @property
    def yearly_start_time(self):
        """Gets the yearly_start_time of this BudgetAllocations.  # noqa: E501


        :return: The yearly_start_time of this BudgetAllocations.  # noqa: E501
        :rtype: int
        """
        return self._yearly_start_time

    @yearly_start_time.setter
    def yearly_start_time(self, yearly_start_time):
        """Sets the yearly_start_time of this BudgetAllocations.


        :param yearly_start_time: The yearly_start_time of this BudgetAllocations.  # noqa: E501
        :type: int
        """

        self._yearly_start_time = yearly_start_time

    @property
    def monthly_start_time(self):
        """Gets the monthly_start_time of this BudgetAllocations.  # noqa: E501


        :return: The monthly_start_time of this BudgetAllocations.  # noqa: E501
        :rtype: int
        """
        return self._monthly_start_time

    @monthly_start_time.setter
    def monthly_start_time(self, monthly_start_time):
        """Sets the monthly_start_time of this BudgetAllocations.


        :param monthly_start_time: The monthly_start_time of this BudgetAllocations.  # noqa: E501
        :type: int
        """

        self._monthly_start_time = monthly_start_time

    @property
    def items(self):
        """Gets the items of this BudgetAllocations.  # noqa: E501


        :return: The items of this BudgetAllocations.  # noqa: E501
        :rtype: list[BudgetAllocation]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this BudgetAllocations.


        :param items: The items of this BudgetAllocations.  # noqa: E501
        :type: list[BudgetAllocation]
        """

        self._items = items

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BudgetAllocations, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BudgetAllocations):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BudgetAllocations):
            return True

        return self.to_dict() != other.to_dict()
