# coding: utf-8

"""
    Decision Lens API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from dlxapi.configuration import Configuration


class ProjectCreatedEvent(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'portfolio_id': 'str',
        'contributing_user_ids': 'list[str]',
        'name': 'str',
        'is_draft': 'bool',
        'id': 'str',
        'position': 'int',
        'field_values': 'list[ProjectFieldValue]',
        'user_id': 'str',
        'portfolio_plan': 'PortfolioPlan',
        'is_from_import': 'bool'
    }

    attribute_map = {
        'portfolio_id': 'portfolioId',
        'contributing_user_ids': 'contributingUserIds',
        'name': 'name',
        'is_draft': 'isDraft',
        'id': 'id',
        'position': 'position',
        'field_values': 'fieldValues',
        'user_id': 'userId',
        'portfolio_plan': 'portfolioPlan',
        'is_from_import': 'isFromImport'
    }

    def __init__(self, portfolio_id=None, contributing_user_ids=None, name=None, is_draft=None, id=None, position=None, field_values=None, user_id=None, portfolio_plan=None, is_from_import=None, _configuration=None):  # noqa: E501
        """ProjectCreatedEvent - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._portfolio_id = None
        self._contributing_user_ids = None
        self._name = None
        self._is_draft = None
        self._id = None
        self._position = None
        self._field_values = None
        self._user_id = None
        self._portfolio_plan = None
        self._is_from_import = None
        self.discriminator = None

        if portfolio_id is not None:
            self.portfolio_id = portfolio_id
        if contributing_user_ids is not None:
            self.contributing_user_ids = contributing_user_ids
        if name is not None:
            self.name = name
        if is_draft is not None:
            self.is_draft = is_draft
        if id is not None:
            self.id = id
        if position is not None:
            self.position = position
        if field_values is not None:
            self.field_values = field_values
        if user_id is not None:
            self.user_id = user_id
        if portfolio_plan is not None:
            self.portfolio_plan = portfolio_plan
        if is_from_import is not None:
            self.is_from_import = is_from_import

    @property
    def portfolio_id(self):
        """Gets the portfolio_id of this ProjectCreatedEvent.  # noqa: E501


        :return: The portfolio_id of this ProjectCreatedEvent.  # noqa: E501
        :rtype: str
        """
        return self._portfolio_id

    @portfolio_id.setter
    def portfolio_id(self, portfolio_id):
        """Sets the portfolio_id of this ProjectCreatedEvent.


        :param portfolio_id: The portfolio_id of this ProjectCreatedEvent.  # noqa: E501
        :type: str
        """

        self._portfolio_id = portfolio_id

    @property
    def contributing_user_ids(self):
        """Gets the contributing_user_ids of this ProjectCreatedEvent.  # noqa: E501


        :return: The contributing_user_ids of this ProjectCreatedEvent.  # noqa: E501
        :rtype: list[str]
        """
        return self._contributing_user_ids

    @contributing_user_ids.setter
    def contributing_user_ids(self, contributing_user_ids):
        """Sets the contributing_user_ids of this ProjectCreatedEvent.


        :param contributing_user_ids: The contributing_user_ids of this ProjectCreatedEvent.  # noqa: E501
        :type: list[str]
        """

        self._contributing_user_ids = contributing_user_ids

    @property
    def name(self):
        """Gets the name of this ProjectCreatedEvent.  # noqa: E501


        :return: The name of this ProjectCreatedEvent.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ProjectCreatedEvent.


        :param name: The name of this ProjectCreatedEvent.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def is_draft(self):
        """Gets the is_draft of this ProjectCreatedEvent.  # noqa: E501


        :return: The is_draft of this ProjectCreatedEvent.  # noqa: E501
        :rtype: bool
        """
        return self._is_draft

    @is_draft.setter
    def is_draft(self, is_draft):
        """Sets the is_draft of this ProjectCreatedEvent.


        :param is_draft: The is_draft of this ProjectCreatedEvent.  # noqa: E501
        :type: bool
        """

        self._is_draft = is_draft

    @property
    def id(self):
        """Gets the id of this ProjectCreatedEvent.  # noqa: E501


        :return: The id of this ProjectCreatedEvent.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ProjectCreatedEvent.


        :param id: The id of this ProjectCreatedEvent.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def position(self):
        """Gets the position of this ProjectCreatedEvent.  # noqa: E501


        :return: The position of this ProjectCreatedEvent.  # noqa: E501
        :rtype: int
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this ProjectCreatedEvent.


        :param position: The position of this ProjectCreatedEvent.  # noqa: E501
        :type: int
        """

        self._position = position

    @property
    def field_values(self):
        """Gets the field_values of this ProjectCreatedEvent.  # noqa: E501


        :return: The field_values of this ProjectCreatedEvent.  # noqa: E501
        :rtype: list[ProjectFieldValue]
        """
        return self._field_values

    @field_values.setter
    def field_values(self, field_values):
        """Sets the field_values of this ProjectCreatedEvent.


        :param field_values: The field_values of this ProjectCreatedEvent.  # noqa: E501
        :type: list[ProjectFieldValue]
        """

        self._field_values = field_values

    @property
    def user_id(self):
        """Gets the user_id of this ProjectCreatedEvent.  # noqa: E501


        :return: The user_id of this ProjectCreatedEvent.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this ProjectCreatedEvent.


        :param user_id: The user_id of this ProjectCreatedEvent.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def portfolio_plan(self):
        """Gets the portfolio_plan of this ProjectCreatedEvent.  # noqa: E501


        :return: The portfolio_plan of this ProjectCreatedEvent.  # noqa: E501
        :rtype: PortfolioPlan
        """
        return self._portfolio_plan

    @portfolio_plan.setter
    def portfolio_plan(self, portfolio_plan):
        """Sets the portfolio_plan of this ProjectCreatedEvent.


        :param portfolio_plan: The portfolio_plan of this ProjectCreatedEvent.  # noqa: E501
        :type: PortfolioPlan
        """

        self._portfolio_plan = portfolio_plan

    @property
    def is_from_import(self):
        """Gets the is_from_import of this ProjectCreatedEvent.  # noqa: E501


        :return: The is_from_import of this ProjectCreatedEvent.  # noqa: E501
        :rtype: bool
        """
        return self._is_from_import

    @is_from_import.setter
    def is_from_import(self, is_from_import):
        """Sets the is_from_import of this ProjectCreatedEvent.


        :param is_from_import: The is_from_import of this ProjectCreatedEvent.  # noqa: E501
        :type: bool
        """

        self._is_from_import = is_from_import

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProjectCreatedEvent, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProjectCreatedEvent):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ProjectCreatedEvent):
            return True

        return self.to_dict() != other.to_dict()
