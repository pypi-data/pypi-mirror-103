# coding: utf-8

"""
    Decision Lens API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from dlxapi.configuration import Configuration


class DlcPortfolio(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'url': 'str',
        'task_url': 'str',
        'last_updated_at': 'int',
        'last_fetched_at': 'int',
        'statuses': 'list[str]',
        'default_priority_scenario': 'str',
        'priority_scenarios': 'list[str]'
    }

    attribute_map = {
        'id': 'id',
        'url': 'url',
        'task_url': 'taskUrl',
        'last_updated_at': 'lastUpdatedAt',
        'last_fetched_at': 'lastFetchedAt',
        'statuses': 'statuses',
        'default_priority_scenario': 'defaultPriorityScenario',
        'priority_scenarios': 'priorityScenarios'
    }

    def __init__(self, id=None, url=None, task_url=None, last_updated_at=None, last_fetched_at=None, statuses=None, default_priority_scenario=None, priority_scenarios=None, _configuration=None):  # noqa: E501
        """DlcPortfolio - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._url = None
        self._task_url = None
        self._last_updated_at = None
        self._last_fetched_at = None
        self._statuses = None
        self._default_priority_scenario = None
        self._priority_scenarios = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if url is not None:
            self.url = url
        if task_url is not None:
            self.task_url = task_url
        if last_updated_at is not None:
            self.last_updated_at = last_updated_at
        if last_fetched_at is not None:
            self.last_fetched_at = last_fetched_at
        if statuses is not None:
            self.statuses = statuses
        if default_priority_scenario is not None:
            self.default_priority_scenario = default_priority_scenario
        if priority_scenarios is not None:
            self.priority_scenarios = priority_scenarios

    @property
    def id(self):
        """Gets the id of this DlcPortfolio.  # noqa: E501


        :return: The id of this DlcPortfolio.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DlcPortfolio.


        :param id: The id of this DlcPortfolio.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def url(self):
        """Gets the url of this DlcPortfolio.  # noqa: E501


        :return: The url of this DlcPortfolio.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this DlcPortfolio.


        :param url: The url of this DlcPortfolio.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def task_url(self):
        """Gets the task_url of this DlcPortfolio.  # noqa: E501


        :return: The task_url of this DlcPortfolio.  # noqa: E501
        :rtype: str
        """
        return self._task_url

    @task_url.setter
    def task_url(self, task_url):
        """Sets the task_url of this DlcPortfolio.


        :param task_url: The task_url of this DlcPortfolio.  # noqa: E501
        :type: str
        """

        self._task_url = task_url

    @property
    def last_updated_at(self):
        """Gets the last_updated_at of this DlcPortfolio.  # noqa: E501


        :return: The last_updated_at of this DlcPortfolio.  # noqa: E501
        :rtype: int
        """
        return self._last_updated_at

    @last_updated_at.setter
    def last_updated_at(self, last_updated_at):
        """Sets the last_updated_at of this DlcPortfolio.


        :param last_updated_at: The last_updated_at of this DlcPortfolio.  # noqa: E501
        :type: int
        """

        self._last_updated_at = last_updated_at

    @property
    def last_fetched_at(self):
        """Gets the last_fetched_at of this DlcPortfolio.  # noqa: E501


        :return: The last_fetched_at of this DlcPortfolio.  # noqa: E501
        :rtype: int
        """
        return self._last_fetched_at

    @last_fetched_at.setter
    def last_fetched_at(self, last_fetched_at):
        """Sets the last_fetched_at of this DlcPortfolio.


        :param last_fetched_at: The last_fetched_at of this DlcPortfolio.  # noqa: E501
        :type: int
        """

        self._last_fetched_at = last_fetched_at

    @property
    def statuses(self):
        """Gets the statuses of this DlcPortfolio.  # noqa: E501


        :return: The statuses of this DlcPortfolio.  # noqa: E501
        :rtype: list[str]
        """
        return self._statuses

    @statuses.setter
    def statuses(self, statuses):
        """Sets the statuses of this DlcPortfolio.


        :param statuses: The statuses of this DlcPortfolio.  # noqa: E501
        :type: list[str]
        """

        self._statuses = statuses

    @property
    def default_priority_scenario(self):
        """Gets the default_priority_scenario of this DlcPortfolio.  # noqa: E501


        :return: The default_priority_scenario of this DlcPortfolio.  # noqa: E501
        :rtype: str
        """
        return self._default_priority_scenario

    @default_priority_scenario.setter
    def default_priority_scenario(self, default_priority_scenario):
        """Sets the default_priority_scenario of this DlcPortfolio.


        :param default_priority_scenario: The default_priority_scenario of this DlcPortfolio.  # noqa: E501
        :type: str
        """

        self._default_priority_scenario = default_priority_scenario

    @property
    def priority_scenarios(self):
        """Gets the priority_scenarios of this DlcPortfolio.  # noqa: E501


        :return: The priority_scenarios of this DlcPortfolio.  # noqa: E501
        :rtype: list[str]
        """
        return self._priority_scenarios

    @priority_scenarios.setter
    def priority_scenarios(self, priority_scenarios):
        """Sets the priority_scenarios of this DlcPortfolio.


        :param priority_scenarios: The priority_scenarios of this DlcPortfolio.  # noqa: E501
        :type: list[str]
        """

        self._priority_scenarios = priority_scenarios

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DlcPortfolio, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DlcPortfolio):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DlcPortfolio):
            return True

        return self.to_dict() != other.to_dict()
