# coding: utf-8

"""
    Decision Lens API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from dlxapi.configuration import Configuration


class BudgetAllocation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'resource_pool_name': 'str',
        'resource_pool_id': 'str',
        'yearly_budgets': 'list[float]',
        'yearly_allocations': 'list[float]',
        'yearly_time_periods': 'list[int]',
        'yearly_constrained_allocations': 'list[float]',
        'monthly_allocations': 'list[float]',
        'monthly_budgets': 'list[float]',
        'monthly_time_periods': 'list[int]',
        'monthly_constrained_allocations': 'list[float]'
    }

    attribute_map = {
        'resource_pool_name': 'resourcePoolName',
        'resource_pool_id': 'resourcePoolId',
        'yearly_budgets': 'yearlyBudgets',
        'yearly_allocations': 'yearlyAllocations',
        'yearly_time_periods': 'yearlyTimePeriods',
        'yearly_constrained_allocations': 'yearlyConstrainedAllocations',
        'monthly_allocations': 'monthlyAllocations',
        'monthly_budgets': 'monthlyBudgets',
        'monthly_time_periods': 'monthlyTimePeriods',
        'monthly_constrained_allocations': 'monthlyConstrainedAllocations'
    }

    def __init__(self, resource_pool_name=None, resource_pool_id=None, yearly_budgets=None, yearly_allocations=None, yearly_time_periods=None, yearly_constrained_allocations=None, monthly_allocations=None, monthly_budgets=None, monthly_time_periods=None, monthly_constrained_allocations=None, _configuration=None):  # noqa: E501
        """BudgetAllocation - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._resource_pool_name = None
        self._resource_pool_id = None
        self._yearly_budgets = None
        self._yearly_allocations = None
        self._yearly_time_periods = None
        self._yearly_constrained_allocations = None
        self._monthly_allocations = None
        self._monthly_budgets = None
        self._monthly_time_periods = None
        self._monthly_constrained_allocations = None
        self.discriminator = None

        if resource_pool_name is not None:
            self.resource_pool_name = resource_pool_name
        if resource_pool_id is not None:
            self.resource_pool_id = resource_pool_id
        if yearly_budgets is not None:
            self.yearly_budgets = yearly_budgets
        if yearly_allocations is not None:
            self.yearly_allocations = yearly_allocations
        if yearly_time_periods is not None:
            self.yearly_time_periods = yearly_time_periods
        if yearly_constrained_allocations is not None:
            self.yearly_constrained_allocations = yearly_constrained_allocations
        if monthly_allocations is not None:
            self.monthly_allocations = monthly_allocations
        if monthly_budgets is not None:
            self.monthly_budgets = monthly_budgets
        if monthly_time_periods is not None:
            self.monthly_time_periods = monthly_time_periods
        if monthly_constrained_allocations is not None:
            self.monthly_constrained_allocations = monthly_constrained_allocations

    @property
    def resource_pool_name(self):
        """Gets the resource_pool_name of this BudgetAllocation.  # noqa: E501


        :return: The resource_pool_name of this BudgetAllocation.  # noqa: E501
        :rtype: str
        """
        return self._resource_pool_name

    @resource_pool_name.setter
    def resource_pool_name(self, resource_pool_name):
        """Sets the resource_pool_name of this BudgetAllocation.


        :param resource_pool_name: The resource_pool_name of this BudgetAllocation.  # noqa: E501
        :type: str
        """

        self._resource_pool_name = resource_pool_name

    @property
    def resource_pool_id(self):
        """Gets the resource_pool_id of this BudgetAllocation.  # noqa: E501


        :return: The resource_pool_id of this BudgetAllocation.  # noqa: E501
        :rtype: str
        """
        return self._resource_pool_id

    @resource_pool_id.setter
    def resource_pool_id(self, resource_pool_id):
        """Sets the resource_pool_id of this BudgetAllocation.


        :param resource_pool_id: The resource_pool_id of this BudgetAllocation.  # noqa: E501
        :type: str
        """

        self._resource_pool_id = resource_pool_id

    @property
    def yearly_budgets(self):
        """Gets the yearly_budgets of this BudgetAllocation.  # noqa: E501


        :return: The yearly_budgets of this BudgetAllocation.  # noqa: E501
        :rtype: list[float]
        """
        return self._yearly_budgets

    @yearly_budgets.setter
    def yearly_budgets(self, yearly_budgets):
        """Sets the yearly_budgets of this BudgetAllocation.


        :param yearly_budgets: The yearly_budgets of this BudgetAllocation.  # noqa: E501
        :type: list[float]
        """

        self._yearly_budgets = yearly_budgets

    @property
    def yearly_allocations(self):
        """Gets the yearly_allocations of this BudgetAllocation.  # noqa: E501


        :return: The yearly_allocations of this BudgetAllocation.  # noqa: E501
        :rtype: list[float]
        """
        return self._yearly_allocations

    @yearly_allocations.setter
    def yearly_allocations(self, yearly_allocations):
        """Sets the yearly_allocations of this BudgetAllocation.


        :param yearly_allocations: The yearly_allocations of this BudgetAllocation.  # noqa: E501
        :type: list[float]
        """

        self._yearly_allocations = yearly_allocations

    @property
    def yearly_time_periods(self):
        """Gets the yearly_time_periods of this BudgetAllocation.  # noqa: E501


        :return: The yearly_time_periods of this BudgetAllocation.  # noqa: E501
        :rtype: list[int]
        """
        return self._yearly_time_periods

    @yearly_time_periods.setter
    def yearly_time_periods(self, yearly_time_periods):
        """Sets the yearly_time_periods of this BudgetAllocation.


        :param yearly_time_periods: The yearly_time_periods of this BudgetAllocation.  # noqa: E501
        :type: list[int]
        """

        self._yearly_time_periods = yearly_time_periods

    @property
    def yearly_constrained_allocations(self):
        """Gets the yearly_constrained_allocations of this BudgetAllocation.  # noqa: E501


        :return: The yearly_constrained_allocations of this BudgetAllocation.  # noqa: E501
        :rtype: list[float]
        """
        return self._yearly_constrained_allocations

    @yearly_constrained_allocations.setter
    def yearly_constrained_allocations(self, yearly_constrained_allocations):
        """Sets the yearly_constrained_allocations of this BudgetAllocation.


        :param yearly_constrained_allocations: The yearly_constrained_allocations of this BudgetAllocation.  # noqa: E501
        :type: list[float]
        """

        self._yearly_constrained_allocations = yearly_constrained_allocations

    @property
    def monthly_allocations(self):
        """Gets the monthly_allocations of this BudgetAllocation.  # noqa: E501


        :return: The monthly_allocations of this BudgetAllocation.  # noqa: E501
        :rtype: list[float]
        """
        return self._monthly_allocations

    @monthly_allocations.setter
    def monthly_allocations(self, monthly_allocations):
        """Sets the monthly_allocations of this BudgetAllocation.


        :param monthly_allocations: The monthly_allocations of this BudgetAllocation.  # noqa: E501
        :type: list[float]
        """

        self._monthly_allocations = monthly_allocations

    @property
    def monthly_budgets(self):
        """Gets the monthly_budgets of this BudgetAllocation.  # noqa: E501


        :return: The monthly_budgets of this BudgetAllocation.  # noqa: E501
        :rtype: list[float]
        """
        return self._monthly_budgets

    @monthly_budgets.setter
    def monthly_budgets(self, monthly_budgets):
        """Sets the monthly_budgets of this BudgetAllocation.


        :param monthly_budgets: The monthly_budgets of this BudgetAllocation.  # noqa: E501
        :type: list[float]
        """

        self._monthly_budgets = monthly_budgets

    @property
    def monthly_time_periods(self):
        """Gets the monthly_time_periods of this BudgetAllocation.  # noqa: E501


        :return: The monthly_time_periods of this BudgetAllocation.  # noqa: E501
        :rtype: list[int]
        """
        return self._monthly_time_periods

    @monthly_time_periods.setter
    def monthly_time_periods(self, monthly_time_periods):
        """Sets the monthly_time_periods of this BudgetAllocation.


        :param monthly_time_periods: The monthly_time_periods of this BudgetAllocation.  # noqa: E501
        :type: list[int]
        """

        self._monthly_time_periods = monthly_time_periods

    @property
    def monthly_constrained_allocations(self):
        """Gets the monthly_constrained_allocations of this BudgetAllocation.  # noqa: E501


        :return: The monthly_constrained_allocations of this BudgetAllocation.  # noqa: E501
        :rtype: list[float]
        """
        return self._monthly_constrained_allocations

    @monthly_constrained_allocations.setter
    def monthly_constrained_allocations(self, monthly_constrained_allocations):
        """Sets the monthly_constrained_allocations of this BudgetAllocation.


        :param monthly_constrained_allocations: The monthly_constrained_allocations of this BudgetAllocation.  # noqa: E501
        :type: list[float]
        """

        self._monthly_constrained_allocations = monthly_constrained_allocations

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BudgetAllocation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BudgetAllocation):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BudgetAllocation):
            return True

        return self.to_dict() != other.to_dict()
