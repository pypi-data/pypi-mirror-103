# coding: utf-8

"""
    Decision Lens API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from dlxapi.configuration import Configuration


class Portfolio(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'is_archived': 'bool',
        'baseline_portfolio_plan_user': 'PortfolioPlanUser',
        'fields': 'Fields',
        'projects': 'Projects',
        'portfolio_plans': 'PortfolioPlans',
        'portfolio_plan_users': 'PortfolioPlanUsers',
        'attributes': 'Attributes',
        'is_combined': 'bool',
        'user_registration_token': 'str',
        'sub_portfolios': 'list[Portfolio]',
        'combined_portfolios': 'list[Portfolio]',
        'resource_pools': 'ResourcePools',
        'total_budget': 'float',
        'new_notifications_count': 'int',
        'custom_names': 'CustomNames'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'is_archived': 'isArchived',
        'baseline_portfolio_plan_user': 'baselinePortfolioPlanUser',
        'fields': 'fields',
        'projects': 'projects',
        'portfolio_plans': 'portfolioPlans',
        'portfolio_plan_users': 'portfolioPlanUsers',
        'attributes': 'attributes',
        'is_combined': 'isCombined',
        'user_registration_token': 'userRegistrationToken',
        'sub_portfolios': 'subPortfolios',
        'combined_portfolios': 'combinedPortfolios',
        'resource_pools': 'resourcePools',
        'total_budget': 'totalBudget',
        'new_notifications_count': 'newNotificationsCount',
        'custom_names': 'customNames'
    }

    def __init__(self, name=None, description=None, is_archived=None, baseline_portfolio_plan_user=None, fields=None, projects=None, portfolio_plans=None, portfolio_plan_users=None, attributes=None, is_combined=None, user_registration_token=None, sub_portfolios=None, combined_portfolios=None, resource_pools=None, total_budget=0.0, new_notifications_count=None, custom_names=None, _configuration=None):  # noqa: E501
        """Portfolio - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._name = None
        self._description = None
        self._is_archived = None
        self._baseline_portfolio_plan_user = None
        self._fields = None
        self._projects = None
        self._portfolio_plans = None
        self._portfolio_plan_users = None
        self._attributes = None
        self._is_combined = None
        self._user_registration_token = None
        self._sub_portfolios = None
        self._combined_portfolios = None
        self._resource_pools = None
        self._total_budget = None
        self._new_notifications_count = None
        self._custom_names = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if is_archived is not None:
            self.is_archived = is_archived
        if baseline_portfolio_plan_user is not None:
            self.baseline_portfolio_plan_user = baseline_portfolio_plan_user
        if fields is not None:
            self.fields = fields
        if projects is not None:
            self.projects = projects
        if portfolio_plans is not None:
            self.portfolio_plans = portfolio_plans
        if portfolio_plan_users is not None:
            self.portfolio_plan_users = portfolio_plan_users
        if attributes is not None:
            self.attributes = attributes
        if is_combined is not None:
            self.is_combined = is_combined
        if user_registration_token is not None:
            self.user_registration_token = user_registration_token
        if sub_portfolios is not None:
            self.sub_portfolios = sub_portfolios
        if combined_portfolios is not None:
            self.combined_portfolios = combined_portfolios
        if resource_pools is not None:
            self.resource_pools = resource_pools
        if total_budget is not None:
            self.total_budget = total_budget
        if new_notifications_count is not None:
            self.new_notifications_count = new_notifications_count
        if custom_names is not None:
            self.custom_names = custom_names

    @property
    def name(self):
        """Gets the name of this Portfolio.  # noqa: E501


        :return: The name of this Portfolio.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Portfolio.


        :param name: The name of this Portfolio.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this Portfolio.  # noqa: E501


        :return: The description of this Portfolio.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Portfolio.


        :param description: The description of this Portfolio.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def is_archived(self):
        """Gets the is_archived of this Portfolio.  # noqa: E501


        :return: The is_archived of this Portfolio.  # noqa: E501
        :rtype: bool
        """
        return self._is_archived

    @is_archived.setter
    def is_archived(self, is_archived):
        """Sets the is_archived of this Portfolio.


        :param is_archived: The is_archived of this Portfolio.  # noqa: E501
        :type: bool
        """

        self._is_archived = is_archived

    @property
    def baseline_portfolio_plan_user(self):
        """Gets the baseline_portfolio_plan_user of this Portfolio.  # noqa: E501


        :return: The baseline_portfolio_plan_user of this Portfolio.  # noqa: E501
        :rtype: PortfolioPlanUser
        """
        return self._baseline_portfolio_plan_user

    @baseline_portfolio_plan_user.setter
    def baseline_portfolio_plan_user(self, baseline_portfolio_plan_user):
        """Sets the baseline_portfolio_plan_user of this Portfolio.


        :param baseline_portfolio_plan_user: The baseline_portfolio_plan_user of this Portfolio.  # noqa: E501
        :type: PortfolioPlanUser
        """

        self._baseline_portfolio_plan_user = baseline_portfolio_plan_user

    @property
    def fields(self):
        """Gets the fields of this Portfolio.  # noqa: E501


        :return: The fields of this Portfolio.  # noqa: E501
        :rtype: Fields
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """Sets the fields of this Portfolio.


        :param fields: The fields of this Portfolio.  # noqa: E501
        :type: Fields
        """

        self._fields = fields

    @property
    def projects(self):
        """Gets the projects of this Portfolio.  # noqa: E501


        :return: The projects of this Portfolio.  # noqa: E501
        :rtype: Projects
        """
        return self._projects

    @projects.setter
    def projects(self, projects):
        """Sets the projects of this Portfolio.


        :param projects: The projects of this Portfolio.  # noqa: E501
        :type: Projects
        """

        self._projects = projects

    @property
    def portfolio_plans(self):
        """Gets the portfolio_plans of this Portfolio.  # noqa: E501


        :return: The portfolio_plans of this Portfolio.  # noqa: E501
        :rtype: PortfolioPlans
        """
        return self._portfolio_plans

    @portfolio_plans.setter
    def portfolio_plans(self, portfolio_plans):
        """Sets the portfolio_plans of this Portfolio.


        :param portfolio_plans: The portfolio_plans of this Portfolio.  # noqa: E501
        :type: PortfolioPlans
        """

        self._portfolio_plans = portfolio_plans

    @property
    def portfolio_plan_users(self):
        """Gets the portfolio_plan_users of this Portfolio.  # noqa: E501


        :return: The portfolio_plan_users of this Portfolio.  # noqa: E501
        :rtype: PortfolioPlanUsers
        """
        return self._portfolio_plan_users

    @portfolio_plan_users.setter
    def portfolio_plan_users(self, portfolio_plan_users):
        """Sets the portfolio_plan_users of this Portfolio.


        :param portfolio_plan_users: The portfolio_plan_users of this Portfolio.  # noqa: E501
        :type: PortfolioPlanUsers
        """

        self._portfolio_plan_users = portfolio_plan_users

    @property
    def attributes(self):
        """Gets the attributes of this Portfolio.  # noqa: E501


        :return: The attributes of this Portfolio.  # noqa: E501
        :rtype: Attributes
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this Portfolio.


        :param attributes: The attributes of this Portfolio.  # noqa: E501
        :type: Attributes
        """

        self._attributes = attributes

    @property
    def is_combined(self):
        """Gets the is_combined of this Portfolio.  # noqa: E501


        :return: The is_combined of this Portfolio.  # noqa: E501
        :rtype: bool
        """
        return self._is_combined

    @is_combined.setter
    def is_combined(self, is_combined):
        """Sets the is_combined of this Portfolio.


        :param is_combined: The is_combined of this Portfolio.  # noqa: E501
        :type: bool
        """

        self._is_combined = is_combined

    @property
    def user_registration_token(self):
        """Gets the user_registration_token of this Portfolio.  # noqa: E501

        user registration token string  # noqa: E501

        :return: The user_registration_token of this Portfolio.  # noqa: E501
        :rtype: str
        """
        return self._user_registration_token

    @user_registration_token.setter
    def user_registration_token(self, user_registration_token):
        """Sets the user_registration_token of this Portfolio.

        user registration token string  # noqa: E501

        :param user_registration_token: The user_registration_token of this Portfolio.  # noqa: E501
        :type: str
        """

        self._user_registration_token = user_registration_token

    @property
    def sub_portfolios(self):
        """Gets the sub_portfolios of this Portfolio.  # noqa: E501


        :return: The sub_portfolios of this Portfolio.  # noqa: E501
        :rtype: list[Portfolio]
        """
        return self._sub_portfolios

    @sub_portfolios.setter
    def sub_portfolios(self, sub_portfolios):
        """Sets the sub_portfolios of this Portfolio.


        :param sub_portfolios: The sub_portfolios of this Portfolio.  # noqa: E501
        :type: list[Portfolio]
        """

        self._sub_portfolios = sub_portfolios

    @property
    def combined_portfolios(self):
        """Gets the combined_portfolios of this Portfolio.  # noqa: E501


        :return: The combined_portfolios of this Portfolio.  # noqa: E501
        :rtype: list[Portfolio]
        """
        return self._combined_portfolios

    @combined_portfolios.setter
    def combined_portfolios(self, combined_portfolios):
        """Sets the combined_portfolios of this Portfolio.


        :param combined_portfolios: The combined_portfolios of this Portfolio.  # noqa: E501
        :type: list[Portfolio]
        """

        self._combined_portfolios = combined_portfolios

    @property
    def resource_pools(self):
        """Gets the resource_pools of this Portfolio.  # noqa: E501


        :return: The resource_pools of this Portfolio.  # noqa: E501
        :rtype: ResourcePools
        """
        return self._resource_pools

    @resource_pools.setter
    def resource_pools(self, resource_pools):
        """Sets the resource_pools of this Portfolio.


        :param resource_pools: The resource_pools of this Portfolio.  # noqa: E501
        :type: ResourcePools
        """

        self._resource_pools = resource_pools

    @property
    def total_budget(self):
        """Gets the total_budget of this Portfolio.  # noqa: E501


        :return: The total_budget of this Portfolio.  # noqa: E501
        :rtype: float
        """
        return self._total_budget

    @total_budget.setter
    def total_budget(self, total_budget):
        """Sets the total_budget of this Portfolio.


        :param total_budget: The total_budget of this Portfolio.  # noqa: E501
        :type: float
        """

        self._total_budget = total_budget

    @property
    def new_notifications_count(self):
        """Gets the new_notifications_count of this Portfolio.  # noqa: E501


        :return: The new_notifications_count of this Portfolio.  # noqa: E501
        :rtype: int
        """
        return self._new_notifications_count

    @new_notifications_count.setter
    def new_notifications_count(self, new_notifications_count):
        """Sets the new_notifications_count of this Portfolio.


        :param new_notifications_count: The new_notifications_count of this Portfolio.  # noqa: E501
        :type: int
        """

        self._new_notifications_count = new_notifications_count

    @property
    def custom_names(self):
        """Gets the custom_names of this Portfolio.  # noqa: E501


        :return: The custom_names of this Portfolio.  # noqa: E501
        :rtype: CustomNames
        """
        return self._custom_names

    @custom_names.setter
    def custom_names(self, custom_names):
        """Sets the custom_names of this Portfolio.


        :param custom_names: The custom_names of this Portfolio.  # noqa: E501
        :type: CustomNames
        """

        self._custom_names = custom_names

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Portfolio, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Portfolio):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Portfolio):
            return True

        return self.to_dict() != other.to_dict()
