# coding: utf-8

"""
    Decision Lens API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from dlxapi.configuration import Configuration


class Recommendations(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'portfolio_plan_id': 'str',
        'items': 'list[Recommendation]',
        'initial_portfolio_plan_grades': 'PortfolioPlanGrades',
        'schedule_result_info': 'str',
        'overconstrained_message': 'str'
    }

    attribute_map = {
        'portfolio_plan_id': 'portfolioPlanId',
        'items': 'items',
        'initial_portfolio_plan_grades': 'initialPortfolioPlanGrades',
        'schedule_result_info': 'scheduleResultInfo',
        'overconstrained_message': 'overconstrainedMessage'
    }

    def __init__(self, portfolio_plan_id=None, items=None, initial_portfolio_plan_grades=None, schedule_result_info=None, overconstrained_message=None, _configuration=None):  # noqa: E501
        """Recommendations - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._portfolio_plan_id = None
        self._items = None
        self._initial_portfolio_plan_grades = None
        self._schedule_result_info = None
        self._overconstrained_message = None
        self.discriminator = None

        if portfolio_plan_id is not None:
            self.portfolio_plan_id = portfolio_plan_id
        if items is not None:
            self.items = items
        if initial_portfolio_plan_grades is not None:
            self.initial_portfolio_plan_grades = initial_portfolio_plan_grades
        if schedule_result_info is not None:
            self.schedule_result_info = schedule_result_info
        if overconstrained_message is not None:
            self.overconstrained_message = overconstrained_message

    @property
    def portfolio_plan_id(self):
        """Gets the portfolio_plan_id of this Recommendations.  # noqa: E501


        :return: The portfolio_plan_id of this Recommendations.  # noqa: E501
        :rtype: str
        """
        return self._portfolio_plan_id

    @portfolio_plan_id.setter
    def portfolio_plan_id(self, portfolio_plan_id):
        """Sets the portfolio_plan_id of this Recommendations.


        :param portfolio_plan_id: The portfolio_plan_id of this Recommendations.  # noqa: E501
        :type: str
        """

        self._portfolio_plan_id = portfolio_plan_id

    @property
    def items(self):
        """Gets the items of this Recommendations.  # noqa: E501


        :return: The items of this Recommendations.  # noqa: E501
        :rtype: list[Recommendation]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this Recommendations.


        :param items: The items of this Recommendations.  # noqa: E501
        :type: list[Recommendation]
        """

        self._items = items

    @property
    def initial_portfolio_plan_grades(self):
        """Gets the initial_portfolio_plan_grades of this Recommendations.  # noqa: E501


        :return: The initial_portfolio_plan_grades of this Recommendations.  # noqa: E501
        :rtype: PortfolioPlanGrades
        """
        return self._initial_portfolio_plan_grades

    @initial_portfolio_plan_grades.setter
    def initial_portfolio_plan_grades(self, initial_portfolio_plan_grades):
        """Sets the initial_portfolio_plan_grades of this Recommendations.


        :param initial_portfolio_plan_grades: The initial_portfolio_plan_grades of this Recommendations.  # noqa: E501
        :type: PortfolioPlanGrades
        """

        self._initial_portfolio_plan_grades = initial_portfolio_plan_grades

    @property
    def schedule_result_info(self):
        """Gets the schedule_result_info of this Recommendations.  # noqa: E501


        :return: The schedule_result_info of this Recommendations.  # noqa: E501
        :rtype: str
        """
        return self._schedule_result_info

    @schedule_result_info.setter
    def schedule_result_info(self, schedule_result_info):
        """Sets the schedule_result_info of this Recommendations.


        :param schedule_result_info: The schedule_result_info of this Recommendations.  # noqa: E501
        :type: str
        """

        self._schedule_result_info = schedule_result_info

    @property
    def overconstrained_message(self):
        """Gets the overconstrained_message of this Recommendations.  # noqa: E501


        :return: The overconstrained_message of this Recommendations.  # noqa: E501
        :rtype: str
        """
        return self._overconstrained_message

    @overconstrained_message.setter
    def overconstrained_message(self, overconstrained_message):
        """Sets the overconstrained_message of this Recommendations.


        :param overconstrained_message: The overconstrained_message of this Recommendations.  # noqa: E501
        :type: str
        """

        self._overconstrained_message = overconstrained_message

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Recommendations, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Recommendations):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Recommendations):
            return True

        return self.to_dict() != other.to_dict()
