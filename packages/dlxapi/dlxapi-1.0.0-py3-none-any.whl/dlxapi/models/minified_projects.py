# coding: utf-8

"""
    Decision Lens API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from dlxapi.configuration import Configuration


class MinifiedProjects(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'fidx': 'dict(str, str)',
        'tidx': 'dict(str, int)',
        'uidx': 'dict(str, str)',
        'prs': 'list[MinifiedProject]',
        'tot': 'int',
        'lim': 'int',
        'ofs': 'int'
    }

    attribute_map = {
        'fidx': 'fidx',
        'tidx': 'tidx',
        'uidx': 'uidx',
        'prs': 'prs',
        'tot': 'tot',
        'lim': 'lim',
        'ofs': 'ofs'
    }

    def __init__(self, fidx=None, tidx=None, uidx=None, prs=None, tot=None, lim=None, ofs=None, _configuration=None):  # noqa: E501
        """MinifiedProjects - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._fidx = None
        self._tidx = None
        self._uidx = None
        self._prs = None
        self._tot = None
        self._lim = None
        self._ofs = None
        self.discriminator = None

        if fidx is not None:
            self.fidx = fidx
        if tidx is not None:
            self.tidx = tidx
        if uidx is not None:
            self.uidx = uidx
        if prs is not None:
            self.prs = prs
        if tot is not None:
            self.tot = tot
        if lim is not None:
            self.lim = lim
        if ofs is not None:
            self.ofs = ofs

    @property
    def fidx(self):
        """Gets the fidx of this MinifiedProjects.  # noqa: E501

        Field index  # noqa: E501

        :return: The fidx of this MinifiedProjects.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._fidx

    @fidx.setter
    def fidx(self, fidx):
        """Sets the fidx of this MinifiedProjects.

        Field index  # noqa: E501

        :param fidx: The fidx of this MinifiedProjects.  # noqa: E501
        :type: dict(str, str)
        """

        self._fidx = fidx

    @property
    def tidx(self):
        """Gets the tidx of this MinifiedProjects.  # noqa: E501

        TimePeriod index  # noqa: E501

        :return: The tidx of this MinifiedProjects.  # noqa: E501
        :rtype: dict(str, int)
        """
        return self._tidx

    @tidx.setter
    def tidx(self, tidx):
        """Sets the tidx of this MinifiedProjects.

        TimePeriod index  # noqa: E501

        :param tidx: The tidx of this MinifiedProjects.  # noqa: E501
        :type: dict(str, int)
        """

        self._tidx = tidx

    @property
    def uidx(self):
        """Gets the uidx of this MinifiedProjects.  # noqa: E501

        User index  # noqa: E501

        :return: The uidx of this MinifiedProjects.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._uidx

    @uidx.setter
    def uidx(self, uidx):
        """Sets the uidx of this MinifiedProjects.

        User index  # noqa: E501

        :param uidx: The uidx of this MinifiedProjects.  # noqa: E501
        :type: dict(str, str)
        """

        self._uidx = uidx

    @property
    def prs(self):
        """Gets the prs of this MinifiedProjects.  # noqa: E501

        Minified projects.  # noqa: E501

        :return: The prs of this MinifiedProjects.  # noqa: E501
        :rtype: list[MinifiedProject]
        """
        return self._prs

    @prs.setter
    def prs(self, prs):
        """Sets the prs of this MinifiedProjects.

        Minified projects.  # noqa: E501

        :param prs: The prs of this MinifiedProjects.  # noqa: E501
        :type: list[MinifiedProject]
        """

        self._prs = prs

    @property
    def tot(self):
        """Gets the tot of this MinifiedProjects.  # noqa: E501

        Total projects count  # noqa: E501

        :return: The tot of this MinifiedProjects.  # noqa: E501
        :rtype: int
        """
        return self._tot

    @tot.setter
    def tot(self, tot):
        """Sets the tot of this MinifiedProjects.

        Total projects count  # noqa: E501

        :param tot: The tot of this MinifiedProjects.  # noqa: E501
        :type: int
        """

        self._tot = tot

    @property
    def lim(self):
        """Gets the lim of this MinifiedProjects.  # noqa: E501

        pagination limit  # noqa: E501

        :return: The lim of this MinifiedProjects.  # noqa: E501
        :rtype: int
        """
        return self._lim

    @lim.setter
    def lim(self, lim):
        """Sets the lim of this MinifiedProjects.

        pagination limit  # noqa: E501

        :param lim: The lim of this MinifiedProjects.  # noqa: E501
        :type: int
        """

        self._lim = lim

    @property
    def ofs(self):
        """Gets the ofs of this MinifiedProjects.  # noqa: E501

        pagination offset  # noqa: E501

        :return: The ofs of this MinifiedProjects.  # noqa: E501
        :rtype: int
        """
        return self._ofs

    @ofs.setter
    def ofs(self, ofs):
        """Sets the ofs of this MinifiedProjects.

        pagination offset  # noqa: E501

        :param ofs: The ofs of this MinifiedProjects.  # noqa: E501
        :type: int
        """

        self._ofs = ofs

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MinifiedProjects, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MinifiedProjects):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MinifiedProjects):
            return True

        return self.to_dict() != other.to_dict()
