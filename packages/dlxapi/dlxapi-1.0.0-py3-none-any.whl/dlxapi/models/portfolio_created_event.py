# coding: utf-8

"""
    Decision Lens API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from dlxapi.configuration import Configuration


class PortfolioCreatedEvent(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'portfolio_id': 'str',
        'user_registration_token': 'str',
        'is_archived': 'bool',
        'group_id': 'str',
        'name': 'str',
        'description': 'str',
        'is_combined': 'bool',
        'attributes': 'Attributes',
        'id': 'str',
        'portfolio_plan': 'PortfolioPlan'
    }

    attribute_map = {
        'portfolio_id': 'portfolioId',
        'user_registration_token': 'userRegistrationToken',
        'is_archived': 'isArchived',
        'group_id': 'groupId',
        'name': 'name',
        'description': 'description',
        'is_combined': 'isCombined',
        'attributes': 'attributes',
        'id': 'id',
        'portfolio_plan': 'portfolioPlan'
    }

    def __init__(self, portfolio_id=None, user_registration_token=None, is_archived=None, group_id=None, name=None, description=None, is_combined=None, attributes=None, id=None, portfolio_plan=None, _configuration=None):  # noqa: E501
        """PortfolioCreatedEvent - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._portfolio_id = None
        self._user_registration_token = None
        self._is_archived = None
        self._group_id = None
        self._name = None
        self._description = None
        self._is_combined = None
        self._attributes = None
        self._id = None
        self._portfolio_plan = None
        self.discriminator = None

        if portfolio_id is not None:
            self.portfolio_id = portfolio_id
        if user_registration_token is not None:
            self.user_registration_token = user_registration_token
        if is_archived is not None:
            self.is_archived = is_archived
        if group_id is not None:
            self.group_id = group_id
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if is_combined is not None:
            self.is_combined = is_combined
        if attributes is not None:
            self.attributes = attributes
        if id is not None:
            self.id = id
        if portfolio_plan is not None:
            self.portfolio_plan = portfolio_plan

    @property
    def portfolio_id(self):
        """Gets the portfolio_id of this PortfolioCreatedEvent.  # noqa: E501


        :return: The portfolio_id of this PortfolioCreatedEvent.  # noqa: E501
        :rtype: str
        """
        return self._portfolio_id

    @portfolio_id.setter
    def portfolio_id(self, portfolio_id):
        """Sets the portfolio_id of this PortfolioCreatedEvent.


        :param portfolio_id: The portfolio_id of this PortfolioCreatedEvent.  # noqa: E501
        :type: str
        """

        self._portfolio_id = portfolio_id

    @property
    def user_registration_token(self):
        """Gets the user_registration_token of this PortfolioCreatedEvent.  # noqa: E501


        :return: The user_registration_token of this PortfolioCreatedEvent.  # noqa: E501
        :rtype: str
        """
        return self._user_registration_token

    @user_registration_token.setter
    def user_registration_token(self, user_registration_token):
        """Sets the user_registration_token of this PortfolioCreatedEvent.


        :param user_registration_token: The user_registration_token of this PortfolioCreatedEvent.  # noqa: E501
        :type: str
        """

        self._user_registration_token = user_registration_token

    @property
    def is_archived(self):
        """Gets the is_archived of this PortfolioCreatedEvent.  # noqa: E501


        :return: The is_archived of this PortfolioCreatedEvent.  # noqa: E501
        :rtype: bool
        """
        return self._is_archived

    @is_archived.setter
    def is_archived(self, is_archived):
        """Sets the is_archived of this PortfolioCreatedEvent.


        :param is_archived: The is_archived of this PortfolioCreatedEvent.  # noqa: E501
        :type: bool
        """

        self._is_archived = is_archived

    @property
    def group_id(self):
        """Gets the group_id of this PortfolioCreatedEvent.  # noqa: E501


        :return: The group_id of this PortfolioCreatedEvent.  # noqa: E501
        :rtype: str
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this PortfolioCreatedEvent.


        :param group_id: The group_id of this PortfolioCreatedEvent.  # noqa: E501
        :type: str
        """

        self._group_id = group_id

    @property
    def name(self):
        """Gets the name of this PortfolioCreatedEvent.  # noqa: E501


        :return: The name of this PortfolioCreatedEvent.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PortfolioCreatedEvent.


        :param name: The name of this PortfolioCreatedEvent.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this PortfolioCreatedEvent.  # noqa: E501


        :return: The description of this PortfolioCreatedEvent.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PortfolioCreatedEvent.


        :param description: The description of this PortfolioCreatedEvent.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def is_combined(self):
        """Gets the is_combined of this PortfolioCreatedEvent.  # noqa: E501


        :return: The is_combined of this PortfolioCreatedEvent.  # noqa: E501
        :rtype: bool
        """
        return self._is_combined

    @is_combined.setter
    def is_combined(self, is_combined):
        """Sets the is_combined of this PortfolioCreatedEvent.


        :param is_combined: The is_combined of this PortfolioCreatedEvent.  # noqa: E501
        :type: bool
        """

        self._is_combined = is_combined

    @property
    def attributes(self):
        """Gets the attributes of this PortfolioCreatedEvent.  # noqa: E501


        :return: The attributes of this PortfolioCreatedEvent.  # noqa: E501
        :rtype: Attributes
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this PortfolioCreatedEvent.


        :param attributes: The attributes of this PortfolioCreatedEvent.  # noqa: E501
        :type: Attributes
        """

        self._attributes = attributes

    @property
    def id(self):
        """Gets the id of this PortfolioCreatedEvent.  # noqa: E501


        :return: The id of this PortfolioCreatedEvent.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PortfolioCreatedEvent.


        :param id: The id of this PortfolioCreatedEvent.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def portfolio_plan(self):
        """Gets the portfolio_plan of this PortfolioCreatedEvent.  # noqa: E501


        :return: The portfolio_plan of this PortfolioCreatedEvent.  # noqa: E501
        :rtype: PortfolioPlan
        """
        return self._portfolio_plan

    @portfolio_plan.setter
    def portfolio_plan(self, portfolio_plan):
        """Sets the portfolio_plan of this PortfolioCreatedEvent.


        :param portfolio_plan: The portfolio_plan of this PortfolioCreatedEvent.  # noqa: E501
        :type: PortfolioPlan
        """

        self._portfolio_plan = portfolio_plan

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PortfolioCreatedEvent, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PortfolioCreatedEvent):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PortfolioCreatedEvent):
            return True

        return self.to_dict() != other.to_dict()
