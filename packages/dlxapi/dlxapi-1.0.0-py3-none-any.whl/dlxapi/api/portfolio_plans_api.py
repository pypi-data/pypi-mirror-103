# coding: utf-8

"""
    Decision Lens API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from dlxapi.api_client import ApiClient


class PortfolioPlansApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_portfolio_plan_users(self, id, **kwargs):  # noqa: E501
        """Add users to a portfolio plan.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_portfolio_plan_users(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Portfolio plan id (required)
        :param AddUsersRequest body: Email ids and personal message
        :return: list[PortfolioPlanUser]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_portfolio_plan_users_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.add_portfolio_plan_users_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def add_portfolio_plan_users_with_http_info(self, id, **kwargs):  # noqa: E501
        """Add users to a portfolio plan.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_portfolio_plan_users_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Portfolio plan id (required)
        :param AddUsersRequest body: Email ids and personal message
        :return: list[PortfolioPlanUser]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_portfolio_plan_users" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `add_portfolio_plan_users`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/portfolioPlans/{id}/users', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[PortfolioPlanUser]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def apply_recommendations_for_portfolio_plan(self, id, body, **kwargs):  # noqa: E501
        """Apply recommendations of a portfolio plan.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apply_recommendations_for_portfolio_plan(id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Portfolio plan id (required)
        :param list[Recommendation] body: JSON Recommendation Objects to apply to a portfolio plan. (required)
        :return: list[FieldValue]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.apply_recommendations_for_portfolio_plan_with_http_info(id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.apply_recommendations_for_portfolio_plan_with_http_info(id, body, **kwargs)  # noqa: E501
            return data

    def apply_recommendations_for_portfolio_plan_with_http_info(self, id, body, **kwargs):  # noqa: E501
        """Apply recommendations of a portfolio plan.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apply_recommendations_for_portfolio_plan_with_http_info(id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Portfolio plan id (required)
        :param list[Recommendation] body: JSON Recommendation Objects to apply to a portfolio plan. (required)
        :return: list[FieldValue]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method apply_recommendations_for_portfolio_plan" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `apply_recommendations_for_portfolio_plan`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `apply_recommendations_for_portfolio_plan`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/portfolioPlans/{id}/recommendations', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[FieldValue]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_portfolio_plan(self, body, **kwargs):  # noqa: E501
        """Create a portfolio plan  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_portfolio_plan(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PortfolioPlan body: portfolio plan (required)
        :param str expand: JSON string containing an array expand specifications for fields.  An expand specification must have a path and includes optional properties match, unique, allPossible, limit, offset, orderBy.
        :return: PortfolioPlan
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_portfolio_plan_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_portfolio_plan_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_portfolio_plan_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create a portfolio plan  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_portfolio_plan_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PortfolioPlan body: portfolio plan (required)
        :param str expand: JSON string containing an array expand specifications for fields.  An expand specification must have a path and includes optional properties match, unique, allPossible, limit, offset, orderBy.
        :return: PortfolioPlan
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_portfolio_plan" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `create_portfolio_plan`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'expand' in params:
            query_params.append(('expand', params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/portfolioPlans', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PortfolioPlan',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_projects_in_portfolio_plan(self, id, body, **kwargs):  # noqa: E501
        """Create new projects  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_projects_in_portfolio_plan(id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Portfolio plan id (required)
        :param list[Project] body: Projects to create (required)
        :param bool do_not_expand: Whether to return collections for each project in the response. Default is to return saved field values.
        :return: list[Project]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_projects_in_portfolio_plan_with_http_info(id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_projects_in_portfolio_plan_with_http_info(id, body, **kwargs)  # noqa: E501
            return data

    def create_projects_in_portfolio_plan_with_http_info(self, id, body, **kwargs):  # noqa: E501
        """Create new projects  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_projects_in_portfolio_plan_with_http_info(id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Portfolio plan id (required)
        :param list[Project] body: Projects to create (required)
        :param bool do_not_expand: Whether to return collections for each project in the response. Default is to return saved field values.
        :return: list[Project]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body', 'do_not_expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_projects_in_portfolio_plan" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `create_projects_in_portfolio_plan`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `create_projects_in_portfolio_plan`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'do_not_expand' in params:
            query_params.append(('doNotExpand', params['do_not_expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/portfolioPlans/{id}/projects', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Project]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_portfolio_plan(self, id, **kwargs):  # noqa: E501
        """Deletes portfolio plan  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_portfolio_plan(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: portfolio plan id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_portfolio_plan_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_portfolio_plan_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def delete_portfolio_plan_with_http_info(self, id, **kwargs):  # noqa: E501
        """Deletes portfolio plan  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_portfolio_plan_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: portfolio plan id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_portfolio_plan" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `delete_portfolio_plan`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/portfolioPlans/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def export_portfolio_plan(self, id, export_type, export_format, **kwargs):  # noqa: E501
        """Export portfolio plan  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.export_portfolio_plan(id, export_type, export_format, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: portfolio plan id (required)
        :param object export_type: export type (PROJECT, SCHEDULE) (required)
        :param object export_format: export format type (XLSX) (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.export_portfolio_plan_with_http_info(id, export_type, export_format, **kwargs)  # noqa: E501
        else:
            (data) = self.export_portfolio_plan_with_http_info(id, export_type, export_format, **kwargs)  # noqa: E501
            return data

    def export_portfolio_plan_with_http_info(self, id, export_type, export_format, **kwargs):  # noqa: E501
        """Export portfolio plan  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.export_portfolio_plan_with_http_info(id, export_type, export_format, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: portfolio plan id (required)
        :param object export_type: export type (PROJECT, SCHEDULE) (required)
        :param object export_format: export format type (XLSX) (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'export_type', 'export_format']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method export_portfolio_plan" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `export_portfolio_plan`")  # noqa: E501
        # verify the required parameter 'export_type' is set
        if self.api_client.client_side_validation and ('export_type' not in params or
                                                       params['export_type'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `export_type` when calling `export_portfolio_plan`")  # noqa: E501
        # verify the required parameter 'export_format' is set
        if self.api_client.client_side_validation and ('export_format' not in params or
                                                       params['export_format'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `export_format` when calling `export_portfolio_plan`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'export_type' in params:
            query_params.append(('exportType', params['export_type']))  # noqa: E501
        if 'export_format' in params:
            query_params.append(('exportFormat', params['export_format']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/portfolioPlans/{id}/export', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_budget_allocations_for_portfolio_plan(self, id, **kwargs):  # noqa: E501
        """Retrieves budget allocations for a portfolio plan.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_budget_allocations_for_portfolio_plan(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Portfolio plan id (required)
        :param int start_time: Start time for the requested data
        :param int end_time: End time for the requested data
        :return: BudgetAllocations
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_budget_allocations_for_portfolio_plan_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_budget_allocations_for_portfolio_plan_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_budget_allocations_for_portfolio_plan_with_http_info(self, id, **kwargs):  # noqa: E501
        """Retrieves budget allocations for a portfolio plan.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_budget_allocations_for_portfolio_plan_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Portfolio plan id (required)
        :param int start_time: Start time for the requested data
        :param int end_time: End time for the requested data
        :return: BudgetAllocations
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'start_time', 'end_time']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_budget_allocations_for_portfolio_plan" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `get_budget_allocations_for_portfolio_plan`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'start_time' in params:
            query_params.append(('startTime', params['start_time']))  # noqa: E501
        if 'end_time' in params:
            query_params.append(('endTime', params['end_time']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/portfolioPlans/{id}/budgetAllocations', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BudgetAllocations',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_minified_projects_for_portfolio_plan(self, id, **kwargs):  # noqa: E501
        """Retrieves minified projects contained within a portfolio plan.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_minified_projects_for_portfolio_plan(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Portfolio plan id (required)
        :param str expand: JSON string containing an array expand specifications for fields.  An expand specification must have a path and includes optional properties match, unique, allPossible, limit, offset, orderBy.
        :param int limit: Pagination limit
        :param int offset: Pagination offset
        :param str order_by: Comma delimited list of order by expressions. Use '-' in front of expression for reverse order.
        :param str match: Semi-colon delimited list of expressions to include in the response only the items in a collections that satisfy the expression(s). All other items should be exluded.
        :return: MinifiedProjects
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_minified_projects_for_portfolio_plan_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_minified_projects_for_portfolio_plan_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_minified_projects_for_portfolio_plan_with_http_info(self, id, **kwargs):  # noqa: E501
        """Retrieves minified projects contained within a portfolio plan.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_minified_projects_for_portfolio_plan_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Portfolio plan id (required)
        :param str expand: JSON string containing an array expand specifications for fields.  An expand specification must have a path and includes optional properties match, unique, allPossible, limit, offset, orderBy.
        :param int limit: Pagination limit
        :param int offset: Pagination offset
        :param str order_by: Comma delimited list of order by expressions. Use '-' in front of expression for reverse order.
        :param str match: Semi-colon delimited list of expressions to include in the response only the items in a collections that satisfy the expression(s). All other items should be exluded.
        :return: MinifiedProjects
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'expand', 'limit', 'offset', 'order_by', 'match']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_minified_projects_for_portfolio_plan" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `get_minified_projects_for_portfolio_plan`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'expand' in params:
            query_params.append(('expand', params['expand']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'order_by' in params:
            query_params.append(('orderBy', params['order_by']))  # noqa: E501
        if 'match' in params:
            query_params.append(('match', params['match']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/portfolioPlans/{id}/projects/minify', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MinifiedProjects',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_portfolio_plan(self, id, **kwargs):  # noqa: E501
        """Retrieves portfolio plan  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_portfolio_plan(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: portfolio plan id (required)
        :param str expand: JSON string containing an array expand specifications for fields.  An expand specification must have a path and includes optional properties match, unique, allPossible, limit, offset, orderBy.
        :return: PortfolioPlan
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_portfolio_plan_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_portfolio_plan_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_portfolio_plan_with_http_info(self, id, **kwargs):  # noqa: E501
        """Retrieves portfolio plan  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_portfolio_plan_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: portfolio plan id (required)
        :param str expand: JSON string containing an array expand specifications for fields.  An expand specification must have a path and includes optional properties match, unique, allPossible, limit, offset, orderBy.
        :return: PortfolioPlan
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_portfolio_plan" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `get_portfolio_plan`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'expand' in params:
            query_params.append(('expand', params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/portfolioPlans/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PortfolioPlan',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_portfolio_plan_activities(self, id, **kwargs):  # noqa: E501
        """Retrieves portfolio plan activities log.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_portfolio_plan_activities(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Portfolio plan id (required)
        :param str project_id: Use when you want to filter activities for a specific project
        :param int limit: Pagination limit
        :param int offset: Pagination offset
        :param str match: Semi-colon delimited list of expressions to include in the response only the items in a collections that satisfy the expression(s). All other items should be exluded.
        :return: Activities
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_portfolio_plan_activities_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_portfolio_plan_activities_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_portfolio_plan_activities_with_http_info(self, id, **kwargs):  # noqa: E501
        """Retrieves portfolio plan activities log.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_portfolio_plan_activities_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Portfolio plan id (required)
        :param str project_id: Use when you want to filter activities for a specific project
        :param int limit: Pagination limit
        :param int offset: Pagination offset
        :param str match: Semi-colon delimited list of expressions to include in the response only the items in a collections that satisfy the expression(s). All other items should be exluded.
        :return: Activities
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'project_id', 'limit', 'offset', 'match']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_portfolio_plan_activities" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `get_portfolio_plan_activities`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'project_id' in params:
            query_params.append(('projectId', params['project_id']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'match' in params:
            query_params.append(('match', params['match']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/portfolioPlans/{id}/activities', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Activities',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_portfolio_plan_users(self, id, **kwargs):  # noqa: E501
        """Retrieves users in a portfolio plan.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_portfolio_plan_users(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Portfolio plan id (required)
        :param int limit: Pagination limit
        :param int offset: Pagination offset
        :param str order_by: Comma delimited list of order by expressions. Use '-' in front of expression for reverse order.
        :param str match: Semi-colon delimited list of expressions to include in the response only the items in a collections that satisfy the expression(s). All other items should be exluded.
        :return: PortfolioPlanUsers
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_portfolio_plan_users_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_portfolio_plan_users_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_portfolio_plan_users_with_http_info(self, id, **kwargs):  # noqa: E501
        """Retrieves users in a portfolio plan.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_portfolio_plan_users_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Portfolio plan id (required)
        :param int limit: Pagination limit
        :param int offset: Pagination offset
        :param str order_by: Comma delimited list of order by expressions. Use '-' in front of expression for reverse order.
        :param str match: Semi-colon delimited list of expressions to include in the response only the items in a collections that satisfy the expression(s). All other items should be exluded.
        :return: PortfolioPlanUsers
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'limit', 'offset', 'order_by', 'match']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_portfolio_plan_users" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `get_portfolio_plan_users`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'order_by' in params:
            query_params.append(('orderBy', params['order_by']))  # noqa: E501
        if 'match' in params:
            query_params.append(('match', params['match']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/portfolioPlans/{id}/users', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PortfolioPlanUsers',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_portfolio_plans(self, portfolio_id, **kwargs):  # noqa: E501
        """Retrieves portfolio plans  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_portfolio_plans(portfolio_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str portfolio_id: portfolio id (required)
        :param str expand: JSON string containing an array expand specifications for fields.  An expand specification must have a path and includes optional properties match, unique, allPossible, limit, offset, orderBy.
        :param int limit: Pagination limit
        :param int offset: Pagination offset
        :param str order_by: Comma delimited list of order by expressions. Use '-' in front of expression for reverse order.
        :param str match: Semi-colon delimited list of expressions to include in the response only the items in a collections that satisfy the expression(s). All other items should be exluded.
        :return: PortfolioPlans
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_portfolio_plans_with_http_info(portfolio_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_portfolio_plans_with_http_info(portfolio_id, **kwargs)  # noqa: E501
            return data

    def get_portfolio_plans_with_http_info(self, portfolio_id, **kwargs):  # noqa: E501
        """Retrieves portfolio plans  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_portfolio_plans_with_http_info(portfolio_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str portfolio_id: portfolio id (required)
        :param str expand: JSON string containing an array expand specifications for fields.  An expand specification must have a path and includes optional properties match, unique, allPossible, limit, offset, orderBy.
        :param int limit: Pagination limit
        :param int offset: Pagination offset
        :param str order_by: Comma delimited list of order by expressions. Use '-' in front of expression for reverse order.
        :param str match: Semi-colon delimited list of expressions to include in the response only the items in a collections that satisfy the expression(s). All other items should be exluded.
        :return: PortfolioPlans
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['portfolio_id', 'expand', 'limit', 'offset', 'order_by', 'match']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_portfolio_plans" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'portfolio_id' is set
        if self.api_client.client_side_validation and ('portfolio_id' not in params or
                                                       params['portfolio_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `portfolio_id` when calling `get_portfolio_plans`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'portfolio_id' in params:
            query_params.append(('portfolioId', params['portfolio_id']))  # noqa: E501
        if 'expand' in params:
            query_params.append(('expand', params['expand']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'order_by' in params:
            query_params.append(('orderBy', params['order_by']))  # noqa: E501
        if 'match' in params:
            query_params.append(('match', params['match']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/portfolioPlans', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PortfolioPlans',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_project_for_portfolio_plan(self, portfolio_plan_id, project_id, **kwargs):  # noqa: E501
        """Retrieves project contained within a portfolio plan.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_project_for_portfolio_plan(portfolio_plan_id, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str portfolio_plan_id: Portfolio plan id (required)
        :param str project_id: project id (required)
        :return: Project
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_project_for_portfolio_plan_with_http_info(portfolio_plan_id, project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_project_for_portfolio_plan_with_http_info(portfolio_plan_id, project_id, **kwargs)  # noqa: E501
            return data

    def get_project_for_portfolio_plan_with_http_info(self, portfolio_plan_id, project_id, **kwargs):  # noqa: E501
        """Retrieves project contained within a portfolio plan.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_project_for_portfolio_plan_with_http_info(portfolio_plan_id, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str portfolio_plan_id: Portfolio plan id (required)
        :param str project_id: project id (required)
        :return: Project
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['portfolio_plan_id', 'project_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_project_for_portfolio_plan" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'portfolio_plan_id' is set
        if self.api_client.client_side_validation and ('portfolio_plan_id' not in params or
                                                       params['portfolio_plan_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `portfolio_plan_id` when calling `get_project_for_portfolio_plan`")  # noqa: E501
        # verify the required parameter 'project_id' is set
        if self.api_client.client_side_validation and ('project_id' not in params or
                                                       params['project_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `project_id` when calling `get_project_for_portfolio_plan`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'portfolio_plan_id' in params:
            path_params['portfolioPlanId'] = params['portfolio_plan_id']  # noqa: E501
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/portfolioPlans/{portfolioPlanId}/projects/{projectId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Project',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_project_portfolio_plans_for_portfolio_plan_and_portfolio(self, portfolio_id, portfolio_plan_id, position_from, position_to, **kwargs):  # noqa: E501
        """Retrieves projects for portfolio plan  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_project_portfolio_plans_for_portfolio_plan_and_portfolio(portfolio_id, portfolio_plan_id, position_from, position_to, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str portfolio_id: Portfolio id (required)
        :param str portfolio_plan_id: Portfolio Plan id (required)
        :param int position_from: positionFrom for projects (required)
        :param int position_to: positionTo for projects (required)
        :return: Projects
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_project_portfolio_plans_for_portfolio_plan_and_portfolio_with_http_info(portfolio_id, portfolio_plan_id, position_from, position_to, **kwargs)  # noqa: E501
        else:
            (data) = self.get_project_portfolio_plans_for_portfolio_plan_and_portfolio_with_http_info(portfolio_id, portfolio_plan_id, position_from, position_to, **kwargs)  # noqa: E501
            return data

    def get_project_portfolio_plans_for_portfolio_plan_and_portfolio_with_http_info(self, portfolio_id, portfolio_plan_id, position_from, position_to, **kwargs):  # noqa: E501
        """Retrieves projects for portfolio plan  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_project_portfolio_plans_for_portfolio_plan_and_portfolio_with_http_info(portfolio_id, portfolio_plan_id, position_from, position_to, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str portfolio_id: Portfolio id (required)
        :param str portfolio_plan_id: Portfolio Plan id (required)
        :param int position_from: positionFrom for projects (required)
        :param int position_to: positionTo for projects (required)
        :return: Projects
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['portfolio_id', 'portfolio_plan_id', 'position_from', 'position_to']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_project_portfolio_plans_for_portfolio_plan_and_portfolio" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'portfolio_id' is set
        if self.api_client.client_side_validation and ('portfolio_id' not in params or
                                                       params['portfolio_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `portfolio_id` when calling `get_project_portfolio_plans_for_portfolio_plan_and_portfolio`")  # noqa: E501
        # verify the required parameter 'portfolio_plan_id' is set
        if self.api_client.client_side_validation and ('portfolio_plan_id' not in params or
                                                       params['portfolio_plan_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `portfolio_plan_id` when calling `get_project_portfolio_plans_for_portfolio_plan_and_portfolio`")  # noqa: E501
        # verify the required parameter 'position_from' is set
        if self.api_client.client_side_validation and ('position_from' not in params or
                                                       params['position_from'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `position_from` when calling `get_project_portfolio_plans_for_portfolio_plan_and_portfolio`")  # noqa: E501
        # verify the required parameter 'position_to' is set
        if self.api_client.client_side_validation and ('position_to' not in params or
                                                       params['position_to'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `position_to` when calling `get_project_portfolio_plans_for_portfolio_plan_and_portfolio`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'portfolio_id' in params:
            path_params['portfolioId'] = params['portfolio_id']  # noqa: E501
        if 'portfolio_plan_id' in params:
            path_params['portfolioPlanId'] = params['portfolio_plan_id']  # noqa: E501

        query_params = []
        if 'position_from' in params:
            query_params.append(('positionFrom', params['position_from']))  # noqa: E501
        if 'position_to' in params:
            query_params.append(('positionTo', params['position_to']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/portfolioPlans/{portfolioPlanId}/portfolios/{portfolioId}/projectPortfolioPlans', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Projects',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_projects_for_portfolio_plan(self, id, **kwargs):  # noqa: E501
        """Retrieves projects contained within a portfolio plan. Possible expand paths - (items.fieldValues, contributingUserIds)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_projects_for_portfolio_plan(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Portfolio plan id (required)
        :param str expand: JSON string containing an array expand specifications for fields.  An expand specification must have a path and includes optional properties match, unique, allPossible, limit, offset, orderBy.
        :param int limit: Pagination limit
        :param int offset: Pagination offset
        :param str order_by: Comma delimited list of order by expressions. Use '-' in front of expression for reverse order.
        :param str match: Semi-colon delimited list of expressions to include in the response only the items in a collections that satisfy the expression(s). All other items should be exluded.
        :return: Projects
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_projects_for_portfolio_plan_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_projects_for_portfolio_plan_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_projects_for_portfolio_plan_with_http_info(self, id, **kwargs):  # noqa: E501
        """Retrieves projects contained within a portfolio plan. Possible expand paths - (items.fieldValues, contributingUserIds)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_projects_for_portfolio_plan_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Portfolio plan id (required)
        :param str expand: JSON string containing an array expand specifications for fields.  An expand specification must have a path and includes optional properties match, unique, allPossible, limit, offset, orderBy.
        :param int limit: Pagination limit
        :param int offset: Pagination offset
        :param str order_by: Comma delimited list of order by expressions. Use '-' in front of expression for reverse order.
        :param str match: Semi-colon delimited list of expressions to include in the response only the items in a collections that satisfy the expression(s). All other items should be exluded.
        :return: Projects
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'expand', 'limit', 'offset', 'order_by', 'match']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_projects_for_portfolio_plan" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `get_projects_for_portfolio_plan`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'expand' in params:
            query_params.append(('expand', params['expand']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'order_by' in params:
            query_params.append(('orderBy', params['order_by']))  # noqa: E501
        if 'match' in params:
            query_params.append(('match', params['match']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/portfolioPlans/{id}/projects', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Projects',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_recommendations_for_portfolio_plan(self, id, **kwargs):  # noqa: E501
        """Retrieves recommendations for a portfolio plan.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_recommendations_for_portfolio_plan(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Portfolio plan id (required)
        :param int start_date: Start time period for the time horizon.
        :param int end_date: End time period for the time horizon.
        :param object plan_type: Plan type
        :return: Recommendations
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_recommendations_for_portfolio_plan_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_recommendations_for_portfolio_plan_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_recommendations_for_portfolio_plan_with_http_info(self, id, **kwargs):  # noqa: E501
        """Retrieves recommendations for a portfolio plan.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_recommendations_for_portfolio_plan_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Portfolio plan id (required)
        :param int start_date: Start time period for the time horizon.
        :param int end_date: End time period for the time horizon.
        :param object plan_type: Plan type
        :return: Recommendations
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'start_date', 'end_date', 'plan_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_recommendations_for_portfolio_plan" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `get_recommendations_for_portfolio_plan`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'plan_type' in params:
            query_params.append(('planType', params['plan_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/portfolioPlans/{id}/recommendations', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Recommendations',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_schedule_for_portfolio_plan(self, id, **kwargs):  # noqa: E501
        """Retrieves schedule for portfolio plan. The schedule is stored in a new portfolio plan.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_schedule_for_portfolio_plan(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Portfolio Plan id (required)
        :param int start_date: Start time period for the time horizon.
        :param int end_date: End time period for the time horizon.
        :param float tolerance_level_percentage: Percentage parameter to allow scheduling values within a deviation, defined by [target*(1 - tolerance), target*(1 + tolerance] bounds. Value should be between 0 and 1. Defaults to 0.1
        :param object scheduling_criteria: Criteria used to function to evaluate different schedules. Defaults to TimePeriodOverBudgetPercent
        :return: Recommendations
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_schedule_for_portfolio_plan_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_schedule_for_portfolio_plan_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_schedule_for_portfolio_plan_with_http_info(self, id, **kwargs):  # noqa: E501
        """Retrieves schedule for portfolio plan. The schedule is stored in a new portfolio plan.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_schedule_for_portfolio_plan_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Portfolio Plan id (required)
        :param int start_date: Start time period for the time horizon.
        :param int end_date: End time period for the time horizon.
        :param float tolerance_level_percentage: Percentage parameter to allow scheduling values within a deviation, defined by [target*(1 - tolerance), target*(1 + tolerance] bounds. Value should be between 0 and 1. Defaults to 0.1
        :param object scheduling_criteria: Criteria used to function to evaluate different schedules. Defaults to TimePeriodOverBudgetPercent
        :return: Recommendations
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'start_date', 'end_date', 'tolerance_level_percentage', 'scheduling_criteria']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_schedule_for_portfolio_plan" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `get_schedule_for_portfolio_plan`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'tolerance_level_percentage' in params:
            query_params.append(('toleranceLevelPercentage', params['tolerance_level_percentage']))  # noqa: E501
        if 'scheduling_criteria' in params:
            query_params.append(('schedulingCriteria', params['scheduling_criteria']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/portfolioPlans/{id}/schedule', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Recommendations',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def rebaseline_portfolio_plan(self, id, **kwargs):  # noqa: E501
        """Rebaseline a portfolio plan.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rebaseline_portfolio_plan(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Portfolio plan id (required)
        :return: PortfolioPlan
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.rebaseline_portfolio_plan_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.rebaseline_portfolio_plan_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def rebaseline_portfolio_plan_with_http_info(self, id, **kwargs):  # noqa: E501
        """Rebaseline a portfolio plan.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rebaseline_portfolio_plan_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Portfolio plan id (required)
        :return: PortfolioPlan
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method rebaseline_portfolio_plan" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `rebaseline_portfolio_plan`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/portfolioPlans/{id}/rebaseline', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PortfolioPlan',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_portfolio_plan(self, id, body, **kwargs):  # noqa: E501
        """Updates a portfolio plan utilizing JSON Patch Operations.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_portfolio_plan(id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: PortfolioPlan id (required)
        :param Operations body: JSON Patch Operations to update portfolio plan. (required)
        :param str expand: JSON string containing an array expand specifications for fields.  An expand specification must have a path and includes optional properties match, unique, allPossible, limit, offset, orderBy.
        :return: PortfolioPlan
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_portfolio_plan_with_http_info(id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.update_portfolio_plan_with_http_info(id, body, **kwargs)  # noqa: E501
            return data

    def update_portfolio_plan_with_http_info(self, id, body, **kwargs):  # noqa: E501
        """Updates a portfolio plan utilizing JSON Patch Operations.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_portfolio_plan_with_http_info(id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: PortfolioPlan id (required)
        :param Operations body: JSON Patch Operations to update portfolio plan. (required)
        :param str expand: JSON string containing an array expand specifications for fields.  An expand specification must have a path and includes optional properties match, unique, allPossible, limit, offset, orderBy.
        :return: PortfolioPlan
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_portfolio_plan" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `update_portfolio_plan`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `update_portfolio_plan`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'expand' in params:
            query_params.append(('expand', params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/portfolioPlans/{id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PortfolioPlan',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_portfolio_plan_field_values(self, id, body, **kwargs):  # noqa: E501
        """Update field values in a portfolio plan  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_portfolio_plan_field_values(id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object id: Portfolio plan id (required)
        :param list[FieldValuePatchItem] body: JSON Patch Operations to update multiple field values. (required)
        :param str expand: JSON string containing an array expand specifications for fields.  An expand specification must have a path and includes optional properties match, unique, allPossible, limit, offset, orderBy.
        :return: list[FieldValue]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_portfolio_plan_field_values_with_http_info(id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.update_portfolio_plan_field_values_with_http_info(id, body, **kwargs)  # noqa: E501
            return data

    def update_portfolio_plan_field_values_with_http_info(self, id, body, **kwargs):  # noqa: E501
        """Update field values in a portfolio plan  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_portfolio_plan_field_values_with_http_info(id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object id: Portfolio plan id (required)
        :param list[FieldValuePatchItem] body: JSON Patch Operations to update multiple field values. (required)
        :param str expand: JSON string containing an array expand specifications for fields.  An expand specification must have a path and includes optional properties match, unique, allPossible, limit, offset, orderBy.
        :return: list[FieldValue]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_portfolio_plan_field_values" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `update_portfolio_plan_field_values`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `update_portfolio_plan_field_values`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'expand' in params:
            query_params.append(('expand', params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/portfolioPlans/{id}/fieldValues', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[FieldValue]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_portfolio_plan_users(self, id, body, **kwargs):  # noqa: E501
        """Update users in a portfolio plan  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_portfolio_plan_users(id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object id: Portfolio plan id (required)
        :param list[PatchItem] body: JSON Patch Operations to update multiple portfolio plan users. (required)
        :return: list[PortfolioPlanUser]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_portfolio_plan_users_with_http_info(id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.update_portfolio_plan_users_with_http_info(id, body, **kwargs)  # noqa: E501
            return data

    def update_portfolio_plan_users_with_http_info(self, id, body, **kwargs):  # noqa: E501
        """Update users in a portfolio plan  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_portfolio_plan_users_with_http_info(id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object id: Portfolio plan id (required)
        :param list[PatchItem] body: JSON Patch Operations to update multiple portfolio plan users. (required)
        :return: list[PortfolioPlanUser]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_portfolio_plan_users" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `update_portfolio_plan_users`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `update_portfolio_plan_users`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/portfolioPlans/{id}/users', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[PortfolioPlanUser]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
