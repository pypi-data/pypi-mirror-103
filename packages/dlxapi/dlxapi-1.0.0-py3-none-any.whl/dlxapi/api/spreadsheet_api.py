# coding: utf-8

"""
    Decision Lens API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from dlxapi.api_client import ApiClient


class SpreadsheetApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_spreadsheet(self, file, **kwargs):  # noqa: E501
        """create_spreadsheet  # noqa: E501

        Creates spreadsheet from file upload.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_spreadsheet(file, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param file file: xls or xlsx file upload (required)
        :return: Spreadsheet
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_spreadsheet_with_http_info(file, **kwargs)  # noqa: E501
        else:
            (data) = self.create_spreadsheet_with_http_info(file, **kwargs)  # noqa: E501
            return data

    def create_spreadsheet_with_http_info(self, file, **kwargs):  # noqa: E501
        """create_spreadsheet  # noqa: E501

        Creates spreadsheet from file upload.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_spreadsheet_with_http_info(file, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param file file: xls or xlsx file upload (required)
        :return: Spreadsheet
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['file']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_spreadsheet" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'file' is set
        if self.api_client.client_side_validation and ('file' not in params or
                                                       params['file'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `file` when calling `create_spreadsheet`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'file' in params:
            local_var_files['file'] = params['file']  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/spreadsheet', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Spreadsheet',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_spreadsheet_for_kloudless_file(self, kloudless_file, **kwargs):  # noqa: E501
        """create_spreadsheet_for_kloudless_file  # noqa: E501

        Creates spreadsheet from kloudless file  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_spreadsheet_for_kloudless_file(kloudless_file, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param KloudlessFile kloudless_file: kloudless file (required)
        :return: Spreadsheet
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_spreadsheet_for_kloudless_file_with_http_info(kloudless_file, **kwargs)  # noqa: E501
        else:
            (data) = self.create_spreadsheet_for_kloudless_file_with_http_info(kloudless_file, **kwargs)  # noqa: E501
            return data

    def create_spreadsheet_for_kloudless_file_with_http_info(self, kloudless_file, **kwargs):  # noqa: E501
        """create_spreadsheet_for_kloudless_file  # noqa: E501

        Creates spreadsheet from kloudless file  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_spreadsheet_for_kloudless_file_with_http_info(kloudless_file, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param KloudlessFile kloudless_file: kloudless file (required)
        :return: Spreadsheet
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['kloudless_file']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_spreadsheet_for_kloudless_file" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'kloudless_file' is set
        if self.api_client.client_side_validation and ('kloudless_file' not in params or
                                                       params['kloudless_file'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `kloudless_file` when calling `create_spreadsheet_for_kloudless_file`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'kloudless_file' in params:
            body_params = params['kloudless_file']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/spreadsheet/kloudless', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Spreadsheet',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_spreadsheet(self, id, **kwargs):  # noqa: E501
        """Delete spreadsheet and mappings  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_spreadsheet(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: spreadsheet id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_spreadsheet_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_spreadsheet_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def delete_spreadsheet_with_http_info(self, id, **kwargs):  # noqa: E501
        """Delete spreadsheet and mappings  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_spreadsheet_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: spreadsheet id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_spreadsheet" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `delete_spreadsheet`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/spreadsheet/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_mappings_for_spreadsheet(self, id, **kwargs):  # noqa: E501
        """get_mappings_for_spreadsheet  # noqa: E501

        Get mappings for spreadsheet  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_mappings_for_spreadsheet(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: spreadsheet id (required)
        :param str sheet_name:
        :param object import_type: Whether import PROJECT or COST data. Defaults to PROJECT
        :param str expand: JSON string containing an array expand specifications for fields.  An expand specification must have a path and includes optional properties match, unique, allPossible, limit, offset, orderBy.
        :return: Mappings
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_mappings_for_spreadsheet_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_mappings_for_spreadsheet_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_mappings_for_spreadsheet_with_http_info(self, id, **kwargs):  # noqa: E501
        """get_mappings_for_spreadsheet  # noqa: E501

        Get mappings for spreadsheet  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_mappings_for_spreadsheet_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: spreadsheet id (required)
        :param str sheet_name:
        :param object import_type: Whether import PROJECT or COST data. Defaults to PROJECT
        :param str expand: JSON string containing an array expand specifications for fields.  An expand specification must have a path and includes optional properties match, unique, allPossible, limit, offset, orderBy.
        :return: Mappings
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'sheet_name', 'import_type', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_mappings_for_spreadsheet" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `get_mappings_for_spreadsheet`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'sheet_name' in params:
            query_params.append(('sheetName', params['sheet_name']))  # noqa: E501
        if 'import_type' in params:
            query_params.append(('importType', params['import_type']))  # noqa: E501
        if 'expand' in params:
            query_params.append(('expand', params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/spreadsheet/{id}/mappings', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Mappings',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_spreadsheet(self, id, **kwargs):  # noqa: E501
        """get_spreadsheet  # noqa: E501

        Get spreadsheet  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_spreadsheet(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: spreadsheet id (required)
        :return: Spreadsheet
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_spreadsheet_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_spreadsheet_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_spreadsheet_with_http_info(self, id, **kwargs):  # noqa: E501
        """get_spreadsheet  # noqa: E501

        Get spreadsheet  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_spreadsheet_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: spreadsheet id (required)
        :return: Spreadsheet
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_spreadsheet" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `get_spreadsheet`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/spreadsheet/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Spreadsheet',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
