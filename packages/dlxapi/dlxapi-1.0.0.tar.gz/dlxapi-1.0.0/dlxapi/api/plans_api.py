# coding: utf-8

"""
    Decision Lens API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from dlxapi.api_client import ApiClient


class PlansApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def export_whats_in(self, portfolio_id, portfolio_plan_ids, export_format, start_date, end_date, **kwargs):  # noqa: E501
        """Export Whats In Comparison  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.export_whats_in(portfolio_id, portfolio_plan_ids, export_format, start_date, end_date, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str portfolio_id: portfolioId (required)
        :param str portfolio_plan_ids: portfolioPlanIds to be exported (required)
        :param object export_format: export format type (XLSX) (required)
        :param int start_date: Start time period for which the grades are computed for. (required)
        :param int end_date: End time period for which the grades are computed for. (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.export_whats_in_with_http_info(portfolio_id, portfolio_plan_ids, export_format, start_date, end_date, **kwargs)  # noqa: E501
        else:
            (data) = self.export_whats_in_with_http_info(portfolio_id, portfolio_plan_ids, export_format, start_date, end_date, **kwargs)  # noqa: E501
            return data

    def export_whats_in_with_http_info(self, portfolio_id, portfolio_plan_ids, export_format, start_date, end_date, **kwargs):  # noqa: E501
        """Export Whats In Comparison  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.export_whats_in_with_http_info(portfolio_id, portfolio_plan_ids, export_format, start_date, end_date, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str portfolio_id: portfolioId (required)
        :param str portfolio_plan_ids: portfolioPlanIds to be exported (required)
        :param object export_format: export format type (XLSX) (required)
        :param int start_date: Start time period for which the grades are computed for. (required)
        :param int end_date: End time period for which the grades are computed for. (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['portfolio_id', 'portfolio_plan_ids', 'export_format', 'start_date', 'end_date']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method export_whats_in" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'portfolio_id' is set
        if self.api_client.client_side_validation and ('portfolio_id' not in params or
                                                       params['portfolio_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `portfolio_id` when calling `export_whats_in`")  # noqa: E501
        # verify the required parameter 'portfolio_plan_ids' is set
        if self.api_client.client_side_validation and ('portfolio_plan_ids' not in params or
                                                       params['portfolio_plan_ids'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `portfolio_plan_ids` when calling `export_whats_in`")  # noqa: E501
        # verify the required parameter 'export_format' is set
        if self.api_client.client_side_validation and ('export_format' not in params or
                                                       params['export_format'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `export_format` when calling `export_whats_in`")  # noqa: E501
        # verify the required parameter 'start_date' is set
        if self.api_client.client_side_validation and ('start_date' not in params or
                                                       params['start_date'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `start_date` when calling `export_whats_in`")  # noqa: E501
        # verify the required parameter 'end_date' is set
        if self.api_client.client_side_validation and ('end_date' not in params or
                                                       params['end_date'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `end_date` when calling `export_whats_in`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'portfolio_id' in params:
            query_params.append(('portfolioId', params['portfolio_id']))  # noqa: E501
        if 'portfolio_plan_ids' in params:
            query_params.append(('portfolioPlanIds', params['portfolio_plan_ids']))  # noqa: E501
        if 'export_format' in params:
            query_params.append(('exportFormat', params['export_format']))  # noqa: E501
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/portfolioPlans/whatsin/export', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_grades_for_portfolio_plan(self, id, **kwargs):  # noqa: E501
        """Retrieves grades for portfolio plan.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_grades_for_portfolio_plan(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Portfolio Plan id (required)
        :param int start_date: Start time period for which the grades are computed for.
        :param int end_date: End time period for which the grades are computed for.
        :param bool generate_report: Generates grades report. Default is false.
        :return: PortfolioPlanGrades
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_grades_for_portfolio_plan_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_grades_for_portfolio_plan_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_grades_for_portfolio_plan_with_http_info(self, id, **kwargs):  # noqa: E501
        """Retrieves grades for portfolio plan.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_grades_for_portfolio_plan_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Portfolio Plan id (required)
        :param int start_date: Start time period for which the grades are computed for.
        :param int end_date: End time period for which the grades are computed for.
        :param bool generate_report: Generates grades report. Default is false.
        :return: PortfolioPlanGrades
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'start_date', 'end_date', 'generate_report']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_grades_for_portfolio_plan" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `get_grades_for_portfolio_plan`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'generate_report' in params:
            query_params.append(('generateReport', params['generate_report']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/portfolioPlans/{id}/grades', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PortfolioPlanGrades',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_insights_for_portfolio_plan(self, id, start_date, end_date, **kwargs):  # noqa: E501
        """Retrieves insights for portfolio plan.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_insights_for_portfolio_plan(id, start_date, end_date, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Portfolio Plan id (required)
        :param int start_date: Start time period for which the grades are computed for. (required)
        :param int end_date: End time period for which the grades are computed for. (required)
        :return: PortfolioPlanInsights
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_insights_for_portfolio_plan_with_http_info(id, start_date, end_date, **kwargs)  # noqa: E501
        else:
            (data) = self.get_insights_for_portfolio_plan_with_http_info(id, start_date, end_date, **kwargs)  # noqa: E501
            return data

    def get_insights_for_portfolio_plan_with_http_info(self, id, start_date, end_date, **kwargs):  # noqa: E501
        """Retrieves insights for portfolio plan.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_insights_for_portfolio_plan_with_http_info(id, start_date, end_date, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Portfolio Plan id (required)
        :param int start_date: Start time period for which the grades are computed for. (required)
        :param int end_date: End time period for which the grades are computed for. (required)
        :return: PortfolioPlanInsights
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'start_date', 'end_date']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_insights_for_portfolio_plan" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `get_insights_for_portfolio_plan`")  # noqa: E501
        # verify the required parameter 'start_date' is set
        if self.api_client.client_side_validation and ('start_date' not in params or
                                                       params['start_date'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `start_date` when calling `get_insights_for_portfolio_plan`")  # noqa: E501
        # verify the required parameter 'end_date' is set
        if self.api_client.client_side_validation and ('end_date' not in params or
                                                       params['end_date'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `end_date` when calling `get_insights_for_portfolio_plan`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/portfolioPlans/{id}/insights', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PortfolioPlanInsights',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_value_insights_for_portfolio_plan(self, id, start_date, end_date, **kwargs):  # noqa: E501
        """Retrieves value insights for portfolio plan.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_value_insights_for_portfolio_plan(id, start_date, end_date, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Portfolio Plan id (required)
        :param int start_date: Start time period for which the grades are computed for. (required)
        :param int end_date: End time period for which the grades are computed for. (required)
        :return: PortfolioPlanInsights
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_value_insights_for_portfolio_plan_with_http_info(id, start_date, end_date, **kwargs)  # noqa: E501
        else:
            (data) = self.get_value_insights_for_portfolio_plan_with_http_info(id, start_date, end_date, **kwargs)  # noqa: E501
            return data

    def get_value_insights_for_portfolio_plan_with_http_info(self, id, start_date, end_date, **kwargs):  # noqa: E501
        """Retrieves value insights for portfolio plan.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_value_insights_for_portfolio_plan_with_http_info(id, start_date, end_date, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Portfolio Plan id (required)
        :param int start_date: Start time period for which the grades are computed for. (required)
        :param int end_date: End time period for which the grades are computed for. (required)
        :return: PortfolioPlanInsights
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'start_date', 'end_date']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_value_insights_for_portfolio_plan" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `get_value_insights_for_portfolio_plan`")  # noqa: E501
        # verify the required parameter 'start_date' is set
        if self.api_client.client_side_validation and ('start_date' not in params or
                                                       params['start_date'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `start_date` when calling `get_value_insights_for_portfolio_plan`")  # noqa: E501
        # verify the required parameter 'end_date' is set
        if self.api_client.client_side_validation and ('end_date' not in params or
                                                       params['end_date'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `end_date` when calling `get_value_insights_for_portfolio_plan`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/portfolioPlans/{id}/insights/value', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PortfolioPlanInsights',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_whats_in(self, portfolio_id, portfolio_plan_ids, start_date, end_date, max_limit, **kwargs):  # noqa: E501
        """Retrieves portfolioPlans with projects for WhatsIn  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_whats_in(portfolio_id, portfolio_plan_ids, start_date, end_date, max_limit, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str portfolio_id: portfolioId (required)
        :param str portfolio_plan_ids: portfolioPlanIds for which projects are returned (required)
        :param int start_date: Start time period for which the grades are computed for. (required)
        :param int end_date: End time period for which the grades are computed for. (required)
        :param int max_limit: Maximum limit for project; 0 < number of returned project(is variable, NOT fixed) < maxLimit (required)
        :param int offset: Pagination offset
        :return: WhatsIn
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_whats_in_with_http_info(portfolio_id, portfolio_plan_ids, start_date, end_date, max_limit, **kwargs)  # noqa: E501
        else:
            (data) = self.get_whats_in_with_http_info(portfolio_id, portfolio_plan_ids, start_date, end_date, max_limit, **kwargs)  # noqa: E501
            return data

    def get_whats_in_with_http_info(self, portfolio_id, portfolio_plan_ids, start_date, end_date, max_limit, **kwargs):  # noqa: E501
        """Retrieves portfolioPlans with projects for WhatsIn  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_whats_in_with_http_info(portfolio_id, portfolio_plan_ids, start_date, end_date, max_limit, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str portfolio_id: portfolioId (required)
        :param str portfolio_plan_ids: portfolioPlanIds for which projects are returned (required)
        :param int start_date: Start time period for which the grades are computed for. (required)
        :param int end_date: End time period for which the grades are computed for. (required)
        :param int max_limit: Maximum limit for project; 0 < number of returned project(is variable, NOT fixed) < maxLimit (required)
        :param int offset: Pagination offset
        :return: WhatsIn
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['portfolio_id', 'portfolio_plan_ids', 'start_date', 'end_date', 'max_limit', 'offset']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_whats_in" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'portfolio_id' is set
        if self.api_client.client_side_validation and ('portfolio_id' not in params or
                                                       params['portfolio_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `portfolio_id` when calling `get_whats_in`")  # noqa: E501
        # verify the required parameter 'portfolio_plan_ids' is set
        if self.api_client.client_side_validation and ('portfolio_plan_ids' not in params or
                                                       params['portfolio_plan_ids'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `portfolio_plan_ids` when calling `get_whats_in`")  # noqa: E501
        # verify the required parameter 'start_date' is set
        if self.api_client.client_side_validation and ('start_date' not in params or
                                                       params['start_date'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `start_date` when calling `get_whats_in`")  # noqa: E501
        # verify the required parameter 'end_date' is set
        if self.api_client.client_side_validation and ('end_date' not in params or
                                                       params['end_date'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `end_date` when calling `get_whats_in`")  # noqa: E501
        # verify the required parameter 'max_limit' is set
        if self.api_client.client_side_validation and ('max_limit' not in params or
                                                       params['max_limit'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `max_limit` when calling `get_whats_in`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'portfolio_id' in params:
            query_params.append(('portfolioId', params['portfolio_id']))  # noqa: E501
        if 'portfolio_plan_ids' in params:
            query_params.append(('portfolioPlanIds', params['portfolio_plan_ids']))  # noqa: E501
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'max_limit' in params:
            query_params.append(('maxLimit', params['max_limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/portfolioPlans/whatsin', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WhatsIn',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
