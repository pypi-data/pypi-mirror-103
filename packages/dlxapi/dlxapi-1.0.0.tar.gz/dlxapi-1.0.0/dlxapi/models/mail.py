# coding: utf-8

"""
    Decision Lens API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from dlxapi.configuration import Configuration


class Mail(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        '_from': 'str',
        'reply_to': 'str',
        'reply_to_display_name': 'str',
        'to': 'list[str]',
        'cc': 'list[str]',
        'bcc': 'list[str]',
        'subject': 'str',
        'message': 'str',
        'template_name': 'str',
        'template_properties': 'list[TemplateProperty]'
    }

    attribute_map = {
        '_from': 'from',
        'reply_to': 'replyTo',
        'reply_to_display_name': 'replyToDisplayName',
        'to': 'to',
        'cc': 'cc',
        'bcc': 'bcc',
        'subject': 'subject',
        'message': 'message',
        'template_name': 'templateName',
        'template_properties': 'templateProperties'
    }

    def __init__(self, _from=None, reply_to=None, reply_to_display_name=None, to=None, cc=None, bcc=None, subject=None, message=None, template_name=None, template_properties=None, _configuration=None):  # noqa: E501
        """Mail - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self.__from = None
        self._reply_to = None
        self._reply_to_display_name = None
        self._to = None
        self._cc = None
        self._bcc = None
        self._subject = None
        self._message = None
        self._template_name = None
        self._template_properties = None
        self.discriminator = None

        if _from is not None:
            self._from = _from
        if reply_to is not None:
            self.reply_to = reply_to
        if reply_to_display_name is not None:
            self.reply_to_display_name = reply_to_display_name
        if to is not None:
            self.to = to
        if cc is not None:
            self.cc = cc
        if bcc is not None:
            self.bcc = bcc
        if subject is not None:
            self.subject = subject
        if message is not None:
            self.message = message
        if template_name is not None:
            self.template_name = template_name
        if template_properties is not None:
            self.template_properties = template_properties

    @property
    def _from(self):
        """Gets the _from of this Mail.  # noqa: E501


        :return: The _from of this Mail.  # noqa: E501
        :rtype: str
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this Mail.


        :param _from: The _from of this Mail.  # noqa: E501
        :type: str
        """

        self.__from = _from

    @property
    def reply_to(self):
        """Gets the reply_to of this Mail.  # noqa: E501


        :return: The reply_to of this Mail.  # noqa: E501
        :rtype: str
        """
        return self._reply_to

    @reply_to.setter
    def reply_to(self, reply_to):
        """Sets the reply_to of this Mail.


        :param reply_to: The reply_to of this Mail.  # noqa: E501
        :type: str
        """

        self._reply_to = reply_to

    @property
    def reply_to_display_name(self):
        """Gets the reply_to_display_name of this Mail.  # noqa: E501


        :return: The reply_to_display_name of this Mail.  # noqa: E501
        :rtype: str
        """
        return self._reply_to_display_name

    @reply_to_display_name.setter
    def reply_to_display_name(self, reply_to_display_name):
        """Sets the reply_to_display_name of this Mail.


        :param reply_to_display_name: The reply_to_display_name of this Mail.  # noqa: E501
        :type: str
        """

        self._reply_to_display_name = reply_to_display_name

    @property
    def to(self):
        """Gets the to of this Mail.  # noqa: E501


        :return: The to of this Mail.  # noqa: E501
        :rtype: list[str]
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this Mail.


        :param to: The to of this Mail.  # noqa: E501
        :type: list[str]
        """

        self._to = to

    @property
    def cc(self):
        """Gets the cc of this Mail.  # noqa: E501


        :return: The cc of this Mail.  # noqa: E501
        :rtype: list[str]
        """
        return self._cc

    @cc.setter
    def cc(self, cc):
        """Sets the cc of this Mail.


        :param cc: The cc of this Mail.  # noqa: E501
        :type: list[str]
        """

        self._cc = cc

    @property
    def bcc(self):
        """Gets the bcc of this Mail.  # noqa: E501


        :return: The bcc of this Mail.  # noqa: E501
        :rtype: list[str]
        """
        return self._bcc

    @bcc.setter
    def bcc(self, bcc):
        """Sets the bcc of this Mail.


        :param bcc: The bcc of this Mail.  # noqa: E501
        :type: list[str]
        """

        self._bcc = bcc

    @property
    def subject(self):
        """Gets the subject of this Mail.  # noqa: E501


        :return: The subject of this Mail.  # noqa: E501
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this Mail.


        :param subject: The subject of this Mail.  # noqa: E501
        :type: str
        """

        self._subject = subject

    @property
    def message(self):
        """Gets the message of this Mail.  # noqa: E501


        :return: The message of this Mail.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this Mail.


        :param message: The message of this Mail.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def template_name(self):
        """Gets the template_name of this Mail.  # noqa: E501


        :return: The template_name of this Mail.  # noqa: E501
        :rtype: str
        """
        return self._template_name

    @template_name.setter
    def template_name(self, template_name):
        """Sets the template_name of this Mail.


        :param template_name: The template_name of this Mail.  # noqa: E501
        :type: str
        """

        self._template_name = template_name

    @property
    def template_properties(self):
        """Gets the template_properties of this Mail.  # noqa: E501


        :return: The template_properties of this Mail.  # noqa: E501
        :rtype: list[TemplateProperty]
        """
        return self._template_properties

    @template_properties.setter
    def template_properties(self, template_properties):
        """Sets the template_properties of this Mail.


        :param template_properties: The template_properties of this Mail.  # noqa: E501
        :type: list[TemplateProperty]
        """

        self._template_properties = template_properties

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Mail, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Mail):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Mail):
            return True

        return self.to_dict() != other.to_dict()
