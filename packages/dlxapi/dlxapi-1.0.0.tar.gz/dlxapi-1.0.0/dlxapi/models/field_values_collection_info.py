# coding: utf-8

"""
    Decision Lens API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from dlxapi.configuration import Configuration


class FieldValuesCollectionInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'has_duplicate_values': 'bool',
        'has_blank_values': 'bool',
        'total_value': 'float',
        'balance_uniqueness_exceeded': 'bool'
    }

    attribute_map = {
        'has_duplicate_values': 'hasDuplicateValues',
        'has_blank_values': 'hasBlankValues',
        'total_value': 'totalValue',
        'balance_uniqueness_exceeded': 'balanceUniquenessExceeded'
    }

    def __init__(self, has_duplicate_values=None, has_blank_values=None, total_value=None, balance_uniqueness_exceeded=None, _configuration=None):  # noqa: E501
        """FieldValuesCollectionInfo - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._has_duplicate_values = None
        self._has_blank_values = None
        self._total_value = None
        self._balance_uniqueness_exceeded = None
        self.discriminator = None

        if has_duplicate_values is not None:
            self.has_duplicate_values = has_duplicate_values
        if has_blank_values is not None:
            self.has_blank_values = has_blank_values
        if total_value is not None:
            self.total_value = total_value
        if balance_uniqueness_exceeded is not None:
            self.balance_uniqueness_exceeded = balance_uniqueness_exceeded

    @property
    def has_duplicate_values(self):
        """Gets the has_duplicate_values of this FieldValuesCollectionInfo.  # noqa: E501


        :return: The has_duplicate_values of this FieldValuesCollectionInfo.  # noqa: E501
        :rtype: bool
        """
        return self._has_duplicate_values

    @has_duplicate_values.setter
    def has_duplicate_values(self, has_duplicate_values):
        """Sets the has_duplicate_values of this FieldValuesCollectionInfo.


        :param has_duplicate_values: The has_duplicate_values of this FieldValuesCollectionInfo.  # noqa: E501
        :type: bool
        """

        self._has_duplicate_values = has_duplicate_values

    @property
    def has_blank_values(self):
        """Gets the has_blank_values of this FieldValuesCollectionInfo.  # noqa: E501


        :return: The has_blank_values of this FieldValuesCollectionInfo.  # noqa: E501
        :rtype: bool
        """
        return self._has_blank_values

    @has_blank_values.setter
    def has_blank_values(self, has_blank_values):
        """Sets the has_blank_values of this FieldValuesCollectionInfo.


        :param has_blank_values: The has_blank_values of this FieldValuesCollectionInfo.  # noqa: E501
        :type: bool
        """

        self._has_blank_values = has_blank_values

    @property
    def total_value(self):
        """Gets the total_value of this FieldValuesCollectionInfo.  # noqa: E501


        :return: The total_value of this FieldValuesCollectionInfo.  # noqa: E501
        :rtype: float
        """
        return self._total_value

    @total_value.setter
    def total_value(self, total_value):
        """Sets the total_value of this FieldValuesCollectionInfo.


        :param total_value: The total_value of this FieldValuesCollectionInfo.  # noqa: E501
        :type: float
        """

        self._total_value = total_value

    @property
    def balance_uniqueness_exceeded(self):
        """Gets the balance_uniqueness_exceeded of this FieldValuesCollectionInfo.  # noqa: E501


        :return: The balance_uniqueness_exceeded of this FieldValuesCollectionInfo.  # noqa: E501
        :rtype: bool
        """
        return self._balance_uniqueness_exceeded

    @balance_uniqueness_exceeded.setter
    def balance_uniqueness_exceeded(self, balance_uniqueness_exceeded):
        """Sets the balance_uniqueness_exceeded of this FieldValuesCollectionInfo.


        :param balance_uniqueness_exceeded: The balance_uniqueness_exceeded of this FieldValuesCollectionInfo.  # noqa: E501
        :type: bool
        """

        self._balance_uniqueness_exceeded = balance_uniqueness_exceeded

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FieldValuesCollectionInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FieldValuesCollectionInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FieldValuesCollectionInfo):
            return True

        return self.to_dict() != other.to_dict()
