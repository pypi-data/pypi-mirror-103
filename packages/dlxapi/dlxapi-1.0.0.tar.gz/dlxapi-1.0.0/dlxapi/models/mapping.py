# coding: utf-8

"""
    Decision Lens API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from dlxapi.configuration import Configuration


class Mapping(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'original_name': 'str',
        'type': 'FieldType',
        'target_type': 'TargetType',
        'data_type': 'DataType',
        'position': 'int',
        'values': 'list[str]',
        'numeric_values': 'list[float]',
        'boolean_values': 'list[bool]',
        'time_period': 'TimePeriod'
    }

    attribute_map = {
        'name': 'name',
        'original_name': 'originalName',
        'type': 'type',
        'target_type': 'targetType',
        'data_type': 'dataType',
        'position': 'position',
        'values': 'values',
        'numeric_values': 'numericValues',
        'boolean_values': 'booleanValues',
        'time_period': 'timePeriod'
    }

    def __init__(self, name=None, original_name=None, type=None, target_type=None, data_type=None, position=None, values=None, numeric_values=None, boolean_values=None, time_period=None, _configuration=None):  # noqa: E501
        """Mapping - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._name = None
        self._original_name = None
        self._type = None
        self._target_type = None
        self._data_type = None
        self._position = None
        self._values = None
        self._numeric_values = None
        self._boolean_values = None
        self._time_period = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if original_name is not None:
            self.original_name = original_name
        if type is not None:
            self.type = type
        if target_type is not None:
            self.target_type = target_type
        if data_type is not None:
            self.data_type = data_type
        if position is not None:
            self.position = position
        if values is not None:
            self.values = values
        if numeric_values is not None:
            self.numeric_values = numeric_values
        if boolean_values is not None:
            self.boolean_values = boolean_values
        if time_period is not None:
            self.time_period = time_period

    @property
    def name(self):
        """Gets the name of this Mapping.  # noqa: E501


        :return: The name of this Mapping.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Mapping.


        :param name: The name of this Mapping.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def original_name(self):
        """Gets the original_name of this Mapping.  # noqa: E501


        :return: The original_name of this Mapping.  # noqa: E501
        :rtype: str
        """
        return self._original_name

    @original_name.setter
    def original_name(self, original_name):
        """Sets the original_name of this Mapping.


        :param original_name: The original_name of this Mapping.  # noqa: E501
        :type: str
        """

        self._original_name = original_name

    @property
    def type(self):
        """Gets the type of this Mapping.  # noqa: E501


        :return: The type of this Mapping.  # noqa: E501
        :rtype: FieldType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Mapping.


        :param type: The type of this Mapping.  # noqa: E501
        :type: FieldType
        """

        self._type = type

    @property
    def target_type(self):
        """Gets the target_type of this Mapping.  # noqa: E501


        :return: The target_type of this Mapping.  # noqa: E501
        :rtype: TargetType
        """
        return self._target_type

    @target_type.setter
    def target_type(self, target_type):
        """Sets the target_type of this Mapping.


        :param target_type: The target_type of this Mapping.  # noqa: E501
        :type: TargetType
        """

        self._target_type = target_type

    @property
    def data_type(self):
        """Gets the data_type of this Mapping.  # noqa: E501


        :return: The data_type of this Mapping.  # noqa: E501
        :rtype: DataType
        """
        return self._data_type

    @data_type.setter
    def data_type(self, data_type):
        """Sets the data_type of this Mapping.


        :param data_type: The data_type of this Mapping.  # noqa: E501
        :type: DataType
        """

        self._data_type = data_type

    @property
    def position(self):
        """Gets the position of this Mapping.  # noqa: E501


        :return: The position of this Mapping.  # noqa: E501
        :rtype: int
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this Mapping.


        :param position: The position of this Mapping.  # noqa: E501
        :type: int
        """

        self._position = position

    @property
    def values(self):
        """Gets the values of this Mapping.  # noqa: E501


        :return: The values of this Mapping.  # noqa: E501
        :rtype: list[str]
        """
        return self._values

    @values.setter
    def values(self, values):
        """Sets the values of this Mapping.


        :param values: The values of this Mapping.  # noqa: E501
        :type: list[str]
        """

        self._values = values

    @property
    def numeric_values(self):
        """Gets the numeric_values of this Mapping.  # noqa: E501


        :return: The numeric_values of this Mapping.  # noqa: E501
        :rtype: list[float]
        """
        return self._numeric_values

    @numeric_values.setter
    def numeric_values(self, numeric_values):
        """Sets the numeric_values of this Mapping.


        :param numeric_values: The numeric_values of this Mapping.  # noqa: E501
        :type: list[float]
        """

        self._numeric_values = numeric_values

    @property
    def boolean_values(self):
        """Gets the boolean_values of this Mapping.  # noqa: E501


        :return: The boolean_values of this Mapping.  # noqa: E501
        :rtype: list[bool]
        """
        return self._boolean_values

    @boolean_values.setter
    def boolean_values(self, boolean_values):
        """Sets the boolean_values of this Mapping.


        :param boolean_values: The boolean_values of this Mapping.  # noqa: E501
        :type: list[bool]
        """

        self._boolean_values = boolean_values

    @property
    def time_period(self):
        """Gets the time_period of this Mapping.  # noqa: E501


        :return: The time_period of this Mapping.  # noqa: E501
        :rtype: TimePeriod
        """
        return self._time_period

    @time_period.setter
    def time_period(self, time_period):
        """Sets the time_period of this Mapping.


        :param time_period: The time_period of this Mapping.  # noqa: E501
        :type: TimePeriod
        """

        self._time_period = time_period

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Mapping, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Mapping):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Mapping):
            return True

        return self.to_dict() != other.to_dict()
