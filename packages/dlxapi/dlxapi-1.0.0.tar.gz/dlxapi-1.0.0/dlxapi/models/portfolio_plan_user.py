# coding: utf-8

"""
    Decision Lens API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from dlxapi.configuration import Configuration


class PortfolioPlanUser(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'user': 'User',
        'portfolio_plan': 'PortfolioPlan',
        'roles': 'list[PortfolioPlanUserRole]',
        'field_permissions': 'Permissions',
        'project_permissions': 'Permissions'
    }

    attribute_map = {
        'user': 'user',
        'portfolio_plan': 'portfolioPlan',
        'roles': 'roles',
        'field_permissions': 'fieldPermissions',
        'project_permissions': 'projectPermissions'
    }

    def __init__(self, user=None, portfolio_plan=None, roles=None, field_permissions=None, project_permissions=None, _configuration=None):  # noqa: E501
        """PortfolioPlanUser - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._user = None
        self._portfolio_plan = None
        self._roles = None
        self._field_permissions = None
        self._project_permissions = None
        self.discriminator = None

        self.user = user
        if portfolio_plan is not None:
            self.portfolio_plan = portfolio_plan
        if roles is not None:
            self.roles = roles
        if field_permissions is not None:
            self.field_permissions = field_permissions
        if project_permissions is not None:
            self.project_permissions = project_permissions

    @property
    def user(self):
        """Gets the user of this PortfolioPlanUser.  # noqa: E501


        :return: The user of this PortfolioPlanUser.  # noqa: E501
        :rtype: User
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this PortfolioPlanUser.


        :param user: The user of this PortfolioPlanUser.  # noqa: E501
        :type: User
        """
        if self._configuration.client_side_validation and user is None:
            raise ValueError("Invalid value for `user`, must not be `None`")  # noqa: E501

        self._user = user

    @property
    def portfolio_plan(self):
        """Gets the portfolio_plan of this PortfolioPlanUser.  # noqa: E501


        :return: The portfolio_plan of this PortfolioPlanUser.  # noqa: E501
        :rtype: PortfolioPlan
        """
        return self._portfolio_plan

    @portfolio_plan.setter
    def portfolio_plan(self, portfolio_plan):
        """Sets the portfolio_plan of this PortfolioPlanUser.


        :param portfolio_plan: The portfolio_plan of this PortfolioPlanUser.  # noqa: E501
        :type: PortfolioPlan
        """

        self._portfolio_plan = portfolio_plan

    @property
    def roles(self):
        """Gets the roles of this PortfolioPlanUser.  # noqa: E501


        :return: The roles of this PortfolioPlanUser.  # noqa: E501
        :rtype: list[PortfolioPlanUserRole]
        """
        return self._roles

    @roles.setter
    def roles(self, roles):
        """Sets the roles of this PortfolioPlanUser.


        :param roles: The roles of this PortfolioPlanUser.  # noqa: E501
        :type: list[PortfolioPlanUserRole]
        """

        self._roles = roles

    @property
    def field_permissions(self):
        """Gets the field_permissions of this PortfolioPlanUser.  # noqa: E501


        :return: The field_permissions of this PortfolioPlanUser.  # noqa: E501
        :rtype: Permissions
        """
        return self._field_permissions

    @field_permissions.setter
    def field_permissions(self, field_permissions):
        """Sets the field_permissions of this PortfolioPlanUser.


        :param field_permissions: The field_permissions of this PortfolioPlanUser.  # noqa: E501
        :type: Permissions
        """

        self._field_permissions = field_permissions

    @property
    def project_permissions(self):
        """Gets the project_permissions of this PortfolioPlanUser.  # noqa: E501


        :return: The project_permissions of this PortfolioPlanUser.  # noqa: E501
        :rtype: Permissions
        """
        return self._project_permissions

    @project_permissions.setter
    def project_permissions(self, project_permissions):
        """Sets the project_permissions of this PortfolioPlanUser.


        :param project_permissions: The project_permissions of this PortfolioPlanUser.  # noqa: E501
        :type: Permissions
        """

        self._project_permissions = project_permissions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PortfolioPlanUser, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PortfolioPlanUser):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PortfolioPlanUser):
            return True

        return self.to_dict() != other.to_dict()
