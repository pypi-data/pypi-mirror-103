# coding: utf-8

"""
    Decision Lens API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from dlxapi.configuration import Configuration


class FieldGrade(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'field': 'Field',
        'grade': 'Grade',
        'min': 'float',
        'max': 'float',
        'current': 'float',
        'grading_boundaries': 'list[float]',
        'balance_field_details': 'list[BalanceFieldDetail]',
        'risk_field_details': 'list[RiskFieldDetail]'
    }

    attribute_map = {
        'field': 'field',
        'grade': 'grade',
        'min': 'min',
        'max': 'max',
        'current': 'current',
        'grading_boundaries': 'gradingBoundaries',
        'balance_field_details': 'balanceFieldDetails',
        'risk_field_details': 'riskFieldDetails'
    }

    def __init__(self, field=None, grade=None, min=0.0, max=0.0, current=0.0, grading_boundaries=None, balance_field_details=None, risk_field_details=None, _configuration=None):  # noqa: E501
        """FieldGrade - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._field = None
        self._grade = None
        self._min = None
        self._max = None
        self._current = None
        self._grading_boundaries = None
        self._balance_field_details = None
        self._risk_field_details = None
        self.discriminator = None

        if field is not None:
            self.field = field
        if grade is not None:
            self.grade = grade
        if min is not None:
            self.min = min
        if max is not None:
            self.max = max
        if current is not None:
            self.current = current
        if grading_boundaries is not None:
            self.grading_boundaries = grading_boundaries
        if balance_field_details is not None:
            self.balance_field_details = balance_field_details
        if risk_field_details is not None:
            self.risk_field_details = risk_field_details

    @property
    def field(self):
        """Gets the field of this FieldGrade.  # noqa: E501


        :return: The field of this FieldGrade.  # noqa: E501
        :rtype: Field
        """
        return self._field

    @field.setter
    def field(self, field):
        """Sets the field of this FieldGrade.


        :param field: The field of this FieldGrade.  # noqa: E501
        :type: Field
        """

        self._field = field

    @property
    def grade(self):
        """Gets the grade of this FieldGrade.  # noqa: E501


        :return: The grade of this FieldGrade.  # noqa: E501
        :rtype: Grade
        """
        return self._grade

    @grade.setter
    def grade(self, grade):
        """Sets the grade of this FieldGrade.


        :param grade: The grade of this FieldGrade.  # noqa: E501
        :type: Grade
        """

        self._grade = grade

    @property
    def min(self):
        """Gets the min of this FieldGrade.  # noqa: E501


        :return: The min of this FieldGrade.  # noqa: E501
        :rtype: float
        """
        return self._min

    @min.setter
    def min(self, min):
        """Sets the min of this FieldGrade.


        :param min: The min of this FieldGrade.  # noqa: E501
        :type: float
        """

        self._min = min

    @property
    def max(self):
        """Gets the max of this FieldGrade.  # noqa: E501


        :return: The max of this FieldGrade.  # noqa: E501
        :rtype: float
        """
        return self._max

    @max.setter
    def max(self, max):
        """Sets the max of this FieldGrade.


        :param max: The max of this FieldGrade.  # noqa: E501
        :type: float
        """

        self._max = max

    @property
    def current(self):
        """Gets the current of this FieldGrade.  # noqa: E501


        :return: The current of this FieldGrade.  # noqa: E501
        :rtype: float
        """
        return self._current

    @current.setter
    def current(self, current):
        """Sets the current of this FieldGrade.


        :param current: The current of this FieldGrade.  # noqa: E501
        :type: float
        """

        self._current = current

    @property
    def grading_boundaries(self):
        """Gets the grading_boundaries of this FieldGrade.  # noqa: E501


        :return: The grading_boundaries of this FieldGrade.  # noqa: E501
        :rtype: list[float]
        """
        return self._grading_boundaries

    @grading_boundaries.setter
    def grading_boundaries(self, grading_boundaries):
        """Sets the grading_boundaries of this FieldGrade.


        :param grading_boundaries: The grading_boundaries of this FieldGrade.  # noqa: E501
        :type: list[float]
        """

        self._grading_boundaries = grading_boundaries

    @property
    def balance_field_details(self):
        """Gets the balance_field_details of this FieldGrade.  # noqa: E501


        :return: The balance_field_details of this FieldGrade.  # noqa: E501
        :rtype: list[BalanceFieldDetail]
        """
        return self._balance_field_details

    @balance_field_details.setter
    def balance_field_details(self, balance_field_details):
        """Sets the balance_field_details of this FieldGrade.


        :param balance_field_details: The balance_field_details of this FieldGrade.  # noqa: E501
        :type: list[BalanceFieldDetail]
        """

        self._balance_field_details = balance_field_details

    @property
    def risk_field_details(self):
        """Gets the risk_field_details of this FieldGrade.  # noqa: E501


        :return: The risk_field_details of this FieldGrade.  # noqa: E501
        :rtype: list[RiskFieldDetail]
        """
        return self._risk_field_details

    @risk_field_details.setter
    def risk_field_details(self, risk_field_details):
        """Sets the risk_field_details of this FieldGrade.


        :param risk_field_details: The risk_field_details of this FieldGrade.  # noqa: E501
        :type: list[RiskFieldDetail]
        """

        self._risk_field_details = risk_field_details

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FieldGrade, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FieldGrade):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FieldGrade):
            return True

        return self.to_dict() != other.to_dict()
