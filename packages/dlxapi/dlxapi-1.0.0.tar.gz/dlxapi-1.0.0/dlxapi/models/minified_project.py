# coding: utf-8

"""
    Decision Lens API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from dlxapi.configuration import Configuration


class MinifiedProject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'n': 'str',
        'pos': 'int',
        'mt': 'int',
        'fvs': 'dict(str, MinifiedFieldValue)',
        'cus': 'list[str]',
        'hdi': 'list[str]',
        'doi': 'list[str]'
    }

    attribute_map = {
        'id': 'id',
        'n': 'n',
        'pos': 'pos',
        'mt': 'mt',
        'fvs': 'fvs',
        'cus': 'cus',
        'hdi': 'hdi',
        'doi': 'doi'
    }

    def __init__(self, id=None, n=None, pos=None, mt=None, fvs=None, cus=None, hdi=None, doi=None, _configuration=None):  # noqa: E501
        """MinifiedProject - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._n = None
        self._pos = None
        self._mt = None
        self._fvs = None
        self._cus = None
        self._hdi = None
        self._doi = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if n is not None:
            self.n = n
        if pos is not None:
            self.pos = pos
        if mt is not None:
            self.mt = mt
        if fvs is not None:
            self.fvs = fvs
        if cus is not None:
            self.cus = cus
        if hdi is not None:
            self.hdi = hdi
        if doi is not None:
            self.doi = doi

    @property
    def id(self):
        """Gets the id of this MinifiedProject.  # noqa: E501

        project id  # noqa: E501

        :return: The id of this MinifiedProject.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MinifiedProject.

        project id  # noqa: E501

        :param id: The id of this MinifiedProject.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def n(self):
        """Gets the n of this MinifiedProject.  # noqa: E501

        Project name  # noqa: E501

        :return: The n of this MinifiedProject.  # noqa: E501
        :rtype: str
        """
        return self._n

    @n.setter
    def n(self, n):
        """Sets the n of this MinifiedProject.

        Project name  # noqa: E501

        :param n: The n of this MinifiedProject.  # noqa: E501
        :type: str
        """

        self._n = n

    @property
    def pos(self):
        """Gets the pos of this MinifiedProject.  # noqa: E501

        Project position  # noqa: E501

        :return: The pos of this MinifiedProject.  # noqa: E501
        :rtype: int
        """
        return self._pos

    @pos.setter
    def pos(self, pos):
        """Sets the pos of this MinifiedProject.

        Project position  # noqa: E501

        :param pos: The pos of this MinifiedProject.  # noqa: E501
        :type: int
        """

        self._pos = pos

    @property
    def mt(self):
        """Gets the mt of this MinifiedProject.  # noqa: E501

        Project modified time in epoch millis  # noqa: E501

        :return: The mt of this MinifiedProject.  # noqa: E501
        :rtype: int
        """
        return self._mt

    @mt.setter
    def mt(self, mt):
        """Sets the mt of this MinifiedProject.

        Project modified time in epoch millis  # noqa: E501

        :param mt: The mt of this MinifiedProject.  # noqa: E501
        :type: int
        """

        self._mt = mt

    @property
    def fvs(self):
        """Gets the fvs of this MinifiedProject.  # noqa: E501

        Minified field values. Key is field index.  # noqa: E501

        :return: The fvs of this MinifiedProject.  # noqa: E501
        :rtype: dict(str, MinifiedFieldValue)
        """
        return self._fvs

    @fvs.setter
    def fvs(self, fvs):
        """Sets the fvs of this MinifiedProject.

        Minified field values. Key is field index.  # noqa: E501

        :param fvs: The fvs of this MinifiedProject.  # noqa: E501
        :type: dict(str, MinifiedFieldValue)
        """

        self._fvs = fvs

    @property
    def cus(self):
        """Gets the cus of this MinifiedProject.  # noqa: E501

        Contibuting user indices.  # noqa: E501

        :return: The cus of this MinifiedProject.  # noqa: E501
        :rtype: list[str]
        """
        return self._cus

    @cus.setter
    def cus(self, cus):
        """Sets the cus of this MinifiedProject.

        Contibuting user indices.  # noqa: E501

        :param cus: The cus of this MinifiedProject.  # noqa: E501
        :type: list[str]
        """

        self._cus = cus

    @property
    def hdi(self):
        """Gets the hdi of this MinifiedProject.  # noqa: E501

        Has Dependent Ids  # noqa: E501

        :return: The hdi of this MinifiedProject.  # noqa: E501
        :rtype: list[str]
        """
        return self._hdi

    @hdi.setter
    def hdi(self, hdi):
        """Sets the hdi of this MinifiedProject.

        Has Dependent Ids  # noqa: E501

        :param hdi: The hdi of this MinifiedProject.  # noqa: E501
        :type: list[str]
        """

        self._hdi = hdi

    @property
    def doi(self):
        """Gets the doi of this MinifiedProject.  # noqa: E501

        Depends on project ids  # noqa: E501

        :return: The doi of this MinifiedProject.  # noqa: E501
        :rtype: list[str]
        """
        return self._doi

    @doi.setter
    def doi(self, doi):
        """Sets the doi of this MinifiedProject.

        Depends on project ids  # noqa: E501

        :param doi: The doi of this MinifiedProject.  # noqa: E501
        :type: list[str]
        """

        self._doi = doi

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MinifiedProject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MinifiedProject):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MinifiedProject):
            return True

        return self.to_dict() != other.to_dict()
