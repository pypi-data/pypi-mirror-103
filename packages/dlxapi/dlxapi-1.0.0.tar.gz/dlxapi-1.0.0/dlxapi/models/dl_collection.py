# coding: utf-8

"""
    Decision Lens API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from dlxapi.configuration import Configuration


class DlCollection(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'href': 'str',
        'offset': 'int',
        'limit': 'int',
        'size': 'int'
    }

    attribute_map = {
        'href': 'href',
        'offset': 'offset',
        'limit': 'limit',
        'size': 'size'
    }

    discriminator_value_class_map = {
        'Tags': 'Tags',
        'Classifications': 'Classifications',
        'CustomNames': 'CustomNames',
        'Recommendations': 'Recommendations',
        'Groups': 'Groups',
        'FieldValues': 'FieldValues',
        'PortfolioPlanGrades': 'PortfolioPlanGrades',
        'Permissions': 'Permissions',
        'Sheets': 'Sheets',
        'ResourcePoolBudgetAmounts': 'ResourcePoolBudgetAmounts',
        'FieldGrades': 'FieldGrades',
        'Projects': 'Projects',
        'Properties': 'Properties',
        'Attachments': 'Attachments',
        'Activities': 'Activities',
        'Users': 'Users',
        'ValueCounts': 'ValueCounts',
        'PortfolioPlans': 'PortfolioPlans',
        'ResourcePools': 'ResourcePools',
        'PortfolioPlanUsers': 'PortfolioPlanUsers',
        'BudgetAllocations': 'BudgetAllocations',
        'Constraints': 'Constraints',
        'Fields': 'Fields',
        'CategoryOptions': 'CategoryOptions',
        'Portfolios': 'Portfolios',
        'Comments': 'Comments'
    }

    def __init__(self, href=None, offset=None, limit=None, size=0, _configuration=None):  # noqa: E501
        """DlCollection - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._href = None
        self._offset = None
        self._limit = None
        self._size = None
        self.discriminator = 'href'

        if href is not None:
            self.href = href
        if offset is not None:
            self.offset = offset
        if limit is not None:
            self.limit = limit
        if size is not None:
            self.size = size

    @property
    def href(self):
        """Gets the href of this DlCollection.  # noqa: E501


        :return: The href of this DlCollection.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this DlCollection.


        :param href: The href of this DlCollection.  # noqa: E501
        :type: str
        """

        self._href = href

    @property
    def offset(self):
        """Gets the offset of this DlCollection.  # noqa: E501


        :return: The offset of this DlCollection.  # noqa: E501
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this DlCollection.


        :param offset: The offset of this DlCollection.  # noqa: E501
        :type: int
        """

        self._offset = offset

    @property
    def limit(self):
        """Gets the limit of this DlCollection.  # noqa: E501


        :return: The limit of this DlCollection.  # noqa: E501
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this DlCollection.


        :param limit: The limit of this DlCollection.  # noqa: E501
        :type: int
        """

        self._limit = limit

    @property
    def size(self):
        """Gets the size of this DlCollection.  # noqa: E501


        :return: The size of this DlCollection.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this DlCollection.


        :param size: The size of this DlCollection.  # noqa: E501
        :type: int
        """

        self._size = size

    def get_real_child_model(self, data):
        """Returns the real base class specified by the discriminator"""
        discriminator_value = data[self.discriminator].lower()
        return self.discriminator_value_class_map.get(discriminator_value)

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DlCollection, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DlCollection):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DlCollection):
            return True

        return self.to_dict() != other.to_dict()
