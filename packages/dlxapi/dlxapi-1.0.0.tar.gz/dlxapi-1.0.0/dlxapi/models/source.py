# coding: utf-8

"""
    Decision Lens API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from dlxapi.configuration import Configuration


class Source(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'type': 'SourceType',
        'portfolio': 'Portfolio',
        'fields': 'Fields',
        'projects': 'Projects',
        'dlc_portfolio': 'DlcPortfolio'
    }

    attribute_map = {
        'name': 'name',
        'type': 'type',
        'portfolio': 'portfolio',
        'fields': 'fields',
        'projects': 'projects',
        'dlc_portfolio': 'dlcPortfolio'
    }

    def __init__(self, name=None, type=None, portfolio=None, fields=None, projects=None, dlc_portfolio=None, _configuration=None):  # noqa: E501
        """Source - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._name = None
        self._type = None
        self._portfolio = None
        self._fields = None
        self._projects = None
        self._dlc_portfolio = None
        self.discriminator = None

        if name is not None:
            self.name = name
        self.type = type
        if portfolio is not None:
            self.portfolio = portfolio
        if fields is not None:
            self.fields = fields
        if projects is not None:
            self.projects = projects
        if dlc_portfolio is not None:
            self.dlc_portfolio = dlc_portfolio

    @property
    def name(self):
        """Gets the name of this Source.  # noqa: E501


        :return: The name of this Source.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Source.


        :param name: The name of this Source.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def type(self):
        """Gets the type of this Source.  # noqa: E501


        :return: The type of this Source.  # noqa: E501
        :rtype: SourceType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Source.


        :param type: The type of this Source.  # noqa: E501
        :type: SourceType
        """
        if self._configuration.client_side_validation and type is None and False:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def portfolio(self):
        """Gets the portfolio of this Source.  # noqa: E501


        :return: The portfolio of this Source.  # noqa: E501
        :rtype: Portfolio
        """
        return self._portfolio

    @portfolio.setter
    def portfolio(self, portfolio):
        """Sets the portfolio of this Source.


        :param portfolio: The portfolio of this Source.  # noqa: E501
        :type: Portfolio
        """

        self._portfolio = portfolio

    @property
    def fields(self):
        """Gets the fields of this Source.  # noqa: E501


        :return: The fields of this Source.  # noqa: E501
        :rtype: Fields
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """Sets the fields of this Source.


        :param fields: The fields of this Source.  # noqa: E501
        :type: Fields
        """

        self._fields = fields

    @property
    def projects(self):
        """Gets the projects of this Source.  # noqa: E501


        :return: The projects of this Source.  # noqa: E501
        :rtype: Projects
        """
        return self._projects

    @projects.setter
    def projects(self, projects):
        """Sets the projects of this Source.


        :param projects: The projects of this Source.  # noqa: E501
        :type: Projects
        """

        self._projects = projects

    @property
    def dlc_portfolio(self):
        """Gets the dlc_portfolio of this Source.  # noqa: E501


        :return: The dlc_portfolio of this Source.  # noqa: E501
        :rtype: DlcPortfolio
        """
        return self._dlc_portfolio

    @dlc_portfolio.setter
    def dlc_portfolio(self, dlc_portfolio):
        """Sets the dlc_portfolio of this Source.


        :param dlc_portfolio: The dlc_portfolio of this Source.  # noqa: E501
        :type: DlcPortfolio
        """

        self._dlc_portfolio = dlc_portfolio

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Source, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Source):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Source):
            return True

        return self.to_dict() != other.to_dict()
