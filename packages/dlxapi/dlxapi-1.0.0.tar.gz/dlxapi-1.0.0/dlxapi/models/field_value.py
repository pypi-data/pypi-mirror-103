# coding: utf-8

"""
    Decision Lens API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from dlxapi.configuration import Configuration


class FieldValue(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'field': 'Field',
        'project': 'Project',
        'value': 'str',
        'numeric_value': 'float',
        'boolean_value': 'bool',
        'numeric_values': 'list[float]',
        'values': 'list[str]',
        'time_period': 'TimePeriod',
        'details': 'FieldValues',
        'created_at': 'str',
        'modified_at': 'str'
    }

    attribute_map = {
        'field': 'field',
        'project': 'project',
        'value': 'value',
        'numeric_value': 'numericValue',
        'boolean_value': 'booleanValue',
        'numeric_values': 'numericValues',
        'values': 'values',
        'time_period': 'timePeriod',
        'details': 'details',
        'created_at': 'createdAt',
        'modified_at': 'modifiedAt'
    }

    def __init__(self, field=None, project=None, value=None, numeric_value=None, boolean_value=None, numeric_values=None, values=None, time_period=None, details=None, created_at=None, modified_at=None, _configuration=None):  # noqa: E501
        """FieldValue - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._field = None
        self._project = None
        self._value = None
        self._numeric_value = None
        self._boolean_value = None
        self._numeric_values = None
        self._values = None
        self._time_period = None
        self._details = None
        self._created_at = None
        self._modified_at = None
        self.discriminator = None

        if field is not None:
            self.field = field
        if project is not None:
            self.project = project
        if value is not None:
            self.value = value
        if numeric_value is not None:
            self.numeric_value = numeric_value
        if boolean_value is not None:
            self.boolean_value = boolean_value
        if numeric_values is not None:
            self.numeric_values = numeric_values
        if values is not None:
            self.values = values
        if time_period is not None:
            self.time_period = time_period
        if details is not None:
            self.details = details
        if created_at is not None:
            self.created_at = created_at
        if modified_at is not None:
            self.modified_at = modified_at

    @property
    def field(self):
        """Gets the field of this FieldValue.  # noqa: E501


        :return: The field of this FieldValue.  # noqa: E501
        :rtype: Field
        """
        return self._field

    @field.setter
    def field(self, field):
        """Sets the field of this FieldValue.


        :param field: The field of this FieldValue.  # noqa: E501
        :type: Field
        """

        self._field = field

    @property
    def project(self):
        """Gets the project of this FieldValue.  # noqa: E501


        :return: The project of this FieldValue.  # noqa: E501
        :rtype: Project
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this FieldValue.


        :param project: The project of this FieldValue.  # noqa: E501
        :type: Project
        """

        self._project = project

    @property
    def value(self):
        """Gets the value of this FieldValue.  # noqa: E501


        :return: The value of this FieldValue.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this FieldValue.


        :param value: The value of this FieldValue.  # noqa: E501
        :type: str
        """

        self._value = value

    @property
    def numeric_value(self):
        """Gets the numeric_value of this FieldValue.  # noqa: E501


        :return: The numeric_value of this FieldValue.  # noqa: E501
        :rtype: float
        """
        return self._numeric_value

    @numeric_value.setter
    def numeric_value(self, numeric_value):
        """Sets the numeric_value of this FieldValue.


        :param numeric_value: The numeric_value of this FieldValue.  # noqa: E501
        :type: float
        """

        self._numeric_value = numeric_value

    @property
    def boolean_value(self):
        """Gets the boolean_value of this FieldValue.  # noqa: E501


        :return: The boolean_value of this FieldValue.  # noqa: E501
        :rtype: bool
        """
        return self._boolean_value

    @boolean_value.setter
    def boolean_value(self, boolean_value):
        """Sets the boolean_value of this FieldValue.


        :param boolean_value: The boolean_value of this FieldValue.  # noqa: E501
        :type: bool
        """

        self._boolean_value = boolean_value

    @property
    def numeric_values(self):
        """Gets the numeric_values of this FieldValue.  # noqa: E501


        :return: The numeric_values of this FieldValue.  # noqa: E501
        :rtype: list[float]
        """
        return self._numeric_values

    @numeric_values.setter
    def numeric_values(self, numeric_values):
        """Sets the numeric_values of this FieldValue.


        :param numeric_values: The numeric_values of this FieldValue.  # noqa: E501
        :type: list[float]
        """

        self._numeric_values = numeric_values

    @property
    def values(self):
        """Gets the values of this FieldValue.  # noqa: E501


        :return: The values of this FieldValue.  # noqa: E501
        :rtype: list[str]
        """
        return self._values

    @values.setter
    def values(self, values):
        """Sets the values of this FieldValue.


        :param values: The values of this FieldValue.  # noqa: E501
        :type: list[str]
        """

        self._values = values

    @property
    def time_period(self):
        """Gets the time_period of this FieldValue.  # noqa: E501


        :return: The time_period of this FieldValue.  # noqa: E501
        :rtype: TimePeriod
        """
        return self._time_period

    @time_period.setter
    def time_period(self, time_period):
        """Sets the time_period of this FieldValue.


        :param time_period: The time_period of this FieldValue.  # noqa: E501
        :type: TimePeriod
        """

        self._time_period = time_period

    @property
    def details(self):
        """Gets the details of this FieldValue.  # noqa: E501


        :return: The details of this FieldValue.  # noqa: E501
        :rtype: FieldValues
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this FieldValue.


        :param details: The details of this FieldValue.  # noqa: E501
        :type: FieldValues
        """

        self._details = details

    @property
    def created_at(self):
        """Gets the created_at of this FieldValue.  # noqa: E501


        :return: The created_at of this FieldValue.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this FieldValue.


        :param created_at: The created_at of this FieldValue.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def modified_at(self):
        """Gets the modified_at of this FieldValue.  # noqa: E501


        :return: The modified_at of this FieldValue.  # noqa: E501
        :rtype: str
        """
        return self._modified_at

    @modified_at.setter
    def modified_at(self, modified_at):
        """Sets the modified_at of this FieldValue.


        :param modified_at: The modified_at of this FieldValue.  # noqa: E501
        :type: str
        """

        self._modified_at = modified_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FieldValue, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FieldValue):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FieldValue):
            return True

        return self.to_dict() != other.to_dict()
