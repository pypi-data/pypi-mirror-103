# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['fhirdatetime']

package_data = \
{'': ['*']}

setup_kwargs = {
    'name': 'fhirdatetime',
    'version': '0.1.0b7',
    'description': 'A datetime-compatible class for FHIR date/datetime values.',
    'long_description': '``fhirdatetime``: Flexible ``datetime`` Alternative\n===================================================\n\n.. image:: https://readthedocs.org/projects/fhirdatetime/badge/?version=latest\n   :target: https://fhirdatetime.readthedocs.io/en/latest/?badge=latest\n   :alt: Documentation Status\n\n.. image:: https://img.shields.io/pypi/v/fhirdatetime.svg\n   :target: https://pypi.python.org/pypi/fhirdatetime\n\n.. image:: https://travis-ci.com/mmabey/fhirdatetime.svg?branch=main\n   :target: https://travis-ci.com/mmabey/fhirdatetime\n\n.. image:: https://coveralls.io/repos/github/mmabey/fhirdatetime/badge.svg?branch=main\n   :target: https://coveralls.io/github/mmabey/fhirdatetime?branch=main\n\n.. image:: https://img.shields.io/badge/code%20style-black-000000.svg\n   :target: https://github.com/psf/black\n\n\nA ``datetime``-compatible class for FHIR date/datetime values.\n\nThe `FHIR specification <https://www.hl7.org/fhir/>`_ from HL7 is "a\nstandard for health care data exchange." The FHIR spec includes\n`date <https://www.hl7.org/fhir/datatypes.html#date>`_ and\n`datetime <https://www.hl7.org/fhir/datatypes.html#dateTime>`_ data types\nthat provide more flexibility than the standard Python ``date`` and\n``datetime`` types. This makes sense when you consider a patient may\nreport to their provider that they have experience a particular symptom\nsince a particular year without knowing the month or day of onset.\n\n\nInstallation\n------------\n\nInstall ``fhirdatetime`` using pip::\n\n    pip install fhirdatetime\n\n\nUsage\n-----\n\nCreation\n********\n\nThe ``fhirdatetime.FhirDateTime`` class is designed to be used to store date/datetime values\nfrom FHIR payloads (which are JSON strings), you can create instances from ``str``\nvalues:\n\n>>> FhirDateTime("2021-03-15")\nfhirdatetime.FhirDateTime(2021, 3, 15)\n\nYou can also convert native ``date`` and ``datetime`` objects directly:\n\n>>> FhirDateTime(date(2021, 3, 15))\nfhirdatetime.FhirDateTime(2021, 3, 15)\n>>> FhirDateTime(datetime(2021, 3, 15, 20, 54))\nfhirdatetime.FhirDateTime(2021, 3, 15, 20, 54)\n\nOne purpose of this library is to allow flexibility in granularity without\nsacrificing the ability to compare (using <, >, ==, etc.) against objects\nof the same type as well as native ``date`` and ``datetime`` objects.\n\n\nComparison\n**********\n\nWhen comparing objects, only the values that are populated for *both*\nobjects are considered. Consider the following examples in which only the\nyears are compared:\n\n>>> FhirDateTime(2021) == FhirDateTime(2021, 3, 15)\nTrue\n>>> FhirDateTime(2021) == datetime(2021, 3, 15, 23, 56)\nTrue\n>>> FhirDateTime(2021) == date(2021, 3, 15)\nTrue\n>>> FhirDateTime(2021) < FhirDateTime(2021, 3, 15)\nFalse\n>>> FhirDateTime(2021) > FhirDateTime(2021, 3, 15)\nFalse\n\n\nSorting\n*******\n\n.. important:: When there is ambiguity due to one ``FhirDateTime`` object\n    storing less-granular data than another (e.g., ``FhirDateTime(2021)``\n    vs. ``FhirDateTime(2021, 4)``), objects with missing values will be\n    ordered *before* those with more granular values that would\n    otherwise be considered equivalent when using the ``==`` operator.\n\nWhen you need to sort a sequence of either ``FhirDateTime`` objects or\nobject that *contain* a ``FhirDateTime`` object, the ``FhirDateTime.sort_key()``\nfunction will make it easier to sort the items properly.\n\nThere are two ways to use this function. The first is intended for use\nwhen sorting a sequence of ``FhirDateTime`` objects, something like\nthis (notice that ``sort_key()`` is called with no parameters):\n\n>>> sorted(\n...     [FhirDateTime(2021, 4), FhirDateTime(2021), FhirDateTime(2021, 4, 12)],\n...     key=FhirDateTime.sort_key()\n... )\n[FhirDateTime(2021), FhirDateTime(2021, 4), FhirDateTime(2021, 4, 12)]\n\nThe second is for use when sorting a sequence of objects that have\n``FhirDateTime`` objects as attributes. This example sorts the\n``CarePlan`` [#care_ref]_ objects by the care plan\'s period\'s start date:\n\n>>> sorted(care_plan_list, key=FhirDateTime.sort_key("period.start"))\n\nIn this example, ``sorted()`` passes each item in ``care_plan_list`` to\nthe ``sort_key`` static method, which first gets the ``period``\nattribute of the item, then gets the ``start`` attribute of the period.\nFinally, the year, month, day, and other values are returned to\n``sorted()``, which does the appropriate sorting on those values.\n\nIf neither of these use cases of the ``sort_key()`` function apply to what you\nneed to do, you can always use a custom lambda to do your sorting. For example, the\nfollowing is equivalent to the care plan sorting example:\n\n>>> sorted(care_plan_list, key=lambda x: FhirDateTime.sort_key(x.period.start))\n\n\nLicense\n-------\n\nThis project is licensed under the MIT license.\n\n\n-------\n\n\n.. [#care_ref] Take a look at the ``fhir.resources`` `definition of a CarePlan\n   here <https://github.com/nazrulworld/fhir.resources/blob/master/fhir/resources/careplan.py>`_\n   to get a better idea of what is going on in the example.\n',
    'author': 'Mike Mabey',
    'author_email': 'mmabey@ieee.org',
    'maintainer': None,
    'maintainer_email': None,
    'url': 'https://github.com/mmabey/fhirdatetime',
    'packages': packages,
    'package_data': package_data,
    'python_requires': '>=3.6.1,<4.0.0',
}


setup(**setup_kwargs)
