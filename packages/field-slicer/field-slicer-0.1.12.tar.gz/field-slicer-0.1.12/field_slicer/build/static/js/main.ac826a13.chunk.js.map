{"version":3,"sources":["python/field_slicer/extensions/pluginInterface/misc.ts","python/field_slicer/extensions/pluginInterface/workspaceReducer.ts","python/field_slicer/extensions/pluginInterface/index.ts","python/field_slicer/extensions/theme.ts","App.tsx","python/field_slicer/extensions/pluginInterface/WorkspaceRoute.ts","registerExtensions.ts","reportWebVitals.ts","index.tsx"],"names":["parseWorkspaceUri","workspaceUri","feedUri","undefined","workspaceName","startsWith","a","split","feedId","workspaceReducer","s","type","fieldModels","filter","x","fieldModelId","fieldModel","fieldModelIds","includes","useWorkspaceViewPlugins","plugins","usePlugins","useMemo","p","map","themeOptions","palette","primary","blueGrey","secondary","indigo","overrides","MuiAccordionSummary","root","minHeight","maxHeight","paddingTop","MuiToolbar","regular","MuiTabs","MuiTab","padding","theme","createMuiTheme","App","version","mainWindowPlugin","name","serverInfo","useContext","LabboxProviderContext","location","useLocation","history","useHistory","workspace","QueryString","parse","search","slice","defaultFeedId","workspaceRoute","pathList","pathname","page","Error","routeFromLocation","workspaceRouteDispatch","useCallback","newLocation","route","queryParams","params","list","k","push","join","qs","locationFromRoute","newRoute","workspaceRouteReducer","useReducer","workspaceDispatch2","handleWorkspaceSubfeedMessages","messages","forEach","msg","subfeedName","appendWorkspaceMessages","useSubfeed","onMessages","appendMessages","workspaceDispatch","className","component","registerExtensions","context","activate_mainwindow","activate","activate_workspaceview","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","apiConfig","webSocketUrl","window","hostname","config","webSocketPort","baseSha1Url","httpPort","baseFeedUrl","extensionContext","createExtensionContext","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ac826a13.chunk.js","sourcesContent":["export const parseWorkspaceUri = (workspaceUri: string | undefined): {feedUri: string | undefined, workspaceName: string | undefined} => {\n    if (!workspaceUri) return {feedUri: undefined, workspaceName: undefined}\n    if (!workspaceUri.startsWith('workspace://')) {\n        return {feedUri: undefined, workspaceName: undefined}\n    }\n    const a = workspaceUri.split('/')\n    const feedId = a[2] || undefined\n    const workspaceName = a[3] || undefined\n    if ((!feedId) || (!workspaceName)) return {feedUri: undefined, workspaceName: undefined}\n    return {\n        feedUri: `feed://${feedId}`,\n        workspaceName\n    }\n}","import FieldModel from \"./FieldModel\"\n\nexport type WorkspaceState = {\n    fieldModels: FieldModel[]\n}\n\ntype AddFieldModelWorkspaceAction = {\n    type: 'addFieldModel'\n    fieldModel: FieldModel\n}\n\ntype DeleteFieldModelsWorkspaceAction = {\n    type: 'deleteFieldModels'\n    fieldModelIds: string[]\n}\n\nexport type WorkspaceAction = AddFieldModelWorkspaceAction | DeleteFieldModelsWorkspaceAction\n\nconst workspaceReducer = (s: WorkspaceState, a: WorkspaceAction): WorkspaceState => {\n    switch (a.type) {\n        case 'addFieldModel': return { ...s, fieldModels: [...s.fieldModels.filter(x => (x.fieldModelId !== a.fieldModel.fieldModelId)), a.fieldModel] }\n        case 'deleteFieldModels': return { ...s, fieldModels: s.fieldModels.filter(x => !a.fieldModelIds.includes(x.fieldModelId)) }\n        default: return s\n    }\n}\n\nexport type WorkspaceDispatch = (a: WorkspaceAction) => void\n\nexport default workspaceReducer","import { BasePlugin, ExtensionContext, usePlugins } from 'labbox'\nimport { FunctionComponent, useMemo } from \"react\"\nimport { WorkspaceDispatch, WorkspaceState } from './workspaceReducer'\nimport { WorkspaceRoute, WorkspaceRouteDispatch } from './WorkspaceRoute'\nimport { WorkspaceViewPlugin } from './WorkspaceViewPlugin'\nexport type { default as FieldModel } from './FieldModel'\nexport { default as workspaceReducer } from './workspaceReducer'\nexport type { WorkspaceAction } from './workspaceReducer'\nexport type { WorkspaceRoute, WorkspaceRouteDispatch } from './WorkspaceRoute'\n\nexport type MainWindowProps = {\n    workspace: WorkspaceState\n    workspaceDispatch: WorkspaceDispatch\n    workspaceRoute: WorkspaceRoute\n    workspaceRouteDispatch: WorkspaceRouteDispatch\n    version: string\n    width?: number\n    height?: number\n}\nexport interface MainWindowPlugin extends BasePlugin {\n    type: 'MainWindow'\n    component: FunctionComponent<MainWindowProps>\n}\n\nexport type FSPlugin = MainWindowPlugin | WorkspaceViewPlugin\n\nexport type FSExtensionContext = ExtensionContext<FSPlugin>\n\nexport const useWorkspaceViewPlugins = (): WorkspaceViewPlugin[] => {\n    const plugins = usePlugins<FSPlugin>()\n    return useMemo(() => (\n        plugins.filter(p => (p.type === 'WorkspaceView')).map(p => (p as any as WorkspaceViewPlugin))\n    ), [plugins])\n}","// LABBOX-CUSTOM ////////////////\nimport { blueGrey, indigo } from '@material-ui/core/colors';\nimport { createMuiTheme, ThemeOptions } from '@material-ui/core/styles';\n\n\nconst themeOptions: ThemeOptions = {\n    palette: {\n        primary: blueGrey,\n        secondary: indigo,\n    },\n    overrides: {\n        MuiAccordionSummary: {\n            root: {\n                '&$expanded': {\n                    minHeight: 0,\n                    maxHeight: 30,\n                    paddingTop: 10\n                },\n                minHeight: 0\n            }\n        },\n        MuiToolbar: {\n            regular: {\n                minHeight: 48,\n                '@media(min-width:600px)' : {\n                    minHeight: 48\n                }\n            }\n        },\n        MuiTabs: {\n            root: {\n                minHeight: 30,\n                maxHeight: 30\n            }\n        },\n        MuiTab: {\n            root: {\n                minHeight: 30,\n                maxHeight: 30,\n                padding: '6px 0px'\n            }\n        }\n        // MuiTableCell: {\n        //     root: {  //This can be referred from Material UI API documentation. \n        //         padding: '4px 8px',\n        //         backgroundColor: \"#fafafa\",\n        //     }\n        // },\n    },\n}\n/////////////////////////////////\n\nconst theme = createMuiTheme(themeOptions);\n\nexport default theme;","import { MuiThemeProvider } from '@material-ui/core';\nimport { LabboxProviderContext, usePlugins, useSubfeed } from 'labbox';\nimport QueryString from 'querystring';\nimport React, { useCallback, useContext, useMemo, useReducer } from 'react';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport { FSPlugin, MainWindowPlugin, workspaceReducer, WorkspaceAction } from './python/field_slicer/extensions/pluginInterface';\nimport { parseWorkspaceUri } from './python/field_slicer/extensions/pluginInterface/misc';\nimport { locationFromRoute, routeFromLocation, WorkspaceRoute, WorkspaceRouteAction, workspaceRouteReducer } from './python/field_slicer/extensions/pluginInterface/WorkspaceRoute';\nimport theme from './python/field_slicer/extensions/theme';\n\nfunction App({version}: {version: string}) {\n  const plugins = usePlugins<FSPlugin>()\n  const mainWindowPlugin = plugins.filter(p => (p.name === 'MainWindow'))[0] as any as MainWindowPlugin\n\n  const { serverInfo } = useContext(LabboxProviderContext)\n\n  const location = useLocation()\n  const history = useHistory()\n  const workspaceUri = useMemo(() => {\n    const query = QueryString.parse(location.search.slice(1));\n    const workspace = (query.workspace as string) || 'default'\n    const defaultFeedId = serverInfo?.defaultFeedId\n    const workspaceUri = workspace.startsWith('workspace://') ? workspace : (defaultFeedId ? `workspace://${defaultFeedId}/${workspace}` : undefined)\n    return workspaceUri\n  }, [location.search, serverInfo])\n\n  const workspaceRoute: WorkspaceRoute = useMemo(() => {\n    return routeFromLocation(location, serverInfo)\n  }, [location, serverInfo])\n\n  // const [workspaceRoute, workspaceRouteDispatch] = useReducer(workspaceRouteReducer, {page: 'main'})\n\n  const workspaceRouteDispatch = useCallback(\n    (a: WorkspaceRouteAction) => {\n      const newRoute: WorkspaceRoute = workspaceRouteReducer(workspaceRoute, a)\n      const newLocation = locationFromRoute(newRoute)\n      if ((location.pathname !== newLocation.pathname) || (location.search !== newLocation.search)) {\n        history.push({ ...location, ...newLocation })\n      }\n    },\n    [workspaceRoute, history, location]\n  )\n\n  const [workspace, workspaceDispatch2] = useReducer(workspaceReducer, useMemo(() => ({ fieldModels: [] }), []))\n  const handleWorkspaceSubfeedMessages = useCallback((messages: any[]) => {\n    messages.forEach(msg => workspaceDispatch2(msg))\n  }, [])\n\n  const { feedUri, workspaceName } = parseWorkspaceUri(workspaceUri)\n\n  const subfeedName = useMemo(() => ({ workspaceName }), [workspaceName])\n\n  const { appendMessages: appendWorkspaceMessages } = useSubfeed({ feedUri, subfeedName, onMessages: handleWorkspaceSubfeedMessages })\n  const workspaceDispatch = useCallback((a: WorkspaceAction) => {\n    appendWorkspaceMessages([a])\n  }, [appendWorkspaceMessages])\n\n  return (\n    <MuiThemeProvider theme={theme}>\n      <div className=\"App\">\n        <header className=\"App-header\">\n          {\n            mainWindowPlugin ? (\n              <mainWindowPlugin.component\n              {...{ workspace, workspaceDispatch, workspaceRoute, workspaceRouteDispatch, version }}\n              />\n            ) : (<div>No main window plugin</div>)\n          }\n        </header>\n      </div>\n    </MuiThemeProvider>\n  );\n}\n\nexport default App;\n","import { ServerInfo } from 'labbox/lib/LabboxProvider'\nimport QueryString from 'querystring'\n\ntype Page = 'fieldModels' | 'fieldModel'\nexport const isWorkspacePage = (x: string): x is Page => {\n    return ['fieldModels', 'fieldModel'].includes(x)\n}\n\ntype WorkspaceFieldModelsRoute = {\n    page: 'fieldModels'\n    workspaceUri?: string\n}\ntype WorkspaceFieldModelRoute = {\n    page: 'fieldModel'\n    fieldModelId: string\n    workspaceUri?: string\n}\nexport type WorkspaceRoute = WorkspaceFieldModelsRoute | WorkspaceFieldModelRoute\ntype GotoFieldModelsPageAction = {\n    type: 'gotoFieldModelsPage'\n}\ntype GotoFieldModelPageAction = {\n    type: 'gotoFieldModelPage'\n    fieldModelId: string\n}\nexport type WorkspaceRouteAction = GotoFieldModelsPageAction | GotoFieldModelPageAction\nexport type WorkspaceRouteDispatch = (a: WorkspaceRouteAction) => void\n\nexport interface LocationInterface {\n    pathname: string\n    search: string\n}\n\nexport interface HistoryInterface {\n    location: LocationInterface\n    push: (x: LocationInterface) => void\n}\n\nexport const routeFromLocation = (location: LocationInterface, serverInfo: ServerInfo | null): WorkspaceRoute => {\n    const pathList = location.pathname.split('/')\n\n    const query = QueryString.parse(location.search.slice(1));\n    const workspace = (query.workspace as string) || 'default'\n    const defaultFeedId = serverInfo?.defaultFeedId\n    const workspaceUri = workspace.startsWith('workspace://') ? workspace : (defaultFeedId ? `workspace://${defaultFeedId}/${workspace}` : undefined)\n\n    const page = pathList[1] || 'fieldModels'\n    if (!isWorkspacePage(page)) throw Error(`Invalid page: ${page}`)\n    switch (page) {\n        case 'fieldModels': return {\n            workspaceUri,\n            page\n        }\n        case 'fieldModel': return {\n            workspaceUri,\n            page,\n            fieldModelId: pathList[2]\n        }\n        default: return {\n            workspaceUri,\n            page: 'fieldModels'\n        }\n    }\n}\n\nconst qs = (params: {[key: string]: any}) => {\n    const list = []\n    for (let k in params) {\n        list.push(`${k}=${params[k]}`)\n    }\n    return list.join('&')\n}\n\nexport const locationFromRoute = (route: WorkspaceRoute) => {\n    const queryParams: { [key: string]: string } = {}\n    if (route.workspaceUri) {\n        queryParams['workspace'] = route.workspaceUri\n    }\n    const search = qs(queryParams)\n    switch (route.page) {\n        case 'fieldModels': return {\n            pathname: `/`,\n            search\n        }\n        case 'fieldModel': return {\n            pathname: `/fieldModel/${route.fieldModelId}`,\n            search\n        }\n    }\n}\n\nvar queryString = (params: { [key: string]: string }) => {\n    const keys = Object.keys(params)\n    if (keys.length === 0) return ''\n    return '?' + (\n        keys.map((key) => {\n            return encodeURIComponent(key) + '=' + encodeURIComponent(params[key])\n        }).join('&')\n    )\n}\n\nexport const workspaceRouteReducer = (s: WorkspaceRoute, a: WorkspaceRouteAction): WorkspaceRoute => {\n    let newRoute: WorkspaceRoute = s\n    switch (a.type) {\n        case 'gotoFieldModelsPage': newRoute = {\n            page: 'fieldModels',\n            workspaceUri: s.workspaceUri\n        }; break;\n        case 'gotoFieldModelPage': newRoute = {\n            page: 'fieldModel',\n            fieldModelId: a.fieldModelId,\n            workspaceUri: s.workspaceUri\n        }\n    }\n    return newRoute\n}","// This file was automatically generated by jinjaroot. Do not edit directly. See the .jinjaroot dir.\n\nimport { FSExtensionContext } from './python/field_slicer/extensions/pluginInterface'\n\nconst registerExtensions = async (context: FSExtensionContext) => {\n    const {activate: activate_mainwindow} = await import('./python/field_slicer/extensions/mainwindow/mainwindow')\n    activate_mainwindow(context)\n    const {activate: activate_workspaceview} = await import('./python/field_slicer/extensions/workspaceview/workspaceview')\n    activate_workspaceview(context)\n    }\n\nexport default registerExtensions","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This file was automatically generated by jinjaroot. Do not edit directly. See the .jinjaroot dir.\nimport { createExtensionContext, LabboxProvider } from 'labbox';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport App from './App';\nimport config from './config.json';\nimport './index.css';\nimport { FSPlugin } from './python/field_slicer/extensions/pluginInterface';\nimport registerExtensions from './registerExtensions';\nimport reportWebVitals from './reportWebVitals';\n\nconst apiConfig = {\n  webSocketUrl: `ws://${window.location.hostname}:${config.webSocketPort}`,\n  baseSha1Url: `http://${window.location.hostname}:${config.httpPort}/sha1`,\n  baseFeedUrl: `http://${window.location.hostname}:${config.httpPort}/feed`\n}\n\nconst extensionContext = createExtensionContext<FSPlugin>()\nregisterExtensions(extensionContext).then(() => {\n  ReactDOM.render(\n    // <React.StrictMode>\n      <LabboxProvider\n        extensionContext={extensionContext}\n        apiConfig={apiConfig}\n      >\n        <BrowserRouter><App version=\"0.1.12\" /></BrowserRouter>\n      </LabboxProvider>,\n    // </React.StrictMode>,\n    document.getElementById('root')\n  );  \n})\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\n\n"],"sourceRoot":""}