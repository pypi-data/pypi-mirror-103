{"version":3,"sources":["python/field_slicer/extensions/common/Hyperlink.tsx","python/field_slicer/extensions/common/NiceTable.tsx","python/field_slicer/extensions/mainwindow/MainWindow/HitherJobMonitor/HitherJobMonitorControl.tsx","python/field_slicer/extensions/mainwindow/MainWindow/ServerStatusControl.tsx","python/field_slicer/extensions/mainwindow/MainWindow/SettingsControl.tsx","python/field_slicer/extensions/mainwindow/MainWindow/ApplicationBar.tsx","python/field_slicer/extensions/mainwindow/MainWindow/HitherJobMonitor/HitherJobMonitorJobView.tsx","python/field_slicer/extensions/mainwindow/MainWindow/HitherJobMonitor/HitherJobMonitorTable.tsx","python/field_slicer/extensions/mainwindow/MainWindow/HitherJobMonitor/HitherJobMonitorWindow.tsx","python/field_slicer/extensions/mainwindow/MainWindow/SettingsWindow.tsx","python/field_slicer/extensions/mainwindow/MainWindow/MainWindow.tsx","python/field_slicer/extensions/mainwindow/mainwindow.tsx"],"names":["Hyperlink","color","onClick","children","style0","cursor","textDecoration","style","DeleteRowButton","title","rowKey","onDeleteRow","handleClick","useCallback","ConfirmDeleteRowButton","onConfirmDeleteRow","handleCancel","EditRowButton","onEditRow","makeCell","x","element","text","NiceTable","rows","columns","undefined","deleteRowLabel","editRowLabel","selectionMode","selectedRowKeys","onSelectedRowKeysChanged","selectedRowKeysObj","useMemo","Object","keys","forEach","key","useState","confirmDeleteRowKey","setConfirmDeleteRowKey","handleClickRow","filter","k","concat","toString","handleDeleteRow","handleConfirmDeleteRow","confirmed","handleEditRow","className","width","map","col","label","row","checked","columnValues","useMonitorHitherJobs","hitherJobs","setHitherJobs","hither","useContext","HitherContext","useEffect","timer1","setInterval","hj","getHitherJobs","clearInterval","pendingJobs","j","status","runningJobs","finishedJobs","erroredJobs","allJobs","HitherJobMonitorControl","numPending","length","numRunning","numFinished","numErrored","errored","fontFamily","ServerStatusControl","LabboxProviderContext","websocketStatus","onReconnectWebsocket","icon","Sync","CheckCircleOutline","SyncProblem","Error","IconButton","SettingsControl","onOpenSettings","Settings","homeButtonStyle","paddingBottom","fontWeight","ApplicationBar","onOpenJobMonitor","workspaceRouteDispatch","logo","handleHome","type","AppBar","position","height","Toolbar","src","alt","marginLeft","HitherJobInfoView","job","argumentsCollapsable","kwargs","niceStringify","logArgumentsToConsole","argumentsExpanded","setArgumentsExpanded","resultCollapsable","result","logResultToConsole","resultExpanded","setResultExpanded","argumentsElement","Button","console","info","resultElement","fields","value","jobId","functionName","timestampStarted","formatTime","Date","timestampFinished","error_message","Table","TableHead","TableBody","f","TableRow","TableCell","JSON","stringify","d","first","second","ret","getFullYear","getMonth","getDate","toLocaleTimeString","HitherJobMonitorJobView","onBack","CancelJobButton","Delete","HitherJobMonitorTable","jobs","onViewJob","onCancelJob","sortedJobs","sort","j1","j2","started","finished","message","useStyles","makeStyles","theme","paper","left","top","right","bottom","backgroundColor","palette","background","border","boxShadow","shadows","padding","spacing","overflow","HitherJobMonitorWindow","classes","currentJob","setCurrentJob","handleViewJob","handleCancelJob","handleBack","zIndex","SettingsWindow","workspaceUri","version","serverInfo","workspaceName","parseWorkspaceUri","nodeId","defaultFeedId","getWindowDimensions","window","innerWidth","innerHeight","MainWindow","workspace","workspaceDispatch","workspaceRoute","windowDimensions","setWindowDimensions","handleResize","addEventListener","removeEventListener","useWindowDimensions","width2","height2","H","W","hMargin","workspaceViewPlugin","useWorkspaceViewPlugins","p","name","settingsVisible","setSettingsVisible","jobMonitorVisible","setJobMonitorVisible","handleOpenSettings","handleOpenJobMonitor","handleCloseSettings","handleCloseJobMonitor","margin","component","Modal","open","onClose","activate","context","registerPlugin"],"mappings":"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","file":"static/js/7.6ca3659e.chunk.js","sourcesContent":["import React, { FunctionComponent } from 'react';\n\ntype Props = {\n    onClick?: () => void\n    color?: string\n}\n\nconst Hyperlink: FunctionComponent<Props> = ({ color, onClick, children }) => {\n    let style0 = {\n        color: color || 'gray',\n        cursor: 'pointer',\n        textDecoration: 'underline'\n    };\n    return (\n        <span\n            style={style0}\n            onClick={onClick}\n        >\n            {children}\n        </span>\n    );\n}\n\nexport default Hyperlink","import { Checkbox, IconButton, Table, TableBody, TableCell, TableHead, TableRow } from '@material-ui/core';\nimport { Delete, Edit } from \"@material-ui/icons\";\nimport React, { FunctionComponent, useCallback, useMemo, useState } from 'react';\nimport './NiceTable.css';\n\ninterface Row {\n    key: string\n    columnValues: {[key: string]: any}\n}\ninterface Col {\n    key: string\n    label: string\n}\n\ninterface Props {\n    rows: Row[],\n    columns: Col[],\n    onDeleteRow?: (key: string) => void,\n    deleteRowLabel?: string,\n    onEditRow?: (key: string) => void,\n    editRowLabel?: string,\n    selectionMode?: 'none' | 'single' | 'multiple',\n    selectedRowKeys?: {[key: string]: boolean},\n    onSelectedRowKeysChanged?: ((keys: string[]) => void)\n}\n\nconst NiceTable: FunctionComponent<Props> = ({\n    rows,\n    columns,\n    onDeleteRow=undefined,\n    deleteRowLabel=undefined,\n    onEditRow=undefined,\n    editRowLabel=undefined,\n    selectionMode='none', // none, single, multiple\n    selectedRowKeys={},\n    onSelectedRowKeysChanged=undefined\n}) => {\n    const selectedRowKeysObj = useMemo(() => {\n        const x: {[key: string]: boolean} = {};\n        Object.keys(selectedRowKeys).forEach((key) => {x[key] = selectedRowKeys[key]});\n        return x\n    }, [selectedRowKeys])\n    const [confirmDeleteRowKey, setConfirmDeleteRowKey] = useState<string | null>(null)\n    const handleClickRow = useCallback((key: string) => {\n        if (!onSelectedRowKeysChanged || false) return;\n        \n        if (selectionMode === 'single') {\n            if (!(key in selectedRowKeysObj) || !selectedRowKeysObj[key]) {\n                onSelectedRowKeysChanged([key + '']);\n            } else {\n                onSelectedRowKeysChanged([]);\n            }\n        }\n        else if (selectionMode === 'multiple') {\n            // todo: write this logic. Note, we'll need to also pass in the event to get the ctrl/shift modifiers\n            onSelectedRowKeysChanged(\n                Object.keys(selectedRowKeysObj)\n                    // eslint-disable-next-line eqeqeq\n                    .filter(k => k != key && selectedRowKeysObj[k])\n                    .concat(selectedRowKeysObj[key] ? [] : [key.toString()])\n            );\n        }\n    }, [onSelectedRowKeysChanged, selectionMode, selectedRowKeysObj])\n    const handleDeleteRow = useCallback((rowKey: string) => {\n        setConfirmDeleteRowKey(rowKey)\n    }, [])\n    const handleConfirmDeleteRow = useCallback((rowKey: string, confirmed: boolean) => {\n        if (confirmed) {\n            onDeleteRow && onDeleteRow(rowKey)\n        }\n        setConfirmDeleteRowKey(null)\n    }, [onDeleteRow])\n    const handleEditRow = useCallback((rowKey: string) => {\n        onEditRow && onEditRow(rowKey)\n    }, [onEditRow])\n    return (\n        <Table className=\"NiceTable\">\n            <TableHead>\n                <TableRow>\n                    <TableCell key=\"_first\" style={{ width: 0 }} />\n                    {\n                        columns.map(col => (\n                            <TableCell key={col.key}>\n                                <span>{col.label}</span>\n                            </TableCell>\n                        ))\n                    }\n                </TableRow>\n            </TableHead>\n            <TableBody>\n                {\n                    rows.map(row => (\n                        <TableRow key={row.key}>\n                            <TableCell>\n                                {\n                                    onDeleteRow && ((confirmDeleteRowKey === row.key) ? (\n                                        <ConfirmDeleteRowButton\n                                            title={deleteRowLabel || ''}\n                                            onConfirmDeleteRow={handleConfirmDeleteRow}\n                                            rowKey={row.key}\n                                        />\n                                    ) : (\n                                        (\n                                            <DeleteRowButton\n                                                title={deleteRowLabel || ''}\n                                                onDeleteRow={handleDeleteRow}\n                                                rowKey={row.key}\n                                            />\n                                        )\n                                    ))\n                                }\n                                {\n                                    onEditRow && (\n                                        <EditRowButton\n                                            title={editRowLabel || ''}\n                                            onEditRow={handleEditRow}\n                                            rowKey={row.key}\n                                        />\n                                    )\n                                }\n                                {\n                                    selectionMode !== 'none' && (\n                                        <Checkbox\n                                            checked={selectedRowKeysObj[row.key] || false}\n                                            onClick={() => handleClickRow(row.key)}\n                                        />\n                                    )\n                                }\n                            </TableCell>\n                            {\n                                columns.map(col => (\n                                    <TableCell key={col.key}>\n                                        <span>{makeCell(row.columnValues[col.key])}</span>\n                                    </TableCell>\n                                ))\n                            }\n                        </TableRow>\n                    ))\n                }\n            </TableBody>\n        </Table>\n    );\n};\n\nconst DeleteRowButton: FunctionComponent<{title: string, rowKey: string, onDeleteRow?: (key: string) => void}> = ({ title, rowKey, onDeleteRow }) => {\n    const handleClick = useCallback(() => {\n        onDeleteRow && onDeleteRow(rowKey)\n    }, [onDeleteRow, rowKey])\n    return (\n        <IconButton\n            title={title}\n            onClick={handleClick}\n        ><Delete /></IconButton>\n    )\n}\n\nconst ConfirmDeleteRowButton: FunctionComponent<{title: string, rowKey: string, onConfirmDeleteRow?: (key: string, confirmed: boolean) => void}> = ({ title, rowKey, onConfirmDeleteRow }) => {\n    const handleClick = useCallback(() => {\n        onConfirmDeleteRow && onConfirmDeleteRow(rowKey, true)\n    }, [onConfirmDeleteRow, rowKey])\n    const handleCancel = useCallback(() => {\n        onConfirmDeleteRow && onConfirmDeleteRow(rowKey, false)\n    }, [onConfirmDeleteRow, rowKey])\n    return (\n        <span>\n            Confirm delete?\n            <IconButton\n                title={title}\n                onClick={handleClick}\n            ><Delete /></IconButton>\n            <IconButton\n                title={\"Cancel\"}\n                onClick={handleCancel}\n            >&#10006;</IconButton>\n        </span>\n    )\n}\n\nconst EditRowButton: FunctionComponent<{title: string, rowKey: string, onEditRow?: (key: string) => void}> = ({title, rowKey, onEditRow}) => {\n    return (\n        <IconButton\n            title={title}\n            onClick={() => onEditRow && onEditRow(rowKey)}\n        >\n            <Edit />\n        </IconButton>\n    )\n}\n\nconst makeCell = (x: any) => {\n    // eslint-disable-next-line eqeqeq\n    if (x == 0) return x;  // !'0' is true, but we shouldn't null out actual 0s\n    if (!x) return '';\n    if (typeof(x) == \"object\") {\n        if (x.element) return x.element;\n        else return x.text || '';\n    }\n    else {\n        return x;\n    }\n}\n\nexport default NiceTable;","import { HitherContext, HitherJob } from 'labbox';\nimport React, { FunctionComponent, useContext, useEffect, useState } from 'react';\nimport Hyperlink from '../../../common/Hyperlink';\n\ntype Props = {\n    onClick?: () => void\n}\n\nexport const useMonitorHitherJobs = () => {\n    const [hitherJobs, setHitherJobs] = useState<HitherJob[]>([])\n    const hither = useContext(HitherContext)\n    useEffect(() => {\n        // this should only get called once\n        // (hither should not change, but if it does we might have a problem here)\n        const timer1 = setInterval(() => {\n            const hj = hither.getHitherJobs()\n            setHitherJobs(hj)\n        }, 1000)\n        return () => {\n            clearInterval(timer1)\n        }\n    }, [hither])\n\n    return {\n        pendingJobs: hitherJobs.filter(j => (j.status === 'pending')),\n        runningJobs: hitherJobs.filter(j => (j.status === 'running')),\n        finishedJobs: hitherJobs.filter(j => (j.status === 'finished')),\n        erroredJobs: hitherJobs.filter(j => (j.status === 'error')),\n        allJobs: hitherJobs\n    }\n}\n\nconst HitherJobMonitorControl: FunctionComponent<Props> = ({ onClick }) => {\n    const { pendingJobs, runningJobs, finishedJobs, erroredJobs } = useMonitorHitherJobs()\n\n    const numPending = pendingJobs.length;\n    const numRunning = runningJobs.length;\n    const numFinished = finishedJobs.length;\n    const numErrored = erroredJobs.length;\n    const title = `Jobs: ${numPending} pending | ${numRunning} running | ${numFinished} finished | ${numErrored} errored`\n    const errored = numErrored > 0 ? (\n        <span>:<span style={{color: 'pink'}}>{numErrored}</span></span>\n    ) : <span></span>\n    return (\n        <Hyperlink onClick={onClick} color=\"white\" >\n            <span title={title} style={{ fontFamily: \"courier\" }}>{numPending}:{numRunning}:{numFinished}{errored}</span>\n        </Hyperlink>\n    );\n}\n\nexport default HitherJobMonitorControl","import { IconButton } from '@material-ui/core';\nimport { CheckCircleOutline, Sync, SyncProblem } from '@material-ui/icons';\nimport { LabboxProviderContext } from 'labbox';\nimport React, { FunctionComponent, useCallback, useContext, useMemo } from 'react';\n\ntype Props = {\n    color: any\n}\n\nconst ServerStatusControl: FunctionComponent<Props> = ({ color }) => {\n    const { websocketStatus, onReconnectWebsocket } = useContext(LabboxProviderContext)\n\n    const { icon, title } = useMemo(() => {\n        switch (websocketStatus) {\n            case 'waiting': {\n                return {icon: <Sync style={{color: 'blue'}} />, title: 'Loading...'}\n            }\n            case 'connected': {\n                return {icon: <CheckCircleOutline style={{color}} />, title: 'Connected'}\n            }\n            case 'disconnected': {\n                return {icon: <SyncProblem style={{color: 'red'}} />, title: `Disconnected from server. Click to attempt reconnect.`}\n            }\n            default: {\n                throw Error('Unexpected.')\n            }\n        }\n    }, [websocketStatus, color])\n\n    const handleClick = useCallback(() => {\n        if (websocketStatus === 'disconnected') {\n            onReconnectWebsocket()\n        }\n    }, [websocketStatus, onReconnectWebsocket])\n\n    return (\n        <IconButton title={title} onClick={handleClick}>{icon}</IconButton>\n    );\n}\n\nexport default ServerStatusControl","import { IconButton } from '@material-ui/core';\nimport { Settings } from '@material-ui/icons';\nimport React, { FunctionComponent, useCallback, useMemo } from 'react';\n\ntype Props = {\n    onOpenSettings: () => void\n    color: any\n}\n\nconst SettingsControl: FunctionComponent<Props> = ({ onOpenSettings, color }) => {\n    const { icon, title } = useMemo(() => {\n        return {icon: <Settings />, title: 'Open settings'}\n    }, [])\n\n    const handleClick = useCallback(() => {\n        onOpenSettings()\n    }, [onOpenSettings])\n\n    return (\n        <IconButton style={{color}} title={title} onClick={handleClick}>{icon}</IconButton>\n    );\n}\n\nexport default SettingsControl","import { AppBar, Toolbar } from '@material-ui/core';\nimport React, { FunctionComponent, useCallback } from 'react';\nimport { WorkspaceRouteDispatch } from '../../pluginInterface';\nimport HitherJobMonitorControl from './HitherJobMonitor/HitherJobMonitorControl';\nimport ServerStatusControl from './ServerStatusControl';\nimport SettingsControl from './SettingsControl';\n\n\nconst appBarHeight = 50\n\ntype Props = {\n    onOpenSettings: () => void\n    onOpenJobMonitor: () => void\n    workspaceRouteDispatch: WorkspaceRouteDispatch\n    logo?: any\n}\n\nconst homeButtonStyle: React.CSSProperties = {\n    paddingBottom: 0, color: 'white', fontFamily: 'sans-serif', fontWeight: 'bold',\n    cursor: 'pointer'\n}\n\nconst ApplicationBar: FunctionComponent<Props> = ({ onOpenSettings, onOpenJobMonitor, workspaceRouteDispatch, logo }) => {\n    const handleHome = useCallback(() => {\n        workspaceRouteDispatch({type: 'gotoFieldModelsPage'})\n    }, [workspaceRouteDispatch])\n    return (\n        <AppBar position=\"static\" style={{height: appBarHeight, color: 'white'}}>\n            <Toolbar>\n            {\n                logo && (<img src={logo} className=\"App-logo\" alt=\"logo\" height={30} style={{paddingBottom: 5, cursor: 'pointer'}} onClick={handleHome} />)\n            }\n            &nbsp;&nbsp;&nbsp;<div style={homeButtonStyle} onClick={handleHome}>Labbox Ephys</div>\n            <span style={{marginLeft: 'auto'}} />\n            <span style={{paddingBottom: 0, color: 'white'}}>\n                <SettingsControl onOpenSettings={onOpenSettings} color={'white'} />\n                <ServerStatusControl color={'white'} />\n                <HitherJobMonitorControl onClick={onOpenJobMonitor} />\n            </span>\n            </Toolbar>\n        </AppBar>\n    )\n}\n\nexport default ApplicationBar","import React from 'react'\nimport NiceTable from \"../../../common/NiceTable\";\n\nimport { HitherJob } from 'labbox';\nimport { FunctionComponent, useState } from \"react\";\nimport Hyperlink from \"../../../common/Hyperlink\";\nimport { Button, IconButton, Table, TableBody, TableCell, TableHead, TableRow } from \"@material-ui/core\";\nimport { Delete } from \"@material-ui/icons\";\n\nconst HitherJobMonitorJobView: FunctionComponent<{\n    job: HitherJob,\n    onBack: () => void,\n}> = ({\n    job,\n    onBack\n}) => {\n    return (\n        <div>\n            <p><Hyperlink onClick={onBack}>Back to jobs</Hyperlink></p>\n            <HitherJobInfoView job={job}/>\n        </div>\n    )\n}\n\nconst HitherJobInfoView: FunctionComponent<{job: HitherJob}> = ({ job }) => {\n    const argumentsCollapsable = (job.kwargs && niceStringify(job.kwargs).length > 50);\n    const logArgumentsToConsole = (job.kwargs && niceStringify(job.kwargs).length > 1000);\n    const [argumentsExpanded, setArgumentsExpanded] = useState<boolean>(!argumentsCollapsable);\n\n    const resultCollapsable = (job.result && niceStringify(job.result).length > 50);\n    const logResultToConsole = (job.result && niceStringify(job.result).length > 1000);\n    const [resultExpanded, setResultExpanded] = useState(!resultCollapsable);\n\n    const argumentsElement = argumentsExpanded ? (\n        <div>\n            {\n                argumentsCollapsable && <Button onClick={() => setArgumentsExpanded(false)}>Collapse</Button>\n            }\n            <pre>{job.kwargs ? niceStringify(job.kwargs): ''}</pre>\n        </div>\n    ) : (\n        logArgumentsToConsole ? (\n            <Button onClick={() => {console.info(job.kwargs)}} title=\"Write input argumetns to the browser developer tools console\">Write input arguments to console</Button>\n        ) : (\n            <Button onClick={() => {console.info(job.kwargs); setArgumentsExpanded(true)}}>Expand</Button>\n        )\n    )\n\n    const resultElement = resultExpanded ? (\n        <div>\n            {\n                resultCollapsable && <Button onClick={() => setResultExpanded(false)}>Collapse</Button>\n            }\n            <pre>{job.result ? niceStringify(job.result): ''}</pre>\n        </div>\n    ) : (\n        logResultToConsole ? (\n            <Button onClick={() => {console.info(job.result)}} title=\"Write result to the browser developer tools console\">Write result to console</Button>\n        ) : (\n            <Button onClick={() => {console.info(job.result); setResultExpanded(true)}}>Expand</Button>\n        )\n    )\n\n    const fields = [\n        {\n            label: 'Job ID',\n            value: job.jobId\n        },\n        {\n            label: 'Function name',\n            value: job.functionName\n        },\n        {\n            label: 'Input arguments',\n            value: argumentsElement\n        },\n        {\n            label: 'Status',\n            value: job.status\n        },\n        {\n            label: 'Started',\n            value: job.timestampStarted ? formatTime(new Date(job.timestampStarted)) : ''\n        },\n        {\n            label: 'Finished',\n            value: job.timestampFinished ? formatTime(new Date(job.timestampFinished)) : ''\n        },\n        {\n            label: 'Result',\n            value: resultElement\n        },\n        {\n            label: 'Error message',\n            value: job.error_message\n        }\n    ]\n    return (\n        <div>\n            <Table className=\"NiceTable\">\n                <TableHead></TableHead>\n                <TableBody>\n                    {\n                        fields.map(f => (\n                            <TableRow key={f.label}>\n                                <TableCell>{f.label}</TableCell>\n                                <TableCell>{f.value}</TableCell>\n                            </TableRow>\n                        ))\n                    }\n                </TableBody>\n            </Table>\n            {/* <ConsoleOutView consoleOut={(job.runtime_info || {}).console_out} includeTimestamps={true} /> */}\n        </div>\n    )\n}\n\nfunction niceStringify(x: any) {\n    // TODO: figure out how to keep numeric arrays on one line in this expansion\n    return JSON.stringify(x, null, 4);\n}\n\nfunction formatTime(d: Date) {\n    const datesAreOnSameDay = (first: Date, second: Date) =>\n        first.getFullYear() === second.getFullYear() &&\n        first.getMonth() === second.getMonth() &&\n        first.getDate() === second.getDate();\n    let ret = '';\n    if (!datesAreOnSameDay(d, new Date())) {\n        ret += `${(d.getMonth() + 1)}/${d.getDate()}/${d.getFullYear()}} `;\n    }\n    ret += `${d.toLocaleTimeString()}`\n    return ret;\n}\n\nexport default HitherJobMonitorJobView","import NiceTable from \"../../../common/NiceTable\";\n\nimport { HitherJob } from 'labbox';\nimport React, { FunctionComponent, useMemo } from \"react\";\nimport Hyperlink from \"../../../common/Hyperlink\";\nimport { IconButton } from \"@material-ui/core\";\nimport { Delete } from \"@material-ui/icons\";\n\nconst HitherJobMonitorTable: FunctionComponent<{\n    jobs: HitherJob[],\n    onViewJob: (job: HitherJob) => void,\n    onCancelJob: (job: HitherJob) => void\n}> = ({\n    jobs,\n    onViewJob,\n    onCancelJob\n}) => {\n    const columns = useMemo(() => ([\n        {\n            key: 'jobId',\n            label: 'Job'\n        },\n        {\n            key: 'functionName',\n            label: 'Function'\n        },\n        {\n            key: 'status',\n            label: 'Status'\n        },\n        {\n            key: 'started',\n            label: 'Started'\n        },\n        {\n            key: 'finished',\n            label: 'Finished'\n        },\n        {\n            key: 'message',\n            label: 'Message'\n        }\n    ]), []);\n    const sortedJobs = useMemo(() => (\n        [...jobs].sort((j1: HitherJob, j2: HitherJob) => {\n            if ((j1.status === 'running') && (j2.status !== 'running'))\n                return -1;\n            else if ((j2.status === 'running') && (j1.status !== 'running'))\n                return 1;\n            if ((j1.timestampStarted) && (j2.timestampStarted)) {\n                if (j1.timestampStarted < j2.timestampStarted) return 1;\n                else if (j2.timestampStarted < j1.timestampStarted) return -1;\n                else return 0;\n            }\n            else return 0\n        })\n    ), [jobs])\n    const rows = useMemo(() => (sortedJobs.map((j) => ({\n        key: j.jobId || 'null',\n        columnValues: {\n            jobId: {\n                text: j.jobId,\n                element: <Hyperlink onClick={() => {onViewJob && onViewJob(j)}}>{j.jobId}</Hyperlink>\n            },\n            functionName: {\n                text: j.functionName\n            },\n            status: {\n                text: j.status,\n                element: j.status === 'running' ? (\n                    <span><span>{j.status} </span><CancelJobButton onClick={() => {onCancelJob && onCancelJob(j)}}/></span>\n                ) : <span>{j.status}</span>\n            },\n            started: {text: j.timestampStarted ? formatTime(new Date(j.timestampStarted)) : ''},\n            finished: {text: j.timestampFinished ? formatTime(new Date(j.timestampFinished)) : ''},\n            message: {text: j.error_message || ''}\n        }\n    }))), [sortedJobs])\n    return (\n        <NiceTable\n            rows={rows}\n            columns={columns}\n        />\n    )\n}\n\nfunction niceStringify(x: any) {\n    // TODO: figure out how to keep numeric arrays on one line in this expansion\n    return JSON.stringify(x, null, 4);\n}\n\nfunction formatTime(d: Date) {\n    const datesAreOnSameDay = (first: Date, second: Date) =>\n        first.getFullYear() === second.getFullYear() &&\n        first.getMonth() === second.getMonth() &&\n        first.getDate() === second.getDate();\n    let ret = '';\n    if (!datesAreOnSameDay(d, new Date())) {\n        ret += `${(d.getMonth() + 1)}/${d.getDate()}/${d.getFullYear()}} `;\n    }\n    ret += `${d.toLocaleTimeString()}`\n    return ret;\n}\n\nconst CancelJobButton: FunctionComponent<{onClick: () => void}> = ({ onClick }) => {\n    return (\n        <IconButton title={\"Cancel job\"} onClick={onClick}><Delete /></IconButton>\n    )\n}\n\nexport default HitherJobMonitorTable","import { Table, TableCell, TableRow } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { HitherJob, LabboxProviderContext } from 'labbox';\nimport React, { FunctionComponent, useCallback, useContext, useState } from 'react';\nimport { parseWorkspaceUri } from '../../../pluginInterface/misc';\nimport { WorkspaceState } from '../../../pluginInterface/workspaceReducer';\nimport { useMonitorHitherJobs } from './HitherJobMonitorControl';\nimport HitherJobMonitorJobView from './HitherJobMonitorJobView';\nimport HitherJobMonitorTable from './HitherJobMonitorTable';\n\nconst useStyles = makeStyles((theme) => ({\n    paper: {\n        left: 100,\n        top: 100,\n        right: 100,\n        bottom: 100,\n        position: 'absolute',\n        backgroundColor: theme.palette.background.paper,\n        border: '2px solid #000',\n        boxShadow: theme.shadows[5],\n        padding: theme.spacing(2, 4, 3),\n        overflow: 'auto'\n    },\n}));\n\ntype Props = {\n}\n\nconst HitherJobMonitorWindow: FunctionComponent<Props> = () => {\n    const classes = useStyles()\n\n    const { allJobs } = useMonitorHitherJobs()\n    const [currentJob, setCurrentJob] = useState<HitherJob | null>(null)\n\n    const handleViewJob = useCallback((job: HitherJob) => {\n        setCurrentJob(job)\n    }, [])\n    const handleCancelJob = useCallback(() => {\n    }, [])\n    const handleBack = useCallback(() => {\n        setCurrentJob(null)\n    }, [])\n\n    return (\n        <div className={classes.paper} style={{zIndex: 9999}}>\n            <h2>Job Monitor</h2>\n            {\n                currentJob ? (\n                    <HitherJobMonitorJobView\n                        job={currentJob}\n                        onBack={handleBack}\n                    />\n                ) : (\n                    <HitherJobMonitorTable\n                        jobs={allJobs}\n                        onViewJob={handleViewJob}\n                        onCancelJob={handleCancelJob}\n                    />\n                )\n            }\n            \n        </div>\n    )\n}\n\nexport default HitherJobMonitorWindow","import { Table, TableCell, TableRow } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { LabboxProviderContext } from 'labbox';\nimport React, { FunctionComponent, useContext } from 'react';\nimport { parseWorkspaceUri } from '../../pluginInterface/misc';\nimport { WorkspaceState } from '../../pluginInterface/workspaceReducer';\n\nconst useStyles = makeStyles((theme) => ({\n    paper: {\n        left: 100,\n        top: 100,\n        right: 100,\n        bottom: 100,\n        position: 'absolute',\n        backgroundColor: theme.palette.background.paper,\n        border: '2px solid #000',\n        boxShadow: theme.shadows[5],\n        padding: theme.spacing(2, 4, 3),\n        overflow: 'auto'\n    },\n}));\n\ntype Props = {\n    workspace: WorkspaceState\n    workspaceUri: string | undefined\n    version: string\n}\n\nconst SettingsWindow: FunctionComponent<Props> = ({ workspaceUri, version }) => {\n    const classes = useStyles();\n    const { serverInfo } = useContext(LabboxProviderContext)\n    const { workspaceName } = parseWorkspaceUri(workspaceUri)\n    return (\n        <div className={classes.paper} style={{zIndex: 9999}}>\n            <h2>Field slicer {version}</h2>\n            <Table>\n                <TableRow>\n                    <TableCell>Workspace URI</TableCell>\n                    <TableCell>{workspaceUri || ''}</TableCell>\n                </TableRow>\n                <TableRow>\n                    <TableCell>Workspace name</TableCell>\n                    <TableCell>{workspaceName}</TableCell>\n                </TableRow>\n                <TableRow>\n                    <TableCell>Kachery node ID</TableCell>\n                    <TableCell>{serverInfo ? serverInfo.nodeId : ''}</TableCell>\n                </TableRow>\n                <TableRow>\n                    <TableCell>Default feed ID</TableCell>\n                    <TableCell>{serverInfo ? serverInfo.defaultFeedId : ''}</TableCell>\n                </TableRow>\n            </Table>\n        </div>\n    )\n}\n\nexport default SettingsWindow","import { Modal } from '@material-ui/core';\nimport { useSubfeed } from 'labbox';\nimport React, { FunctionComponent, useCallback, useEffect, useMemo, useReducer, useState } from 'react';\nimport { MainWindowProps, useWorkspaceViewPlugins } from '../../pluginInterface';\nimport { parseWorkspaceUri } from '../../pluginInterface/misc';\nimport workspaceReducer, { WorkspaceAction } from '../../pluginInterface/workspaceReducer';\nimport ApplicationBar from './ApplicationBar';\nimport HitherJobMonitorWindow from './HitherJobMonitor/HitherJobMonitorWindow';\nimport SettingsWindow from './SettingsWindow';\n\n// Thanks: https://stackoverflow.com/questions/36862334/get-viewport-window-height-in-reactjs\nfunction getWindowDimensions() {\n    const { innerWidth: width, innerHeight: height } = window;\n    return {\n        width,\n        height\n    };\n}\nfunction useWindowDimensions() {\n    const [windowDimensions, setWindowDimensions] = useState(getWindowDimensions());\n\n    useEffect(() => {\n        function handleResize() {\n            setWindowDimensions(getWindowDimensions());\n        }\n\n        window.addEventListener('resize', handleResize);\n        return () => window.removeEventListener('resize', handleResize);\n    }, []);\n\n    return windowDimensions;\n}\n\nconst MainWindow: FunctionComponent<MainWindowProps> = ({ workspace, workspaceDispatch, workspaceRoute, workspaceRouteDispatch, version, width, height }) => {\n    const { width: width2, height: height2 } = useWindowDimensions()\n    const appBarHeight = 72 // hard-coded for now - must agree with theme\n    const H = (height || height2) - appBarHeight - 2\n    const hMargin = 0\n    const W = (width || width2) - hMargin * 2 - 2\n\n    const workspaceViewPlugin = useWorkspaceViewPlugins().filter(p => (p.name === 'WorkspaceView'))[0]\n    if (!workspaceViewPlugin) throw Error('Unable to find workspace view plugin')\n\n    const [settingsVisible, setSettingsVisible] = useState(false)\n    const [jobMonitorVisible, setJobMonitorVisible] = useState(false)\n\n    const handleOpenSettings = useCallback(() => {\n        setSettingsVisible(true)\n    }, [])\n    const handleOpenJobMonitor = useCallback(() => {\n        setJobMonitorVisible(true)\n    }, [])\n\n    const handleCloseSettings = useCallback(() => {\n        setSettingsVisible(false)\n    }, [])\n    const handleCloseJobMonitor = useCallback(() => {\n        setJobMonitorVisible(false)\n    }, [])\n\n    return (\n        <div style={{margin: 0}}>\n            <ApplicationBar\n                onOpenSettings={handleOpenSettings}\n                onOpenJobMonitor={handleOpenJobMonitor}\n                workspaceRouteDispatch={workspaceRouteDispatch}\n            />\n            <div style={{position: 'absolute', top: appBarHeight}}>\n                <workspaceViewPlugin.component width={W} height={H} workspace={workspace} workspaceDispatch={workspaceDispatch} workspaceRoute={workspaceRoute} workspaceRouteDispatch={workspaceRouteDispatch} />\n            </div>\n            <Modal\n                open={settingsVisible}\n                onClose={handleCloseSettings}\n                style={{zIndex: 9999}}\n            >\n                <span>\n                    <SettingsWindow\n                        workspace={workspace}\n                        workspaceUri={workspaceRoute.workspaceUri}\n                        version={version}\n                    />\n                </span>\n            </Modal>\n            <Modal\n                open={jobMonitorVisible}\n                onClose={handleCloseJobMonitor}\n                style={{zIndex: 9999}}\n            >\n                <span>\n                    <HitherJobMonitorWindow />\n                </span>\n            </Modal>\n        </div>\n    )\n}\n\nexport default MainWindow","import { FSExtensionContext } from \"../pluginInterface\";\nimport MainWindow from \"./MainWindow/MainWindow\";\n\nexport function activate(context: FSExtensionContext) {\n    context.registerPlugin({\n        type: 'MainWindow',\n        name: 'MainWindow',\n        label: 'Main Window',\n        component: MainWindow\n    })\n}"],"sourceRoot":""}